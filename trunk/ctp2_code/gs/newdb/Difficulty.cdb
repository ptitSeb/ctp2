#-----------------------------------------------------------------------------
#
#  Project      : Call To Power 2
#  File type    : dbgen input
#  Description  : Difficuilt type descriptor
#  Id           : $Id:$
#
#----------------------------------------------------------------------------
#
#  Disclaimer
#
#  THIS FILE IS NOT GENERATED OR SUPPORTED BY ACTIVISION.
#
#  This material has been developed at apolyton.net by the Apolyton CtP2 
#  Source Code Project. Contact the authors at ctp2source@apolyton.net.
#
#-----------------------------------------------------------------------------
#
#  Modifications from the original Activision code:
#
# - Created file. (Sep 5th 2005 Martin Gühmann)
# - Fixed some typos in the flags. (April 29th 2006 Martin Gühmann)
# - Added NoAIProductionDeficit and NoAIGoldDeficitflags. (April 29th 2006 Martin Gühmann)
#
#-----------------------------------------------------------------------------

Difficulty{
	Int					BaseContentment		aka BASE_CONTENTMENT			# starting happiness
	Int					GranaryCoeff		aka GRANARY_COEF				# a city needs this number times the pop food to grow
	Float				BigCityScale		aka BIG_CITY_SCALE				# how much each unhappy person matters
	Float				BigCityOffset		aka BIG_CITY_OFFSET				# population above this size are unhappy
	Int					ScienceHandicap		aka SCIENCE_HANDICAP			# How much extra science to get advances
	Float				PollutionMultiplier	aka POLLUTION_MULTIPLIER		# how much extra pollution
	Float				RiotChance			aka RIOT_CHANCE					# chance of rioting for each happiness point below const->RIOT_LEVEL
	Float				StarvationEffect	aka STARVATION_EFFECT			# How much happiness a city loses when starving
	Int					StartingGold		aka STARTING_GOLD				# How much gold the player starts with
	Int					VisionBonus			aka SUPER_STEALTH_FUN_FACTOR	# I can see for miles & miles
	Int					BaseScore			aka	BASE_SCORE					# base score from which to generate the civ score

	Struct Period{
		Int StartTurn    aka START_TURN
		Int YearsPerTurn aka YEARS_PER_TURN
	}

	Struct TimeScale{
		Int StartYear aka START_YEAR
		Int NumPeriods aka NUM_PERIODS
		Struct Period[] Period aka PERIOD
		StringID NegativeYearFormat aka NEGATIVE_YEAR_FORMAT
		StringID PositiveYearFormat aka POSITIVE_YEAR_FORMAT
	}

	Struct TimeScale	TimeScale aka TIME_SCALE

	Float				FeatsFactor					aka FEATS_FACTOR
	Float				AdvancesFactor				aka ADVANCES_FACTOR
	Float				WondersFactor				aka WONDERS_FACTOR
	Float				Cities0To3Factor			aka CITIES0TO30_FACTOR
	Float				Cities3To10Factor			aka CITIES30TO100_FACTOR
	Float				Cities10To50Factor			aka CITIES100TO500_FACTOR
	Float				Cities50PlusFactor			aka CITIES500PLUS_FACTOR
	Float				CitiesRecapturedFactor		aka CITIES_RECAPTURED_FACTOR
	Float				PopulationFactor			aka POPULATION_FACTOR
	Float				RankFactor					aka RANK_FACTOR
	Float				OpponentsConqueredFactor	aka OPPONENTS_CONQUERED_FACTOR
	Float				AlliesFactor				aka ALLIES_FACTOR
	Float				WonderVictoryBonus			aka WONDER_VICTORY_BONUS
	Float				SoloVictoryBonus			aka SOLO_VICTORY_BONUS
	Float				AlliedVictoryBonus			aka ALLIED_VICTORY_BONUS

	Int					AIStartUnits				aka AI_START_UNITS
	Int					AIStartGold					aka AI_START_GOLD
	Int					AIStartAdvances				aka AI_START_ADVANCES
	Int					AIStartPublicWorks			aka AI_START_PUBLIC_WORKS
	Int					HumanStartLocation			aka HUMAN_START_LOCATION

	Int					AIIntelligenceFactor			aka AI_INTELLIGENCE_FACTOR
	Int					AIGangUpFactor					aka AI_GANG_UP_FACTOR
	Int					DistanceFromCapitolAdjustment	aka DISTANCE_FROM_CAPITOL_ADJUSTMENT
	Int					AIDistanceFromCapitolAdjustment	aka AI_DISTANCE_FROM_CAPITOL_ADJUSTMENT
	Int					PollutionAdjust					aka POLLUTION_ADJUST

	# Resource Adjustment Amounts
	# when ai is ranked by this amount or less below lowest ranked human, 
	# then use AI_MIN_BEHIND_TECHNOLOGY_* numbers
	Float				AIMinBehind					aka	AI_MIN_BEHIND_PERCENT

	# when ai is ranked by this amount or less below lowest ranked human, 
	# then use ai_max_behind* numbers
	Float				AIMaxBehind					aka	AI_MAX_BEHIND_PERCENT

	# when ai is ranked by atleast this amount above highest ranked human,
	# then use ai_min_ahead* numbers
	Float				AIMinAhead					aka	AI_MIN_AHEAD_PERCENT

	# when ai is ranked by this amount or more above highest ranked human,
	# then use ai_max_ahead* numbers
	Float				AIMaxAhead					aka	AI_MAX_AHEAD_PERCENT

	# note: scale values linearly between max-min when amount 
	# behind/ahead are between min-max

	# % amount to multiply advance cost by per age for ai
	Float[]				AIMinBehindTechnologyCost			aka	AI_MIN_BEHIND_TECHNOLOGY_COST
	Float[]				AIMaxBehindTechnologyCost			aka	AI_MAX_BEHIND_TECHNOLOGY_COST

	# % amount to multiply production cost by per age for ai
	Float[]				AIMinBehindProductionCostAdjustment	aka	AI_MIN_BEHIND_PRODUCTION_COST_ADJUSTMENT
	Float[]				AIMaxBehindProductionCostAdjustment	aka	AI_MAX_BEHIND_PRODUCTION_COST_ADJUSTMENT

	# multiplier for gold collected for ai
	Float[]				AIMinBehindGoldCostAdjustment		aka	AI_MIN_BEHIND_GOLD_ADJUSTMENT
	Float[]				AIMaxBehindGoldCostAdjustment		aka	AI_MAX_BEHIND_GOLD_ADJUSTMENT 

	# % amount to multiply advance cost by per age for ai
	Float[]				AIMinAheadTechnologyCost			aka	AI_MIN_AHEAD_TECHNOLOGY_COST
	Float[]				AIMaxAheadTechnologyCost			aka	AI_MAX_AHEAD_TECHNOLOGY_COST

	# % amount to multiply production cost by per age for ai
	Float[]				AIMinAheadProductionCostAdjustment	aka	AI_MIN_AHEAD_PRODUCTION_COST_ADJUSTMENT
	Float[]				AIMaxAheadProductionCostAdjustment	aka	AI_MAX_AHEAD_PRODUCTION_COST_ADJUSTMENT

	# multiplier for gold collected fo ai
	Float[]				AIMinAheadGoldCostAdjustment		aka	AI_MIN_AHEAD_GOLD_ADJUSTMENT
	Float[]				AIMaxAheadGoldCostAdjustment		aka	AI_MAX_AHEAD_GOLD_ADJUSTMENT

	Int					MaxHumanAdvances					aka	MAX_HUMAN_ADVANCES
	Int					MaxAIAdvances						aka	MAX_AI_ADVANCES
	Float				HumanScienceBonus					aka	HUMAN_SCIENCE_BONUS		# % amount to add to advance cost for the player
	Float				HumanFoodBonus						aka	HUMAN_FOOD_BONUS		# % amount to add to food collected for the player

	#Starting Condtions
	Int					ExtraSettlerChance					aka	EXTRA_SETTLER_CHANCE

	Struct AdvanceChance{
		# Don't change in this struct anything, otherwise you break loading the old DiffDB.txt.
		Record Advance StartAdvance
		Int            HumanChance    # Needs to be checked
		Int            AIChance       # Needs to be checked
	}

	Struct AdvanceChances{
		struct AdvanceChance[] AdvanceChance
	}

	Struct AdvanceChances AdvanceChances aka ADVANCE_CHANCES

	Int					PollutionStartProductionLevel		aka	POLLUTION_START_PRODUCTION_LEVEL
	Int					PollutionStartPopulationLevel		aka	POLLUTION_START_POPULATION_LEVEL
	Int					PollutionProductionRatio			aka	POLLUTION_PRODUCTION_RATIO
	Int					PollutionPopulationRatio			aka	POLLUTION_POPULATION_RATIO
	Bit					NoAIProductionDeficit				# AI doesn't lose units
	Bit					NoAIGoldDeficit						# AI cities don't go negative
	Bit					AICityDefenderBonus					# AI population adds to city defenses
	Bit					BarbarianCities						# entrenched barbarians create a city
	Bit(Int)			SectarianHappiness					# Conflicting religious, citystyles and city govts cause unhappiness
	Bit					RevoltCasualties					#Revolting city loses 1/3 of population
	Bit					RevoltInsurgents					#Revolting city creates barbarians
	Record TerrainImprovement[]     BarbarianCamps			# entrenched barbarians create an imp
	Bit					BarbarianSpawnsBarbarian			# entrenched barbs create more barbs

}
