
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __TerrainImprovement_RECORD_H__
#define __TerrainImprovement_RECORD_H__

/*
 * TerrainImprovement description
 */
#include "CTPRecord.h"
//
// m_flags0
#define k_TerrainImprovement_Effect_Bit          0x00000001
#define k_TerrainImprovement_TerraformTerrain_Bit 0x00000002
#define k_TerrainImprovement_Column_Bit          0x00000004
#define k_TerrainImprovement_IntBorderRadius_Bit 0x00000008
#define k_TerrainImprovement_SquaredBorderRadius_Bit 0x00000010
#define k_TerrainImprovement_GLHidden_Bit        0x00000020
//
// m_Class bit group
#define k_TerrainImprovement_Class_Farm_Bit      0x00000001
#define k_TerrainImprovement_Class_Road_Bit      0x00000002
#define k_TerrainImprovement_Class_Mine_Bit      0x00000004
#define k_TerrainImprovement_Class_ATM_Bit       0x00000008
#define k_TerrainImprovement_Class_OceanFarm_Bit 0x00000010
#define k_TerrainImprovement_Class_OceanMine_Bit 0x00000020
#define k_TerrainImprovement_Class_OceanATM_Bit  0x00000040
#define k_TerrainImprovement_Class_OceanRoad_Bit 0x00000080
#define k_TerrainImprovement_Class_Structure1_Bit 0x00000100
#define k_TerrainImprovement_Class_Structure2_Bit 0x00000200
#define k_TerrainImprovement_Class_LandDetector_Bit 0x00000400
#define k_TerrainImprovement_Class_OceanDetector_Bit 0x00000800
#define k_TerrainImprovement_Class_Terraform_Bit 0x00001000
//
// m_Excludes bit group
#define k_TerrainImprovement_Excludes_Farm_Bit   0x00000001
#define k_TerrainImprovement_Excludes_Road_Bit   0x00000002
#define k_TerrainImprovement_Excludes_Mine_Bit   0x00000004
#define k_TerrainImprovement_Excludes_ATM_Bit    0x00000008
#define k_TerrainImprovement_Excludes_OceanFarm_Bit 0x00000010
#define k_TerrainImprovement_Excludes_OceanMine_Bit 0x00000020
#define k_TerrainImprovement_Excludes_OceanATM_Bit 0x00000040
#define k_TerrainImprovement_Excludes_OceanRoad_Bit 0x00000080
#define k_TerrainImprovement_Excludes_Structure1_Bit 0x00000100
#define k_TerrainImprovement_Excludes_Structure2_Bit 0x00000200
#define k_TerrainImprovement_Excludes_LandDetector_Bit 0x00000400
#define k_TerrainImprovement_Excludes_OceanDetector_Bit 0x00000800
#define k_TerrainImprovement_Excludes_Terraform_Bit 0x00001000
//
// m_CanSee bit group
#define k_TerrainImprovement_CanSee_Standard_Bit 0x00000001
#define k_TerrainImprovement_CanSee_Underwater_Bit 0x00000002
#define k_TerrainImprovement_CanSee_Stealth_Bit  0x00000004
#define k_TerrainImprovement_CanSee_UnusedBit3_Bit 0x00000008
#define k_TerrainImprovement_CanSee_UnusedBit4_Bit 0x00000010
#define k_TerrainImprovement_CanSee_UnusedBit5_Bit 0x00000020
#define k_TerrainImprovement_CanSee_UnusedBit6_Bit 0x00000040
#define k_TerrainImprovement_CanSee_UnusedBit7_Bit 0x00000080
#define k_TerrainImprovement_CanSee_UnusedBit8_Bit 0x00000100
#define k_TerrainImprovement_CanSee_UnusedBit9_Bit 0x00000200
#define k_TerrainImprovement_CanSee_UnusedBit10_Bit 0x00000400
#define k_TerrainImprovement_CanSee_UnusedBit11_Bit 0x00000800
#define k_TerrainImprovement_CanSee_UnusedBit12_Bit 0x00001000
#define k_TerrainImprovement_CanSee_UnusedBit13_Bit 0x00002000
#define k_TerrainImprovement_CanSee_UnusedBit14_Bit 0x00004000
#define k_TerrainImprovement_CanSee_UnusedBit15_Bit 0x00008000
//
// m_flags0
#define k_Effect_BonusFood_Bit                   0x00000001
#define k_Effect_BonusProduction_Bit             0x00000002
#define k_Effect_BonusGold_Bit                   0x00000004
#define k_Effect_MoveCost_Bit                    0x00000008
#define k_Effect_Radar_Bit                       0x00000010
#define k_Effect_Airport_Bit                     0x00000020
#define k_Effect_ListeningPost_Bit               0x00000040
#define k_Effect_Endgame_Bit                     0x00000080
#define k_Effect_VisionRange_Bit                 0x00000100
#define k_Effect_RadarRange_Bit                  0x00000200
#define k_Effect_DefenseBonus_Bit                0x00000400
//
// Range definitions
#define k_MIN_ConstructionTiles              3
#define k_MAX_ConstructionTiles              3

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class TerrainRecord;
class IconRecord;
class TerrainRecord;
class TerrainRecord;
class AdvanceRecord;
class AdvanceRecord;

class TerrainImprovementRecord : public CTPRecord
{
public:
    typedef sint32 (TerrainImprovementRecord::*IntAccessor)() const;
    typedef bool (TerrainImprovementRecord::*BoolAccessor)() const;
    typedef double (TerrainImprovementRecord::*FloatAccessor)() const ;
    typedef bool (TerrainImprovementRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (TerrainImprovementRecord::*BitFloatAccessor)(double &val) const;
    class Effect {
    private:
        uint32 m_flags0;

        sint32           *m_Terrain; // Index into Terrain database
        sint32           m_numTerrain;
        sint32            m_BonusFoodValue;
        sint32            m_BonusProductionValue;
        sint32            m_BonusGoldValue;
        sint32            m_MoveCostValue;
        sint32            m_VisionRangeValue;
        sint32            m_RadarRangeValue;
        double            m_DefenseBonusValue;
        sint32            m_EnableAdvance; // Index into Advance database
        sint32           *m_ObsoleteAdvance; // Index into Advance database
        sint32           m_numObsoleteAdvance;
        sint32            m_ProductionCost;
        sint32            m_ProductionTime;
        sint32            m_TilesetIndex;
    public:
        Effect();
        ~Effect();
        void operator=(const Effect & rval);
        bool operator==(const Effect & rval) { 
          if (m_Terrain != rval.m_Terrain) 
             return false; 
          if (m_EnableAdvance != rval.m_EnableAdvance) 
             return false; 
          if (m_ObsoleteAdvance != rval.m_ObsoleteAdvance) 
             return false; 
          return true; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, Effect **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, Effect *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        sint32           GetTerrainIndex(sint32 index) const;
    const TerrainRecord *GetTerrain(sint32 index) const;
    sint32           GetNumTerrain() const { return m_numTerrain;}
        bool             GetBonusFood() const { return (m_flags0 & k_Effect_BonusFood_Bit) != 0; }
    bool             GetBonusFood(sint32 &value) const {
                         if((m_flags0 & k_Effect_BonusFood_Bit) == 0) return false;
                         value = m_BonusFoodValue;
                         return true;
                     }
        bool             GetBonusProduction() const { return (m_flags0 & k_Effect_BonusProduction_Bit) != 0; }
    bool             GetBonusProduction(sint32 &value) const {
                         if((m_flags0 & k_Effect_BonusProduction_Bit) == 0) return false;
                         value = m_BonusProductionValue;
                         return true;
                     }
        bool             GetBonusGold() const { return (m_flags0 & k_Effect_BonusGold_Bit) != 0; }
    bool             GetBonusGold(sint32 &value) const {
                         if((m_flags0 & k_Effect_BonusGold_Bit) == 0) return false;
                         value = m_BonusGoldValue;
                         return true;
                     }
        bool             GetMoveCost() const { return (m_flags0 & k_Effect_MoveCost_Bit) != 0; }
    bool             GetMoveCost(sint32 &value) const {
                         if((m_flags0 & k_Effect_MoveCost_Bit) == 0) return false;
                         value = m_MoveCostValue;
                         return true;
                     }
        bool             GetRadar() const { return (m_flags0 & k_Effect_Radar_Bit) != 0; }
        bool             GetAirport() const { return (m_flags0 & k_Effect_Airport_Bit) != 0; }
        bool             GetListeningPost() const { return (m_flags0 & k_Effect_ListeningPost_Bit) != 0; }
        bool             GetEndgame() const { return (m_flags0 & k_Effect_Endgame_Bit) != 0; }
        bool             GetVisionRange() const { return (m_flags0 & k_Effect_VisionRange_Bit) != 0; }
    bool             GetVisionRange(sint32 &value) const {
                         if((m_flags0 & k_Effect_VisionRange_Bit) == 0) return false;
                         value = m_VisionRangeValue;
                         return true;
                     }
        bool             GetRadarRange() const { return (m_flags0 & k_Effect_RadarRange_Bit) != 0; }
    bool             GetRadarRange(sint32 &value) const {
                         if((m_flags0 & k_Effect_RadarRange_Bit) == 0) return false;
                         value = m_RadarRangeValue;
                         return true;
                     }
        bool             GetDefenseBonus() const { return (m_flags0 & k_Effect_DefenseBonus_Bit) != 0; }
    bool             GetDefenseBonus(double &value) const {
                         if((m_flags0 & k_Effect_DefenseBonus_Bit) == 0) return false;
                         value = m_DefenseBonusValue;
                         return true;
                     }
        sint32           GetEnableAdvanceIndex() const { return m_EnableAdvance; }
    const AdvanceRecord *GetEnableAdvance() const;
        sint32           GetObsoleteAdvanceIndex(sint32 index) const;
    const AdvanceRecord *GetObsoleteAdvance(sint32 index) const;
    sint32           GetNumObsoleteAdvance() const { return m_numObsoleteAdvance;}
        sint32           GetProductionCost() const { return m_ProductionCost; }
        sint32           GetProductionTime() const { return m_ProductionTime; }
        sint32           GetTilesetIndex() const { return m_TilesetIndex; }
    }; /* class Effect */

private:
    uint32 m_flags0;

    uint32            m_Class;
    uint32            m_Excludes;
    uint32            m_CanSee;
    sint32           *m_CantBuildOn; // Index into Terrain database
    sint32           m_numCantBuildOn;
    Effect            m_EffectValue;
    Effect           *m_TerrainEffect;
    sint32           m_numTerrainEffect;
    sint32            m_Icon; // Index into Icon database
    sint32            m_Tooltip;
    sint32            m_Statusbar;
    sint32            m_Level;
    sint32            m_ConstructionTiles[k_MAX_ConstructionTiles];
    sint32           m_numConstructionTiles;
    sint32            m_TerraformTerrainValue; // Index into Terrain database
    sint32            m_ColumnValue;
    sint32            m_IntBorderRadiusValue;
    sint32            m_SquaredBorderRadiusValue;

public:
    TerrainImprovementRecord() { Init(); };
    ~TerrainImprovementRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    TerrainImprovementRecord(const TerrainImprovementRecord &rval) { Init(); *this = rval; }
    void operator=(const TerrainImprovementRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const TerrainImprovementRecord & rval);
    sint32 ParseClassBit(DBLexer *lex);
    sint32 ParseExcludesBit(DBLexer *lex);
    sint32 ParseCanSeeBit(DBLexer *lex);
    //
    // Accessors
    //

    //
    // Class flag group
    uint32           GetClass() const { return m_Class; }
    bool             GetClassFarm() const { return (m_Class & k_TerrainImprovement_Class_Farm_Bit) != 0; }
    bool             GetClassRoad() const { return (m_Class & k_TerrainImprovement_Class_Road_Bit) != 0; }
    bool             GetClassMine() const { return (m_Class & k_TerrainImprovement_Class_Mine_Bit) != 0; }
    bool             GetClassATM() const { return (m_Class & k_TerrainImprovement_Class_ATM_Bit) != 0; }
    bool             GetClassOceanFarm() const { return (m_Class & k_TerrainImprovement_Class_OceanFarm_Bit) != 0; }
    bool             GetClassOceanMine() const { return (m_Class & k_TerrainImprovement_Class_OceanMine_Bit) != 0; }
    bool             GetClassOceanATM() const { return (m_Class & k_TerrainImprovement_Class_OceanATM_Bit) != 0; }
    bool             GetClassOceanRoad() const { return (m_Class & k_TerrainImprovement_Class_OceanRoad_Bit) != 0; }
    bool             GetClassStructure1() const { return (m_Class & k_TerrainImprovement_Class_Structure1_Bit) != 0; }
    bool             GetClassStructure2() const { return (m_Class & k_TerrainImprovement_Class_Structure2_Bit) != 0; }
    bool             GetClassLandDetector() const { return (m_Class & k_TerrainImprovement_Class_LandDetector_Bit) != 0; }
    bool             GetClassOceanDetector() const { return (m_Class & k_TerrainImprovement_Class_OceanDetector_Bit) != 0; }
    bool             GetClassTerraform() const { return (m_Class & k_TerrainImprovement_Class_Terraform_Bit) != 0; }
    // End Class flag group
    //

    //
    // Excludes flag group
    uint32           GetExcludes() const { return m_Excludes; }
    bool             GetExcludesFarm() const { return (m_Excludes & k_TerrainImprovement_Excludes_Farm_Bit) != 0; }
    bool             GetExcludesRoad() const { return (m_Excludes & k_TerrainImprovement_Excludes_Road_Bit) != 0; }
    bool             GetExcludesMine() const { return (m_Excludes & k_TerrainImprovement_Excludes_Mine_Bit) != 0; }
    bool             GetExcludesATM() const { return (m_Excludes & k_TerrainImprovement_Excludes_ATM_Bit) != 0; }
    bool             GetExcludesOceanFarm() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanFarm_Bit) != 0; }
    bool             GetExcludesOceanMine() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanMine_Bit) != 0; }
    bool             GetExcludesOceanATM() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanATM_Bit) != 0; }
    bool             GetExcludesOceanRoad() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanRoad_Bit) != 0; }
    bool             GetExcludesStructure1() const { return (m_Excludes & k_TerrainImprovement_Excludes_Structure1_Bit) != 0; }
    bool             GetExcludesStructure2() const { return (m_Excludes & k_TerrainImprovement_Excludes_Structure2_Bit) != 0; }
    bool             GetExcludesLandDetector() const { return (m_Excludes & k_TerrainImprovement_Excludes_LandDetector_Bit) != 0; }
    bool             GetExcludesOceanDetector() const { return (m_Excludes & k_TerrainImprovement_Excludes_OceanDetector_Bit) != 0; }
    bool             GetExcludesTerraform() const { return (m_Excludes & k_TerrainImprovement_Excludes_Terraform_Bit) != 0; }
    // End Excludes flag group
    //

    //
    // CanSee flag group
    uint32           GetCanSee() const { return m_CanSee; }
    bool             GetCanSeeStandard() const { return (m_CanSee & k_TerrainImprovement_CanSee_Standard_Bit) != 0; }
    bool             GetCanSeeUnderwater() const { return (m_CanSee & k_TerrainImprovement_CanSee_Underwater_Bit) != 0; }
    bool             GetCanSeeStealth() const { return (m_CanSee & k_TerrainImprovement_CanSee_Stealth_Bit) != 0; }
    bool             GetCanSeeUnusedBit3() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit3_Bit) != 0; }
    bool             GetCanSeeUnusedBit4() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit4_Bit) != 0; }
    bool             GetCanSeeUnusedBit5() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit5_Bit) != 0; }
    bool             GetCanSeeUnusedBit6() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit6_Bit) != 0; }
    bool             GetCanSeeUnusedBit7() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit7_Bit) != 0; }
    bool             GetCanSeeUnusedBit8() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit8_Bit) != 0; }
    bool             GetCanSeeUnusedBit9() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit9_Bit) != 0; }
    bool             GetCanSeeUnusedBit10() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit10_Bit) != 0; }
    bool             GetCanSeeUnusedBit11() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit11_Bit) != 0; }
    bool             GetCanSeeUnusedBit12() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit12_Bit) != 0; }
    bool             GetCanSeeUnusedBit13() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit13_Bit) != 0; }
    bool             GetCanSeeUnusedBit14() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit14_Bit) != 0; }
    bool             GetCanSeeUnusedBit15() const { return (m_CanSee & k_TerrainImprovement_CanSee_UnusedBit15_Bit) != 0; }
    // End CanSee flag group
    //
    sint32           GetCantBuildOnIndex(sint32 index) const;
    const TerrainRecord *GetCantBuildOn(sint32 index) const;
    sint32           GetNumCantBuildOn() const { return m_numCantBuildOn;}
    bool             GetEffect() const { return (m_flags0 & k_TerrainImprovement_Effect_Bit) != 0; }
    bool             GetEffect(const Effect *&ptr) const {
                         if((m_flags0 & k_TerrainImprovement_Effect_Bit) == 0) return false;
                         ptr = &m_EffectValue;
                         return true;
                     }
    const Effect        *GetEffectPtr() const {
                         if((m_flags0 & k_TerrainImprovement_Effect_Bit) == 0) return NULL;
                         return &m_EffectValue;
                     }
    const Effect *GetTerrainEffect(sint32 index) const;
    sint32           GetNumTerrainEffect() const { return m_numTerrainEffect;}
    sint32           GetIconIndex() const { return m_Icon; }
    const IconRecord *GetIcon() const;
    sint32           GetTooltip() const { return m_Tooltip; }
    sint32           GetStatusbar() const { return m_Statusbar; }
    sint32           GetLevel() const { return m_Level; }
    sint32           GetConstructionTiles(sint32 index) const;
    sint32           GetNumConstructionTiles() const { return m_numConstructionTiles;}
    bool             GetTerraformTerrain() const { return (m_flags0 & k_TerrainImprovement_TerraformTerrain_Bit) != 0; }
    bool             GetTerraformTerrainIndex(sint32 &index) const {
                         if((m_flags0 & k_TerrainImprovement_TerraformTerrain_Bit) == 0) return false;
                         index = m_TerraformTerrainValue;
                         return true;
                     }
    bool             GetTerraformTerrain(const TerrainRecord *&rec) const;
    const TerrainRecord  *GetTerraformTerrainPtr() const;
    bool             GetColumn() const { return (m_flags0 & k_TerrainImprovement_Column_Bit) != 0; }
    bool             GetColumn(sint32 &value) const {
                         if((m_flags0 & k_TerrainImprovement_Column_Bit) == 0) return false;
                         value = m_ColumnValue;
                         return true;
                     }
    bool             GetIntBorderRadius() const { return (m_flags0 & k_TerrainImprovement_IntBorderRadius_Bit) != 0; }
    bool             GetIntBorderRadius(sint32 &value) const {
                         if((m_flags0 & k_TerrainImprovement_IntBorderRadius_Bit) == 0) return false;
                         value = m_IntBorderRadiusValue;
                         return true;
                     }
    bool             GetSquaredBorderRadius() const { return (m_flags0 & k_TerrainImprovement_SquaredBorderRadius_Bit) != 0; }
    bool             GetSquaredBorderRadius(sint32 &value) const {
                         if((m_flags0 & k_TerrainImprovement_SquaredBorderRadius_Bit) == 0) return false;
                         value = m_SquaredBorderRadiusValue;
                         return true;
                     }
    bool             GetGLHidden() const { return (m_flags0 & k_TerrainImprovement_GLHidden_Bit) != 0; }
}; /* TerrainImprovementRecord */

struct TerrainImprovementRecordAccessorInfo {
    TerrainImprovementRecord::IntAccessor m_intAccessor;
    TerrainImprovementRecord::BoolAccessor m_boolAccessor;
    TerrainImprovementRecord::FloatAccessor m_floatAccessor;
    TerrainImprovementRecord::BitIntAccessor m_bitIntAccessor;
    TerrainImprovementRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern TerrainImprovementRecordAccessorInfo g_TerrainImprovementRecord_Accessors[];
extern char *g_TerrainImprovement_Tokens[];
#define k_Num_TerrainImprovementRecord_Tokens 21

template <class T> class CTPDatabase;
extern CTPDatabase<TerrainImprovementRecord> *g_theTerrainImprovementDB;

#endif /* ifndef __TerrainImprovement_RECORD_H__ */
