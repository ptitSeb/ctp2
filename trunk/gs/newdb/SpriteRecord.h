
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Sprite_RECORD_H__
#define __Sprite_RECORD_H__

/*
 * Sprite description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

class SpriteRecord : public CTPRecord
{
public:
    typedef sint32 (SpriteRecord::*IntAccessor)() const;
    typedef bool (SpriteRecord::*BoolAccessor)() const;
    typedef double (SpriteRecord::*FloatAccessor)() const ;
    typedef bool (SpriteRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (SpriteRecord::*BitFloatAccessor)(double &val) const;
private:
    sint32            m_Value;
    char            * m_NameText;

public:
    SpriteRecord() { Init(); };
    ~SpriteRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    SpriteRecord(const SpriteRecord &rval) { Init(); *this = rval; }
    void operator=(const SpriteRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const SpriteRecord & rval);
    //
    // Accessors
    //
    sint32           GetValue() const { return m_Value; }
    const char      *GetNameText() const { return m_NameText; }
}; /* SpriteRecord */

struct SpriteRecordAccessorInfo {
    SpriteRecord::IntAccessor m_intAccessor;
    SpriteRecord::BoolAccessor m_boolAccessor;
    SpriteRecord::FloatAccessor m_floatAccessor;
    SpriteRecord::BitIntAccessor m_bitIntAccessor;
    SpriteRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern SpriteRecordAccessorInfo g_SpriteRecord_Accessors[];
extern char *g_Sprite_Tokens[];
#define k_Num_SpriteRecord_Tokens 2

template <class T> class CTPDatabase;
extern CTPDatabase<SpriteRecord> *g_theSpriteDB;

#endif /* ifndef __Sprite_RECORD_H__ */
