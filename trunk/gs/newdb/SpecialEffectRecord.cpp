
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "c3errors.h"
#include "SpecialEffectRecord.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "CTPDatabase.h"
#include "StrDB.h"
#include "BitArray.h"


CTPDatabase<SpecialEffectRecord> *g_theSpecialEffectDB = NULL;

SpecialEffectRecord::Init()
{
    m_Value = 0;
    m_NameText = NULL;
}

SpecialEffectRecord::~SpecialEffectRecord()
{
	int index = 0;
	// free string attribute NameText
	if (m_NameText) 
		delete m_NameText; 
	m_NameText = NULL; 

}

void SpecialEffectRecord::operator=(const SpecialEffectRecord & rval)
{
	int index = 0;
	m_index = rval.m_index;
	m_Value = rval.m_Value; 

	if (m_NameText) 
	{ 
	delete m_NameText; 

	}

	if (rval.m_NameText) 
	{ 
		m_NameText = new char [strlen(rval.m_NameText)+1]; 
		strcpy(m_NameText, rval.m_NameText);
	}

}

char *g_SpecialEffect_Tokens[] =
{
    "Value",
    "NameText",
};

SpecialEffectRecordAccessorInfo g_SpecialEffectRecord_Accessors[] = 
{
    { NULL, NULL, NULL, NULL, NULL}, /* Value (array) */
    { NULL, NULL, NULL, NULL, NULL}, /* NameText */
};

#define k_Token_SpecialEffect_Value              ((k_Token_Custom_Base) + 0)
#define k_Token_SpecialEffect_NameText           ((k_Token_Custom_Base) + 1)
#define k_Token_SpecialEffect_Max                ((k_Token_Custom_Base) + 2)


static BitArray s_ParsedTokens(2);
void SpecialEffectRecord::CheckRequiredFields(DBLexer *lex)
{
    // Ick.
    if(!s_ParsedTokens.Bit(k_Token_SpecialEffect_Value - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field Value missing"));
    }
}
    
sint32 SpecialEffectRecord::Parse(DBLexer *lex)
{
    sint32 tok;
    tok = lex->GetToken();
    if(tok != k_Token_Name) {
        DBERROR(("Record must start with name"));
        return 0;
    }
    m_NameText = new char[strlen(lex->GetTokenText()) + 1];
    strcpy(m_NameText, lex->GetTokenText());
    if(!lex->GetIntAssignment(m_Value)) {
        DBERROR(("Expected integer"));
        return 0;
    }
    return 1;
}
void SpecialEffectRecord::ResolveDBReferences()
{
}
/*
 * Member class Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
/*
 * Data Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
void SpecialEffectRecord::Merge(const SpecialEffectRecord & rval){
	int index = 0, obj_index = 0;
} 

/*
 * Data accessors
 * (DO NOT EDIT!  Automatically generated file)
 */
