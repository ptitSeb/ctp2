
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "c3errors.h"
#include "WonderRecord.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "CTPDatabase.h"
#include "StrDB.h"
#include "BitArray.h"

#include "IconRecord.h"
#include "WonderMovieRecord.h"
#include "AdvanceRecord.h"
#include "AdvanceRecord.h"
#include "BuildingRecord.h"

CTPDatabase<WonderRecord> *g_theWonderDB = NULL;

WonderRecord::Init()
{
    m_flags0 = 0;
    m_flags1 = 0;
    m_ProductionCost = 0;
    m_DefaultIcon = 0x7fffffff;
    m_Movie = 0x7fffffff;
    m_Description = 0;
    m_EnableAdvance = 0x7fffffff;
    memset(m_ObsoleteAdvance, 0, sizeof(m_ObsoleteAdvance));
    m_numObsoleteAdvance = 0;
    m_ReduceReadinessCostValue = 0;
    m_DecCrimePercentValue = 0;
    m_IncKnowledgePercentValue = 0;
    m_DecEmpireSizeValue = 0;
    m_IncHappinessEmpireValue = 0;
    m_IncConvertedCitiesFeePercentValue = 0;
    m_GoldPerWaterTradeRouteValue = 0;
    m_GoldPerTelevisionValue = 0;
    m_GoldPerInternationalTradeRouteValue = 0;
    m_PollutersToParksValue = 0;
    m_ReduceWorldPollutionValue = 0;
    m_IncreaseBoatMovementValue = 0;
    m_DecreaseMaintenanceValue = 0;
    m_RandomAdvanceChanceValue = 0;
    m_IncreaseHpValue = 0;
    m_MultiplyTradeRoutesValue = 0;
    m_IncreaseScientistsValue = 0;
    m_OtherCivRandomAdvanceChanceValue = 0;
    m_IncreaseProductionValue = 0;
    m_BonusGoldValue = 0;
    m_IncreaseFoodAllCitiesValue = 0;
    m_TemporaryFullHappinessValue = 0;
    m_IncreaseSpecialistsValue = 0;
    m_IncreaseCathedralsValue = 0;
    m_IncreaseBrokeragesValue = 0;
    m_IncreaseRegardValue = 0;
    m_BuildingEverywhereValue = 0;
    m_PollutionPercentValue = 0.0;
    m_PollutionAmountValue = 0.0;
}

WonderRecord::~WonderRecord()
{
	int index = 0;
}

void WonderRecord::operator=(const WonderRecord & rval)
{
	int index = 0;
	m_index = rval.m_index;
	m_ProductionCost = rval.m_ProductionCost; 

	m_DefaultIcon = rval.m_DefaultIcon; 

	m_Movie = rval.m_Movie; 

	m_Description = rval.m_Description; 

	m_EnableAdvance = rval.m_EnableAdvance; 

	// copy fixed sized array ObsoleteAdvance[] 
 		memcpy(m_ObsoleteAdvance, rval.m_ObsoleteAdvance, sizeof(sint32)*rval.m_numObsoleteAdvance); 

	m_flags0 = rval.m_flags0; 
		m_ReduceReadinessCostValue = rval.m_ReduceReadinessCostValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_DecCrimePercentValue = rval.m_DecCrimePercentValue; 

	m_flags0 = rval.m_flags0; 
		m_IncKnowledgePercentValue = rval.m_IncKnowledgePercentValue; 

	m_flags0 = rval.m_flags0; 
		m_DecEmpireSizeValue = rval.m_DecEmpireSizeValue; 

	m_flags0 = rval.m_flags0; 
		m_IncHappinessEmpireValue = rval.m_IncHappinessEmpireValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_IncConvertedCitiesFeePercentValue = rval.m_IncConvertedCitiesFeePercentValue; 

	m_flags0 = rval.m_flags0; 
		m_GoldPerWaterTradeRouteValue = rval.m_GoldPerWaterTradeRouteValue; 

	m_flags0 = rval.m_flags0; 
		m_GoldPerTelevisionValue = rval.m_GoldPerTelevisionValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_GoldPerInternationalTradeRouteValue = rval.m_GoldPerInternationalTradeRouteValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_PollutersToParksValue = rval.m_PollutersToParksValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_ReduceWorldPollutionValue = rval.m_ReduceWorldPollutionValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_IncreaseBoatMovementValue = rval.m_IncreaseBoatMovementValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_DecreaseMaintenanceValue = rval.m_DecreaseMaintenanceValue; 

	m_flags0 = rval.m_flags0; 
		m_RandomAdvanceChanceValue = rval.m_RandomAdvanceChanceValue; 

	m_flags0 = rval.m_flags0; 
		m_IncreaseHpValue = rval.m_IncreaseHpValue; 

	m_flags0 = rval.m_flags0; 
		m_MultiplyTradeRoutesValue = rval.m_MultiplyTradeRoutesValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_IncreaseScientistsValue = rval.m_IncreaseScientistsValue; 

	m_flags0 = rval.m_flags0; 
		m_OtherCivRandomAdvanceChanceValue = rval.m_OtherCivRandomAdvanceChanceValue; 

	m_flags0 = rval.m_flags0; 
		m_IncreaseProductionValue = rval.m_IncreaseProductionValue; 

	m_flags1 = rval.m_flags1; 
		m_BonusGoldValue = rval.m_BonusGoldValue; 

	m_flags1 = rval.m_flags1; 
		m_IncreaseFoodAllCitiesValue = rval.m_IncreaseFoodAllCitiesValue; 

	m_flags1 = rval.m_flags1; 
		m_TemporaryFullHappinessValue = rval.m_TemporaryFullHappinessValue; 

	m_flags1 = rval.m_flags1; 
	m_flags1 = rval.m_flags1; 
	m_flags1 = rval.m_flags1; 
	m_flags1 = rval.m_flags1; 
		m_IncreaseSpecialistsValue = rval.m_IncreaseSpecialistsValue; 

	m_flags1 = rval.m_flags1; 
		m_IncreaseCathedralsValue = rval.m_IncreaseCathedralsValue; 

	m_flags1 = rval.m_flags1; 
		m_IncreaseBrokeragesValue = rval.m_IncreaseBrokeragesValue; 

	m_flags1 = rval.m_flags1; 
		m_IncreaseRegardValue = rval.m_IncreaseRegardValue; 

	m_flags1 = rval.m_flags1; 
	m_flags1 = rval.m_flags1; 
	m_flags1 = rval.m_flags1; 
	m_flags1 = rval.m_flags1; 
	m_flags1 = rval.m_flags1; 
		m_BuildingEverywhereValue = rval.m_BuildingEverywhereValue; 

	m_flags1 = rval.m_flags1; 
		m_PollutionPercentValue = rval.m_PollutionPercentValue; 

	m_flags1 = rval.m_flags1; 
		m_PollutionAmountValue = rval.m_PollutionAmountValue; 

}

char *g_Wonder_Tokens[] =
{
    "ProductionCost",
    "DefaultIcon",
    "Movie",
    "Description",
    "EnableAdvance",
    "ObsoleteAdvance",
    "ReduceReadinessCost",
    "ReduceReadinessCostValue",
    "EmbassiesEverywhere",
    "DecCrimePercent",
    "DecCrimePercentValue",
    "IncKnowledgePercent",
    "IncKnowledgePercentValue",
    "DecEmpireSize",
    "DecEmpireSizeValue",
    "IncHappinessEmpire",
    "IncHappinessEmpireValue",
    "CloseEmbassies",
    "ReformCities",
    "FreeSlaves",
    "IncConvertedCitiesFeePercent",
    "IncConvertedCitiesFeePercentValue",
    "GoldPerWaterTradeRoute",
    "GoldPerWaterTradeRouteValue",
    "GoldPerTelevision",
    "GoldPerTelevisionValue",
    "GlobalRadar",
    "SpiesEverywhere",
    "GoldPerInternationalTradeRoute",
    "GoldPerInternationalTradeRouteValue",
    "ProtectFromBiologicalWarfare",
    "PollutersToParks",
    "PollutersToParksValue",
    "EnableParkRangers",
    "ReduceWorldPollution",
    "ReduceWorldPollutionValue",
    "AllCitizensContent",
    "EliminateNukes",
    "AllBoatsDeepWater",
    "IncreaseBoatMovement",
    "IncreaseBoatMovementValue",
    "FreeTradeRoutes",
    "DecreaseMaintenance",
    "DecreaseMaintenanceValue",
    "RandomAdvanceChance",
    "RandomAdvanceChanceValue",
    "IncreaseHp",
    "IncreaseHpValue",
    "MultiplyTradeRoutes",
    "MultiplyTradeRoutesValue",
    "ForcefieldEverywhere",
    "IncreaseScientists",
    "IncreaseScientistsValue",
    "OtherCivRandomAdvanceChance",
    "OtherCivRandomAdvanceChanceValue",
    "IncreaseProduction",
    "IncreaseProductionValue",
    "BonusGold",
    "BonusGoldValue",
    "IncreaseFoodAllCities",
    "IncreaseFoodAllCitiesValue",
    "TemporaryFullHappiness",
    "TemporaryFullHappinessValue",
    "RevoltingCitiesJoinPlayer",
    "NoPollutionUnhappiness",
    "EmbassiesEverywhereEvenAtWar",
    "IncreaseSpecialists",
    "IncreaseSpecialistsValue",
    "IncreaseCathedrals",
    "IncreaseCathedralsValue",
    "IncreaseBrokerages",
    "IncreaseBrokeragesValue",
    "IncreaseRegard",
    "IncreaseRegardValue",
    "PreventConversion",
    "ProtectFromBarbarians",
    "StartGaiaController",
    "GLHidden",
    "BuildingEverywhere",
    "BuildingEverywhereValue",
    "PollutionPercent",
    "PollutionPercentValue",
    "PollutionAmount",
    "PollutionAmountValue",
};

WonderRecordAccessorInfo g_WonderRecord_Accessors[] = 
{
    { WonderRecord::GetProductionCost, NULL, NULL, NULL, NULL },
    {WonderRecord::GetDefaultIconIndex, NULL, NULL, NULL, NULL },
    {WonderRecord::GetMovieIndex, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* Description */
    {WonderRecord::GetEnableAdvanceIndex, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* ObsoleteAdvance (array) */
    { NULL, NULL, NULL, WonderRecord::GetReduceReadinessCost, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* ReduceReadinessCost */
    { NULL, WonderRecord::GetEmbassiesEverywhere, NULL, NULL, NULL },
    { NULL, NULL, NULL, WonderRecord::GetDecCrimePercent, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* DecCrimePercent */
    { NULL, NULL, NULL, WonderRecord::GetIncKnowledgePercent, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncKnowledgePercent */
    { NULL, NULL, NULL, WonderRecord::GetDecEmpireSize, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* DecEmpireSize */
    { NULL, NULL, NULL, WonderRecord::GetIncHappinessEmpire, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncHappinessEmpire */
    { NULL, WonderRecord::GetCloseEmbassies, NULL, NULL, NULL },
    { NULL, WonderRecord::GetReformCities, NULL, NULL, NULL },
    { NULL, WonderRecord::GetFreeSlaves, NULL, NULL, NULL },
    { NULL, NULL, NULL, WonderRecord::GetIncConvertedCitiesFeePercent, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncConvertedCitiesFeePercent */
    { NULL, NULL, NULL, WonderRecord::GetGoldPerWaterTradeRoute, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* GoldPerWaterTradeRoute */
    { NULL, NULL, NULL, WonderRecord::GetGoldPerTelevision, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* GoldPerTelevision */
    { NULL, WonderRecord::GetGlobalRadar, NULL, NULL, NULL },
    { NULL, WonderRecord::GetSpiesEverywhere, NULL, NULL, NULL },
    { NULL, NULL, NULL, WonderRecord::GetGoldPerInternationalTradeRoute, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* GoldPerInternationalTradeRoute */
    { NULL, WonderRecord::GetProtectFromBiologicalWarfare, NULL, NULL, NULL },
    { NULL, NULL, NULL, WonderRecord::GetPollutersToParks, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* PollutersToParks */
    { NULL, WonderRecord::GetEnableParkRangers, NULL, NULL, NULL },
    { NULL, NULL, NULL, WonderRecord::GetReduceWorldPollution, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* ReduceWorldPollution */
    { NULL, WonderRecord::GetAllCitizensContent, NULL, NULL, NULL },
    { NULL, WonderRecord::GetEliminateNukes, NULL, NULL, NULL },
    { NULL, WonderRecord::GetAllBoatsDeepWater, NULL, NULL, NULL },
    { NULL, NULL, NULL, WonderRecord::GetIncreaseBoatMovement, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseBoatMovement */
    { NULL, WonderRecord::GetFreeTradeRoutes, NULL, NULL, NULL },
    { NULL, NULL, NULL, WonderRecord::GetDecreaseMaintenance, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* DecreaseMaintenance */
    { NULL, NULL, NULL, WonderRecord::GetRandomAdvanceChance, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* RandomAdvanceChance */
    { NULL, NULL, NULL, WonderRecord::GetIncreaseHp, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseHp */
    { NULL, NULL, NULL, WonderRecord::GetMultiplyTradeRoutes, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* MultiplyTradeRoutes */
    { NULL, WonderRecord::GetForcefieldEverywhere, NULL, NULL, NULL },
    { NULL, NULL, NULL, WonderRecord::GetIncreaseScientists, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseScientists */
    { NULL, NULL, NULL, WonderRecord::GetOtherCivRandomAdvanceChance, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* OtherCivRandomAdvanceChance */
    { NULL, NULL, NULL, WonderRecord::GetIncreaseProduction, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseProduction */
    { NULL, NULL, NULL, WonderRecord::GetBonusGold, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* BonusGold */
    { NULL, NULL, NULL, WonderRecord::GetIncreaseFoodAllCities, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseFoodAllCities */
    { NULL, NULL, NULL, WonderRecord::GetTemporaryFullHappiness, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* TemporaryFullHappiness */
    { NULL, WonderRecord::GetRevoltingCitiesJoinPlayer, NULL, NULL, NULL },
    { NULL, WonderRecord::GetNoPollutionUnhappiness, NULL, NULL, NULL },
    { NULL, WonderRecord::GetEmbassiesEverywhereEvenAtWar, NULL, NULL, NULL },
    { NULL, NULL, NULL, WonderRecord::GetIncreaseSpecialists, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseSpecialists */
    { NULL, NULL, NULL, WonderRecord::GetIncreaseCathedrals, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseCathedrals */
    { NULL, NULL, NULL, WonderRecord::GetIncreaseBrokerages, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseBrokerages */
    { NULL, NULL, NULL, WonderRecord::GetIncreaseRegard, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseRegard */
    { NULL, WonderRecord::GetPreventConversion, NULL, NULL, NULL },
    { NULL, WonderRecord::GetProtectFromBarbarians, NULL, NULL, NULL },
    { NULL, WonderRecord::GetStartGaiaController, NULL, NULL, NULL },
    { NULL, WonderRecord::GetGLHidden, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* BuildingEverywhere */
    { NULL, NULL, NULL, NULL, NULL}, /* BuildingEverywhere */
    { NULL, NULL, NULL, NULL, WonderRecord::GetPollutionPercent},
    { NULL, NULL, NULL, NULL, NULL}, /* PollutionPercent */
    { NULL, NULL, NULL, NULL, WonderRecord::GetPollutionAmount},
    { NULL, NULL, NULL, NULL, NULL}, /* PollutionAmount */
};

#define k_Token_Wonder_ProductionCost            ((k_Token_Custom_Base) + 0)
#define k_Token_Wonder_DefaultIcon               ((k_Token_Custom_Base) + 1)
#define k_Token_Wonder_Movie                     ((k_Token_Custom_Base) + 2)
#define k_Token_Wonder_Description               ((k_Token_Custom_Base) + 3)
#define k_Token_Wonder_EnableAdvance             ((k_Token_Custom_Base) + 4)
#define k_Token_Wonder_ObsoleteAdvance           ((k_Token_Custom_Base) + 5)
#define k_Token_Wonder_ReduceReadinessCost       ((k_Token_Custom_Base) + 6)
#define k_Token_Wonder_ReduceReadinessCost_Value ((k_Token_Custom_Base) + 7)
#define k_Token_Wonder_EmbassiesEverywhere       ((k_Token_Custom_Base) + 8)
#define k_Token_Wonder_DecCrimePercent           ((k_Token_Custom_Base) + 9)
#define k_Token_Wonder_DecCrimePercent_Value     ((k_Token_Custom_Base) + 10)
#define k_Token_Wonder_IncKnowledgePercent       ((k_Token_Custom_Base) + 11)
#define k_Token_Wonder_IncKnowledgePercent_Value ((k_Token_Custom_Base) + 12)
#define k_Token_Wonder_DecEmpireSize             ((k_Token_Custom_Base) + 13)
#define k_Token_Wonder_DecEmpireSize_Value       ((k_Token_Custom_Base) + 14)
#define k_Token_Wonder_IncHappinessEmpire        ((k_Token_Custom_Base) + 15)
#define k_Token_Wonder_IncHappinessEmpire_Value  ((k_Token_Custom_Base) + 16)
#define k_Token_Wonder_CloseEmbassies            ((k_Token_Custom_Base) + 17)
#define k_Token_Wonder_ReformCities              ((k_Token_Custom_Base) + 18)
#define k_Token_Wonder_FreeSlaves                ((k_Token_Custom_Base) + 19)
#define k_Token_Wonder_IncConvertedCitiesFeePercent ((k_Token_Custom_Base) + 20)
#define k_Token_Wonder_IncConvertedCitiesFeePercent_Value ((k_Token_Custom_Base) + 21)
#define k_Token_Wonder_GoldPerWaterTradeRoute    ((k_Token_Custom_Base) + 22)
#define k_Token_Wonder_GoldPerWaterTradeRoute_Value ((k_Token_Custom_Base) + 23)
#define k_Token_Wonder_GoldPerTelevision         ((k_Token_Custom_Base) + 24)
#define k_Token_Wonder_GoldPerTelevision_Value   ((k_Token_Custom_Base) + 25)
#define k_Token_Wonder_GlobalRadar               ((k_Token_Custom_Base) + 26)
#define k_Token_Wonder_SpiesEverywhere           ((k_Token_Custom_Base) + 27)
#define k_Token_Wonder_GoldPerInternationalTradeRoute ((k_Token_Custom_Base) + 28)
#define k_Token_Wonder_GoldPerInternationalTradeRoute_Value ((k_Token_Custom_Base) + 29)
#define k_Token_Wonder_ProtectFromBiologicalWarfare ((k_Token_Custom_Base) + 30)
#define k_Token_Wonder_PollutersToParks          ((k_Token_Custom_Base) + 31)
#define k_Token_Wonder_PollutersToParks_Value    ((k_Token_Custom_Base) + 32)
#define k_Token_Wonder_EnableParkRangers         ((k_Token_Custom_Base) + 33)
#define k_Token_Wonder_ReduceWorldPollution      ((k_Token_Custom_Base) + 34)
#define k_Token_Wonder_ReduceWorldPollution_Value ((k_Token_Custom_Base) + 35)
#define k_Token_Wonder_AllCitizensContent        ((k_Token_Custom_Base) + 36)
#define k_Token_Wonder_EliminateNukes            ((k_Token_Custom_Base) + 37)
#define k_Token_Wonder_AllBoatsDeepWater         ((k_Token_Custom_Base) + 38)
#define k_Token_Wonder_IncreaseBoatMovement      ((k_Token_Custom_Base) + 39)
#define k_Token_Wonder_IncreaseBoatMovement_Value ((k_Token_Custom_Base) + 40)
#define k_Token_Wonder_FreeTradeRoutes           ((k_Token_Custom_Base) + 41)
#define k_Token_Wonder_DecreaseMaintenance       ((k_Token_Custom_Base) + 42)
#define k_Token_Wonder_DecreaseMaintenance_Value ((k_Token_Custom_Base) + 43)
#define k_Token_Wonder_RandomAdvanceChance       ((k_Token_Custom_Base) + 44)
#define k_Token_Wonder_RandomAdvanceChance_Value ((k_Token_Custom_Base) + 45)
#define k_Token_Wonder_IncreaseHp                ((k_Token_Custom_Base) + 46)
#define k_Token_Wonder_IncreaseHp_Value          ((k_Token_Custom_Base) + 47)
#define k_Token_Wonder_MultiplyTradeRoutes       ((k_Token_Custom_Base) + 48)
#define k_Token_Wonder_MultiplyTradeRoutes_Value ((k_Token_Custom_Base) + 49)
#define k_Token_Wonder_ForcefieldEverywhere      ((k_Token_Custom_Base) + 50)
#define k_Token_Wonder_IncreaseScientists        ((k_Token_Custom_Base) + 51)
#define k_Token_Wonder_IncreaseScientists_Value  ((k_Token_Custom_Base) + 52)
#define k_Token_Wonder_OtherCivRandomAdvanceChance ((k_Token_Custom_Base) + 53)
#define k_Token_Wonder_OtherCivRandomAdvanceChance_Value ((k_Token_Custom_Base) + 54)
#define k_Token_Wonder_IncreaseProduction        ((k_Token_Custom_Base) + 55)
#define k_Token_Wonder_IncreaseProduction_Value  ((k_Token_Custom_Base) + 56)
#define k_Token_Wonder_BonusGold                 ((k_Token_Custom_Base) + 57)
#define k_Token_Wonder_BonusGold_Value           ((k_Token_Custom_Base) + 58)
#define k_Token_Wonder_IncreaseFoodAllCities     ((k_Token_Custom_Base) + 59)
#define k_Token_Wonder_IncreaseFoodAllCities_Value ((k_Token_Custom_Base) + 60)
#define k_Token_Wonder_TemporaryFullHappiness    ((k_Token_Custom_Base) + 61)
#define k_Token_Wonder_TemporaryFullHappiness_Value ((k_Token_Custom_Base) + 62)
#define k_Token_Wonder_RevoltingCitiesJoinPlayer ((k_Token_Custom_Base) + 63)
#define k_Token_Wonder_NoPollutionUnhappiness    ((k_Token_Custom_Base) + 64)
#define k_Token_Wonder_EmbassiesEverywhereEvenAtWar ((k_Token_Custom_Base) + 65)
#define k_Token_Wonder_IncreaseSpecialists       ((k_Token_Custom_Base) + 66)
#define k_Token_Wonder_IncreaseSpecialists_Value ((k_Token_Custom_Base) + 67)
#define k_Token_Wonder_IncreaseCathedrals        ((k_Token_Custom_Base) + 68)
#define k_Token_Wonder_IncreaseCathedrals_Value  ((k_Token_Custom_Base) + 69)
#define k_Token_Wonder_IncreaseBrokerages        ((k_Token_Custom_Base) + 70)
#define k_Token_Wonder_IncreaseBrokerages_Value  ((k_Token_Custom_Base) + 71)
#define k_Token_Wonder_IncreaseRegard            ((k_Token_Custom_Base) + 72)
#define k_Token_Wonder_IncreaseRegard_Value      ((k_Token_Custom_Base) + 73)
#define k_Token_Wonder_PreventConversion         ((k_Token_Custom_Base) + 74)
#define k_Token_Wonder_ProtectFromBarbarians     ((k_Token_Custom_Base) + 75)
#define k_Token_Wonder_StartGaiaController       ((k_Token_Custom_Base) + 76)
#define k_Token_Wonder_GLHidden                  ((k_Token_Custom_Base) + 77)
#define k_Token_Wonder_BuildingEverywhere        ((k_Token_Custom_Base) + 78)
#define k_Token_Wonder_BuildingEverywhere_Value  ((k_Token_Custom_Base) + 79)
#define k_Token_Wonder_PollutionPercent          ((k_Token_Custom_Base) + 80)
#define k_Token_Wonder_PollutionPercent_Value    ((k_Token_Custom_Base) + 81)
#define k_Token_Wonder_PollutionAmount           ((k_Token_Custom_Base) + 82)
#define k_Token_Wonder_PollutionAmount_Value     ((k_Token_Custom_Base) + 83)
#define k_Token_Wonder_Max                       ((k_Token_Custom_Base) + 84)


static BitArray s_ParsedTokens(84);
void WonderRecord::CheckRequiredFields(DBLexer *lex)
{
    // Ick.
    if(!s_ParsedTokens.Bit(k_Token_Wonder_ProductionCost - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ProductionCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Wonder_Description - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field Description missing"));
    }
}
    
sint32 WonderRecord::Parse(DBLexer *lex)
{
    bool done = false;
    sint32 result = 0;
    sint32 tok;
    DBPARSE_ERROR err = DBPARSE_OK;
    s_ParsedTokens.Clear();
    lex->SetTokens(g_Wonder_Tokens, k_Token_Wonder_Max);
    tok = lex->GetToken();
    if(tok != k_Token_Name) {
        DBERROR(("Record does not start with name"));
        return 0;
    }
    if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name)) {
        g_theStringDB->InsertStr(lex->GetTokenText(), lex->GetTokenText());
        if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name))
            SetTextName(lex->GetTokenText());
    }

    tok = lex->GetToken();
    if(tok != k_Token_OpenBrace) {
        DBERROR(("Missing open brace"));
        return 0;
    }

    while(!done) {
        tok = lex->GetToken();
        if(tok >= k_Token_Custom_Base && tok < k_Token_Wonder_Max) { 
            s_ParsedTokens.SetBit(tok - k_Token_Custom_Base);
        }
        switch(tok) {
            case k_Token_Wonder_ProductionCost:
                if(!lex->GetIntAssignment(m_ProductionCost)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_DefaultIcon:
                if(!g_theIconDB->GetRecordFromLexer(lex, m_DefaultIcon, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Wonder_Movie:
                if(!g_theWonderMovieDB->GetRecordFromLexer(lex, m_Movie, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Wonder_Description:
                if(!lex->GetStringIdAssignment(m_Description)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_EnableAdvance:
                if(!g_theAdvanceDB->GetRecordFromLexer(lex, m_EnableAdvance, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Wonder_ObsoleteAdvance:
                if(!g_theAdvanceDB->ParseRecordInArray(lex, (sint32 *)m_ObsoleteAdvance, &m_numObsoleteAdvance, k_MAX_ObsoleteAdvance, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Wonder_ReduceReadinessCost:
                m_flags0 |= k_Wonder_ReduceReadinessCost_Bit;
                if(!lex->GetIntAssignment(m_ReduceReadinessCostValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_EmbassiesEverywhere:
                m_flags0 |= k_Wonder_EmbassiesEverywhere_Bit;
                break;
            case k_Token_Wonder_DecCrimePercent:
                m_flags0 |= k_Wonder_DecCrimePercent_Bit;
                if(!lex->GetIntAssignment(m_DecCrimePercentValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_IncKnowledgePercent:
                m_flags0 |= k_Wonder_IncKnowledgePercent_Bit;
                if(!lex->GetIntAssignment(m_IncKnowledgePercentValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_DecEmpireSize:
                m_flags0 |= k_Wonder_DecEmpireSize_Bit;
                if(!lex->GetIntAssignment(m_DecEmpireSizeValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_IncHappinessEmpire:
                m_flags0 |= k_Wonder_IncHappinessEmpire_Bit;
                if(!lex->GetIntAssignment(m_IncHappinessEmpireValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_CloseEmbassies:
                m_flags0 |= k_Wonder_CloseEmbassies_Bit;
                break;
            case k_Token_Wonder_ReformCities:
                m_flags0 |= k_Wonder_ReformCities_Bit;
                break;
            case k_Token_Wonder_FreeSlaves:
                m_flags0 |= k_Wonder_FreeSlaves_Bit;
                break;
            case k_Token_Wonder_IncConvertedCitiesFeePercent:
                m_flags0 |= k_Wonder_IncConvertedCitiesFeePercent_Bit;
                if(!lex->GetIntAssignment(m_IncConvertedCitiesFeePercentValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_GoldPerWaterTradeRoute:
                m_flags0 |= k_Wonder_GoldPerWaterTradeRoute_Bit;
                if(!lex->GetIntAssignment(m_GoldPerWaterTradeRouteValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_GoldPerTelevision:
                m_flags0 |= k_Wonder_GoldPerTelevision_Bit;
                if(!lex->GetIntAssignment(m_GoldPerTelevisionValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_GlobalRadar:
                m_flags0 |= k_Wonder_GlobalRadar_Bit;
                break;
            case k_Token_Wonder_SpiesEverywhere:
                m_flags0 |= k_Wonder_SpiesEverywhere_Bit;
                break;
            case k_Token_Wonder_GoldPerInternationalTradeRoute:
                m_flags0 |= k_Wonder_GoldPerInternationalTradeRoute_Bit;
                if(!lex->GetIntAssignment(m_GoldPerInternationalTradeRouteValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_ProtectFromBiologicalWarfare:
                m_flags0 |= k_Wonder_ProtectFromBiologicalWarfare_Bit;
                break;
            case k_Token_Wonder_PollutersToParks:
                m_flags0 |= k_Wonder_PollutersToParks_Bit;
                if(!lex->GetIntAssignment(m_PollutersToParksValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_EnableParkRangers:
                m_flags0 |= k_Wonder_EnableParkRangers_Bit;
                break;
            case k_Token_Wonder_ReduceWorldPollution:
                m_flags0 |= k_Wonder_ReduceWorldPollution_Bit;
                if(!lex->GetIntAssignment(m_ReduceWorldPollutionValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_AllCitizensContent:
                m_flags0 |= k_Wonder_AllCitizensContent_Bit;
                break;
            case k_Token_Wonder_EliminateNukes:
                m_flags0 |= k_Wonder_EliminateNukes_Bit;
                break;
            case k_Token_Wonder_AllBoatsDeepWater:
                m_flags0 |= k_Wonder_AllBoatsDeepWater_Bit;
                break;
            case k_Token_Wonder_IncreaseBoatMovement:
                m_flags0 |= k_Wonder_IncreaseBoatMovement_Bit;
                if(!lex->GetIntAssignment(m_IncreaseBoatMovementValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_FreeTradeRoutes:
                m_flags0 |= k_Wonder_FreeTradeRoutes_Bit;
                break;
            case k_Token_Wonder_DecreaseMaintenance:
                m_flags0 |= k_Wonder_DecreaseMaintenance_Bit;
                if(!lex->GetIntAssignment(m_DecreaseMaintenanceValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_RandomAdvanceChance:
                m_flags0 |= k_Wonder_RandomAdvanceChance_Bit;
                if(!lex->GetIntAssignment(m_RandomAdvanceChanceValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_IncreaseHp:
                m_flags0 |= k_Wonder_IncreaseHp_Bit;
                if(!lex->GetIntAssignment(m_IncreaseHpValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_MultiplyTradeRoutes:
                m_flags0 |= k_Wonder_MultiplyTradeRoutes_Bit;
                if(!lex->GetIntAssignment(m_MultiplyTradeRoutesValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_ForcefieldEverywhere:
                m_flags0 |= k_Wonder_ForcefieldEverywhere_Bit;
                break;
            case k_Token_Wonder_IncreaseScientists:
                m_flags0 |= k_Wonder_IncreaseScientists_Bit;
                if(!lex->GetIntAssignment(m_IncreaseScientistsValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_OtherCivRandomAdvanceChance:
                m_flags0 |= k_Wonder_OtherCivRandomAdvanceChance_Bit;
                if(!lex->GetIntAssignment(m_OtherCivRandomAdvanceChanceValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_IncreaseProduction:
                m_flags0 |= k_Wonder_IncreaseProduction_Bit;
                if(!lex->GetIntAssignment(m_IncreaseProductionValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_BonusGold:
                m_flags1 |= k_Wonder_BonusGold_Bit;
                if(!lex->GetIntAssignment(m_BonusGoldValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_IncreaseFoodAllCities:
                m_flags1 |= k_Wonder_IncreaseFoodAllCities_Bit;
                if(!lex->GetIntAssignment(m_IncreaseFoodAllCitiesValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_TemporaryFullHappiness:
                m_flags1 |= k_Wonder_TemporaryFullHappiness_Bit;
                if(!lex->GetIntAssignment(m_TemporaryFullHappinessValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_RevoltingCitiesJoinPlayer:
                m_flags1 |= k_Wonder_RevoltingCitiesJoinPlayer_Bit;
                break;
            case k_Token_Wonder_NoPollutionUnhappiness:
                m_flags1 |= k_Wonder_NoPollutionUnhappiness_Bit;
                break;
            case k_Token_Wonder_EmbassiesEverywhereEvenAtWar:
                m_flags1 |= k_Wonder_EmbassiesEverywhereEvenAtWar_Bit;
                break;
            case k_Token_Wonder_IncreaseSpecialists:
                m_flags1 |= k_Wonder_IncreaseSpecialists_Bit;
                if(!lex->GetIntAssignment(m_IncreaseSpecialistsValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_IncreaseCathedrals:
                m_flags1 |= k_Wonder_IncreaseCathedrals_Bit;
                if(!lex->GetIntAssignment(m_IncreaseCathedralsValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_IncreaseBrokerages:
                m_flags1 |= k_Wonder_IncreaseBrokerages_Bit;
                if(!lex->GetIntAssignment(m_IncreaseBrokeragesValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_IncreaseRegard:
                m_flags1 |= k_Wonder_IncreaseRegard_Bit;
                if(!lex->GetIntAssignment(m_IncreaseRegardValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_PreventConversion:
                m_flags1 |= k_Wonder_PreventConversion_Bit;
                break;
            case k_Token_Wonder_ProtectFromBarbarians:
                m_flags1 |= k_Wonder_ProtectFromBarbarians_Bit;
                break;
            case k_Token_Wonder_StartGaiaController:
                m_flags1 |= k_Wonder_StartGaiaController_Bit;
                break;
            case k_Token_Wonder_GLHidden:
                m_flags1 |= k_Wonder_GLHidden_Bit;
                break;
            case k_Token_Wonder_BuildingEverywhere:
                m_flags1 |= k_Wonder_BuildingEverywhere_Bit;
                if(!g_theBuildingDB->GetRecordFromLexer(lex, m_BuildingEverywhereValue, err)) {
                    DBERROR(("Expected record"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_PollutionPercent:
                m_flags1 |= k_Wonder_PollutionPercent_Bit;
                if(!lex->GetFloatAssignment(m_PollutionPercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Wonder_PollutionAmount:
                m_flags1 |= k_Wonder_PollutionAmount_Bit;
                if(!lex->GetFloatAssignment(m_PollutionAmountValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_CloseBrace:
                done = true;
                result = 1;
                break;
            default:
                DBERROR(("Unknown token"));
                done = true;
                break;
        }
    }
    CheckRequiredFields(lex);
    lex->RestoreTokens();
    return result;
}

void WonderRecord::ResolveDBReferences()
{
    if(m_DefaultIcon & 0x80000000) {
        sint32 id = m_DefaultIcon & 0x7fffffff;
        if(!g_theIconDB->GetNamedItem(id, m_DefaultIcon)) {
            c3errors_ErrorDialog("DB", "%s not found in Icon database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_DefaultIcon == 0x7fffffff) {
        m_DefaultIcon = -1;
    }
    if(m_Movie & 0x80000000) {
        sint32 id = m_Movie & 0x7fffffff;
        if(!g_theWonderMovieDB->GetNamedItem(id, m_Movie)) {
            c3errors_ErrorDialog("DB", "%s not found in WonderMovie database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_Movie == 0x7fffffff) {
        m_Movie = -1;
    }
    if(m_EnableAdvance & 0x80000000) {
        sint32 id = m_EnableAdvance & 0x7fffffff;
        if(!g_theAdvanceDB->GetNamedItem(id, m_EnableAdvance)) {
            c3errors_ErrorDialog("DB", "%s not found in Advance database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_EnableAdvance == 0x7fffffff) {
        m_EnableAdvance = -1;
    }
    {
        sint32 i;
        for(i = 0; i < m_numObsoleteAdvance; i++) {
            if(m_ObsoleteAdvance[i] & 0x80000000) {
                sint32 id = m_ObsoleteAdvance[i] & 0x7fffffff;
                if(!g_theAdvanceDB->GetNamedItem(id, m_ObsoleteAdvance[i])) {
                    c3errors_ErrorDialog("DB", "%s not found in Advance database", g_theStringDB->GetNameStr(id));
                }
            } else if(m_ObsoleteAdvance[i] == 0x7fffffff){
                m_ObsoleteAdvance[i] = -1;
            }
        }
    }
    if(m_BuildingEverywhereValue & 0x80000000) {
        sint32 id = m_BuildingEverywhereValue & 0x7fffffff;
        if(!g_theBuildingDB->GetNamedItem(id, m_BuildingEverywhereValue)) {
            c3errors_ErrorDialog("DB", "%s not found in Building database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_BuildingEverywhereValue == 0x7fffffff) {
        m_BuildingEverywhereValue = -1;
    }
}
/*
 * Member class Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
/*
 * Data Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
void WonderRecord::Merge(const WonderRecord & rval){
	int index = 0, obj_index = 0;
	// copy values of rval.m_ObsoleteAdvance to m_ObsoleteAdvance
	for (index = 0; index < m_numObsoleteAdvance; index++) 
	{ 
 		if (index < rval.m_numObsoleteAdvance)
 			m_ObsoleteAdvance[index] = rval.m_ObsoleteAdvance[index];
	} 
 	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_ReduceReadinessCost_Bit) != 0) 
		m_ReduceReadinessCostValue = rval.m_ReduceReadinessCostValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_DecCrimePercent_Bit) != 0) 
		m_DecCrimePercentValue = rval.m_DecCrimePercentValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_IncKnowledgePercent_Bit) != 0) 
		m_IncKnowledgePercentValue = rval.m_IncKnowledgePercentValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_DecEmpireSize_Bit) != 0) 
		m_DecEmpireSizeValue = rval.m_DecEmpireSizeValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_IncHappinessEmpire_Bit) != 0) 
		m_IncHappinessEmpireValue = rval.m_IncHappinessEmpireValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_IncConvertedCitiesFeePercent_Bit) != 0) 
		m_IncConvertedCitiesFeePercentValue = rval.m_IncConvertedCitiesFeePercentValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_GoldPerWaterTradeRoute_Bit) != 0) 
		m_GoldPerWaterTradeRouteValue = rval.m_GoldPerWaterTradeRouteValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_GoldPerTelevision_Bit) != 0) 
		m_GoldPerTelevisionValue = rval.m_GoldPerTelevisionValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_GoldPerInternationalTradeRoute_Bit) != 0) 
		m_GoldPerInternationalTradeRouteValue = rval.m_GoldPerInternationalTradeRouteValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_PollutersToParks_Bit) != 0) 
		m_PollutersToParksValue = rval.m_PollutersToParksValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_ReduceWorldPollution_Bit) != 0) 
		m_ReduceWorldPollutionValue = rval.m_ReduceWorldPollutionValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_IncreaseBoatMovement_Bit) != 0) 
		m_IncreaseBoatMovementValue = rval.m_IncreaseBoatMovementValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_DecreaseMaintenance_Bit) != 0) 
		m_DecreaseMaintenanceValue = rval.m_DecreaseMaintenanceValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_RandomAdvanceChance_Bit) != 0) 
		m_RandomAdvanceChanceValue = rval.m_RandomAdvanceChanceValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_IncreaseHp_Bit) != 0) 
		m_IncreaseHpValue = rval.m_IncreaseHpValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_MultiplyTradeRoutes_Bit) != 0) 
		m_MultiplyTradeRoutesValue = rval.m_MultiplyTradeRoutesValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_IncreaseScientists_Bit) != 0) 
		m_IncreaseScientistsValue = rval.m_IncreaseScientistsValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_OtherCivRandomAdvanceChance_Bit) != 0) 
		m_OtherCivRandomAdvanceChanceValue = rval.m_OtherCivRandomAdvanceChanceValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Wonder_IncreaseProduction_Bit) != 0) 
		m_IncreaseProductionValue = rval.m_IncreaseProductionValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_BonusGold_Bit) != 0) 
		m_BonusGoldValue = rval.m_BonusGoldValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_IncreaseFoodAllCities_Bit) != 0) 
		m_IncreaseFoodAllCitiesValue = rval.m_IncreaseFoodAllCitiesValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_TemporaryFullHappiness_Bit) != 0) 
		m_TemporaryFullHappinessValue = rval.m_TemporaryFullHappinessValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_IncreaseSpecialists_Bit) != 0) 
		m_IncreaseSpecialistsValue = rval.m_IncreaseSpecialistsValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_IncreaseCathedrals_Bit) != 0) 
		m_IncreaseCathedralsValue = rval.m_IncreaseCathedralsValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_IncreaseBrokerages_Bit) != 0) 
		m_IncreaseBrokeragesValue = rval.m_IncreaseBrokeragesValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_IncreaseRegard_Bit) != 0) 
		m_IncreaseRegardValue = rval.m_IncreaseRegardValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_BuildingEverywhere_Bit) != 0) 
		m_BuildingEverywhereValue = rval.m_BuildingEverywhereValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_PollutionPercent_Bit) != 0) 
		m_PollutionPercentValue = rval.m_PollutionPercentValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Wonder_PollutionAmount_Bit) != 0) 
		m_PollutionAmountValue = rval.m_PollutionAmountValue; 

} 

/*
 * Data accessors
 * (DO NOT EDIT!  Automatically generated file)
 */
const IconRecord *WonderRecord::GetDefaultIcon() const
{
    return g_theIconDB->Get(m_DefaultIcon);
}

const WonderMovieRecord *WonderRecord::GetMovie() const
{
    return g_theWonderMovieDB->Get(m_Movie);
}

const AdvanceRecord *WonderRecord::GetEnableAdvance() const
{
    return g_theAdvanceDB->Get(m_EnableAdvance);
}

sint32 WonderRecord::GetObsoleteAdvanceIndex(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numObsoleteAdvance);
    if((index < 0) || (index >= m_numObsoleteAdvance)) {
        return 0;
    }
    return m_ObsoleteAdvance[index];
}

const AdvanceRecord *WonderRecord::GetObsoleteAdvance(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numObsoleteAdvance);
    if((index < 0) || (index >= m_numObsoleteAdvance)) {
        return 0;
    }
    return g_theAdvanceDB->Get(m_ObsoleteAdvance[index]);
}

const BuildingRecord *WonderRecord::GetBuildingEverywherePtr() const
{
    return g_theBuildingDB->Get(m_BuildingEverywhereValue);
}

