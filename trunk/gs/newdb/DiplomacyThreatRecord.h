
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __DiplomacyThreat_RECORD_H__
#define __DiplomacyThreat_RECORD_H__

/*
 * DiplomacyThreat description
 */
#include "CTPRecord.h"
//
// m_Arg1 bit group
#define k_DiplomacyThreat_Arg1_ThirdParty_Bit    0x00000001
#define k_DiplomacyThreat_Arg1_HisCity_Bit       0x00000002
#define k_DiplomacyThreat_Arg1_SpecialAttack_Bit 0x00000004
#define k_DiplomacyThreat_Arg1_AgreementId_Bit   0x00000008
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

class DiplomacyThreatRecord : public CTPRecord
{
public:
    typedef sint32 (DiplomacyThreatRecord::*IntAccessor)() const;
    typedef bool (DiplomacyThreatRecord::*BoolAccessor)() const;
    typedef double (DiplomacyThreatRecord::*FloatAccessor)() const ;
    typedef bool (DiplomacyThreatRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (DiplomacyThreatRecord::*BitFloatAccessor)(double &val) const;
private:
    sint32            m_Title;
    char            * m_Type;
    uint32            m_Arg1;
    sint32            m_Details;

public:
    DiplomacyThreatRecord() { Init(); };
    ~DiplomacyThreatRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    DiplomacyThreatRecord(const DiplomacyThreatRecord &rval) { Init(); *this = rval; }
    void operator=(const DiplomacyThreatRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const DiplomacyThreatRecord & rval);
    sint32 ParseArg1Bit(DBLexer *lex);
    //
    // Accessors
    //
    sint32           GetTitle() const { return m_Title; }
    const char      *GetType() const { return m_Type; }

    //
    // Arg1 flag group
    uint32           GetArg1() const { return m_Arg1; }
    bool             GetArg1ThirdParty() const { return (m_Arg1 & k_DiplomacyThreat_Arg1_ThirdParty_Bit) != 0; }
    bool             GetArg1HisCity() const { return (m_Arg1 & k_DiplomacyThreat_Arg1_HisCity_Bit) != 0; }
    bool             GetArg1SpecialAttack() const { return (m_Arg1 & k_DiplomacyThreat_Arg1_SpecialAttack_Bit) != 0; }
    bool             GetArg1AgreementId() const { return (m_Arg1 & k_DiplomacyThreat_Arg1_AgreementId_Bit) != 0; }
    // End Arg1 flag group
    //
    sint32           GetDetails() const { return m_Details; }
}; /* DiplomacyThreatRecord */

struct DiplomacyThreatRecordAccessorInfo {
    DiplomacyThreatRecord::IntAccessor m_intAccessor;
    DiplomacyThreatRecord::BoolAccessor m_boolAccessor;
    DiplomacyThreatRecord::FloatAccessor m_floatAccessor;
    DiplomacyThreatRecord::BitIntAccessor m_bitIntAccessor;
    DiplomacyThreatRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern DiplomacyThreatRecordAccessorInfo g_DiplomacyThreatRecord_Accessors[];
extern char *g_DiplomacyThreat_Tokens[];
#define k_Num_DiplomacyThreatRecord_Tokens 4

template <class T> class CTPDatabase;
extern CTPDatabase<DiplomacyThreatRecord> *g_theDiplomacyThreatDB;

#endif /* ifndef __DiplomacyThreat_RECORD_H__ */
