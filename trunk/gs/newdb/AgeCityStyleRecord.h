
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __AgeCityStyle_RECORD_H__
#define __AgeCityStyle_RECORD_H__

/*
 * AgeCityStyle description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

class AgeCityStyleRecord : public CTPRecord
{
public:
    typedef sint32 (AgeCityStyleRecord::*IntAccessor)() const;
    typedef bool (AgeCityStyleRecord::*BoolAccessor)() const;
    typedef double (AgeCityStyleRecord::*FloatAccessor)() const ;
    typedef bool (AgeCityStyleRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (AgeCityStyleRecord::*BitFloatAccessor)(double &val) const;
    class SizeSprite {
    private:
        sint32            m_Type;
        sint32            m_MinSize;
        sint32            m_MaxSize;
        sint32            m_Sprite;
    public:
        SizeSprite();
        ~SizeSprite();
        void operator=(const SizeSprite & rval);
        bool operator==(const SizeSprite & rval) { 
          return false; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, SizeSprite **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, SizeSprite *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        sint32           GetType() const { return m_Type; }
        sint32           GetMinSize() const { return m_MinSize; }
        sint32           GetMaxSize() const { return m_MaxSize; }
        sint32           GetSprite() const { return m_Sprite; }
    }; /* class SizeSprite */

private:
    SizeSprite       *m_Sprites;
    sint32           m_numSprites;

public:
    AgeCityStyleRecord() { Init(); };
    ~AgeCityStyleRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    AgeCityStyleRecord(const AgeCityStyleRecord &rval) { Init(); *this = rval; }
    void operator=(const AgeCityStyleRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const AgeCityStyleRecord & rval);
    //
    // Accessors
    //
    const SizeSprite *GetSprites(sint32 index) const;
    sint32           GetNumSprites() const { return m_numSprites;}
}; /* AgeCityStyleRecord */

struct AgeCityStyleRecordAccessorInfo {
    AgeCityStyleRecord::IntAccessor m_intAccessor;
    AgeCityStyleRecord::BoolAccessor m_boolAccessor;
    AgeCityStyleRecord::FloatAccessor m_floatAccessor;
    AgeCityStyleRecord::BitIntAccessor m_bitIntAccessor;
    AgeCityStyleRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern AgeCityStyleRecordAccessorInfo g_AgeCityStyleRecord_Accessors[];
extern char *g_AgeCityStyle_Tokens[];
#define k_Num_AgeCityStyleRecord_Tokens 1

template <class T> class CTPDatabase;
extern CTPDatabase<AgeCityStyleRecord> *g_theAgeCityStyleDB;

#endif /* ifndef __AgeCityStyle_RECORD_H__ */
