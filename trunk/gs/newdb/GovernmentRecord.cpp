
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "c3errors.h"
#include "GovernmentRecord.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "CTPDatabase.h"
#include "StrDB.h"
#include "BitArray.h"

#include "AdvanceRecord.h"
#include "AdvanceRecord.h"
#include "IconRecord.h"

CTPDatabase<GovernmentRecord> *g_theGovernmentDB = NULL;

GovernmentRecord::Init()
{
    m_flags0 = 0;
    m_PositiveWorkdayCoef = 0.000000;
    m_NegativeWorkdayCoef = 0.000000;
    m_WorkdayExpectation = 0;
    m_PositiveWagesCoef = 0.000000;
    m_NegativeWagesCoef = 0.000000;
    m_WagesExpectation = 0;
    m_PositiveRationsCoef = 0.000000;
    m_NegativeRationsCoef = 0.000000;
    m_RationsExpectation = 0;
    m_KnowledgeCoef = 0.000000;
    m_PollutionCoef = 0.000000;
    m_PollutionUnhappyCoef = 0.000000;
    m_ConquestDistress = 0.000000;
    m_ConquestDistressDecay = 0.000000;
    m_EmpireDistanceScale = 0.000000;
    m_MinEmpireDistance = 0;
    m_MaxEmpireDistance = 0;
    m_TooManyCitiesThreshold = 0;
    m_TooManyCitiesCoefficient = 0.000000;
    m_MaxMartialLawUnits = 0;
    m_MartialLawEffect = 0.000000;
    m_MartialLawThreshold = 0;
    m_AtHomeRadius = 0;
    m_OverseasCoef = 0.000000;
    m_OverseasDefeatDecay = 0.000000;
    m_OverseasDefeatCoef = 0.000000;
    m_HomeDefeatDecay = 0.000000;
    m_HomeDefeatCoef = 0.000000;
    m_CrimeCoef = 0.000000;
    m_CrimeOffset = 0;
    m_ProfessionalUnits = 0;
    m_TurnsToNewReadiness = 0;
    m_ReadyPeaceCoef = 0.000000;
    m_ReadyPeaceHP = 0.000000;
    m_ReadyAlertCoef = 0.000000;
    m_ReadyAlertHP = 0.000000;
    m_ReadyWarCoef = 0.000000;
    m_ReadyWarHP = 0.000000;
    m_FoodCoef = 0.000000;
    m_GoldCoef = 0.000000;
    m_ProductionCoef = 0.000000;
    m_SupportCoef = 0.000000;
    m_DefenseCoef = 0.000000;
    m_EnableAdvance = 0x7fffffff;
    memset(m_ObsoleteAdvance, 0, sizeof(m_ObsoleteAdvance));
    m_numObsoleteAdvance = 0;
    m_Icon = 0x7fffffff;
    m_GrowthRank = 0;
    m_ProductionRank = 0;
    m_ScienceRank = 0;
    m_GoldRank = 0;
    m_MilitaryRank = 0;
    m_CommerceRank = 0;
    m_PollutionRank = 0;
    m_LoyaltyRank = 0;
    m_MartialLawRank = 0;
    m_MaxScienceRate = 0.000000;
    m_UnitRushModifier = 0.000000;
    m_BuildingRushModifier = 0.000000;
    m_WonderRushModifier = 0.000000;
    m_EndGameRushModifier = 0.000000;
    m_MaxIncomingTrade = 0;
    m_MaxOutgoingTrade = 0;
    m_InfrastructureCoefficient = 0.000000;
    m_CapitalizationCoefficient = 0.000000;
    m_WarDiscontentMaxUnits = 0;
    m_WarDiscontentPerUnit = 0.000000;
    m_Rank = 0;
    m_SameRankAdvice = 0;
    m_HigherRankAdvice = 0;
}

GovernmentRecord::~GovernmentRecord()
{
	int index = 0;
}

void GovernmentRecord::operator=(const GovernmentRecord & rval)
{
	int index = 0;
	m_index = rval.m_index;
	m_PositiveWorkdayCoef = rval.m_PositiveWorkdayCoef; 

	m_NegativeWorkdayCoef = rval.m_NegativeWorkdayCoef; 

	m_WorkdayExpectation = rval.m_WorkdayExpectation; 

	m_PositiveWagesCoef = rval.m_PositiveWagesCoef; 

	m_NegativeWagesCoef = rval.m_NegativeWagesCoef; 

	m_WagesExpectation = rval.m_WagesExpectation; 

	m_PositiveRationsCoef = rval.m_PositiveRationsCoef; 

	m_NegativeRationsCoef = rval.m_NegativeRationsCoef; 

	m_RationsExpectation = rval.m_RationsExpectation; 

	m_KnowledgeCoef = rval.m_KnowledgeCoef; 

	m_PollutionCoef = rval.m_PollutionCoef; 

	m_PollutionUnhappyCoef = rval.m_PollutionUnhappyCoef; 

	m_ConquestDistress = rval.m_ConquestDistress; 

	m_ConquestDistressDecay = rval.m_ConquestDistressDecay; 

	m_EmpireDistanceScale = rval.m_EmpireDistanceScale; 

	m_MinEmpireDistance = rval.m_MinEmpireDistance; 

	m_MaxEmpireDistance = rval.m_MaxEmpireDistance; 

	m_TooManyCitiesThreshold = rval.m_TooManyCitiesThreshold; 

	m_TooManyCitiesCoefficient = rval.m_TooManyCitiesCoefficient; 

	m_MaxMartialLawUnits = rval.m_MaxMartialLawUnits; 

	m_MartialLawEffect = rval.m_MartialLawEffect; 

	m_MartialLawThreshold = rval.m_MartialLawThreshold; 

	m_AtHomeRadius = rval.m_AtHomeRadius; 

	m_OverseasCoef = rval.m_OverseasCoef; 

	m_OverseasDefeatDecay = rval.m_OverseasDefeatDecay; 

	m_OverseasDefeatCoef = rval.m_OverseasDefeatCoef; 

	m_HomeDefeatDecay = rval.m_HomeDefeatDecay; 

	m_HomeDefeatCoef = rval.m_HomeDefeatCoef; 

	m_CrimeCoef = rval.m_CrimeCoef; 

	m_CrimeOffset = rval.m_CrimeOffset; 

	m_ProfessionalUnits = rval.m_ProfessionalUnits; 

	m_TurnsToNewReadiness = rval.m_TurnsToNewReadiness; 

	m_ReadyPeaceCoef = rval.m_ReadyPeaceCoef; 

	m_ReadyPeaceHP = rval.m_ReadyPeaceHP; 

	m_ReadyAlertCoef = rval.m_ReadyAlertCoef; 

	m_ReadyAlertHP = rval.m_ReadyAlertHP; 

	m_ReadyWarCoef = rval.m_ReadyWarCoef; 

	m_ReadyWarHP = rval.m_ReadyWarHP; 

	m_FoodCoef = rval.m_FoodCoef; 

	m_GoldCoef = rval.m_GoldCoef; 

	m_ProductionCoef = rval.m_ProductionCoef; 

	m_SupportCoef = rval.m_SupportCoef; 

	m_DefenseCoef = rval.m_DefenseCoef; 

	m_EnableAdvance = rval.m_EnableAdvance; 

	// copy fixed sized array ObsoleteAdvance[] 
 		memcpy(m_ObsoleteAdvance, rval.m_ObsoleteAdvance, sizeof(sint32)*rval.m_numObsoleteAdvance); 

	m_Icon = rval.m_Icon; 

	m_GrowthRank = rval.m_GrowthRank; 

	m_ProductionRank = rval.m_ProductionRank; 

	m_ScienceRank = rval.m_ScienceRank; 

	m_GoldRank = rval.m_GoldRank; 

	m_MilitaryRank = rval.m_MilitaryRank; 

	m_CommerceRank = rval.m_CommerceRank; 

	m_PollutionRank = rval.m_PollutionRank; 

	m_LoyaltyRank = rval.m_LoyaltyRank; 

	m_MartialLawRank = rval.m_MartialLawRank; 

	m_MaxScienceRate = rval.m_MaxScienceRate; 

	m_UnitRushModifier = rval.m_UnitRushModifier; 

	m_BuildingRushModifier = rval.m_BuildingRushModifier; 

	m_WonderRushModifier = rval.m_WonderRushModifier; 

	m_EndGameRushModifier = rval.m_EndGameRushModifier; 

	m_MaxIncomingTrade = rval.m_MaxIncomingTrade; 

	m_MaxOutgoingTrade = rval.m_MaxOutgoingTrade; 

	m_InfrastructureCoefficient = rval.m_InfrastructureCoefficient; 

	m_CapitalizationCoefficient = rval.m_CapitalizationCoefficient; 

	m_WarDiscontentMaxUnits = rval.m_WarDiscontentMaxUnits; 

	m_WarDiscontentPerUnit = rval.m_WarDiscontentPerUnit; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_Rank = rval.m_Rank; 

	m_SameRankAdvice = rval.m_SameRankAdvice; 

	m_HigherRankAdvice = rval.m_HigherRankAdvice; 

}

char *g_Government_Tokens[] =
{
    "PositiveWorkdayCoef",
    "NegativeWorkdayCoef",
    "WorkdayExpectation",
    "PositiveWagesCoef",
    "NegativeWagesCoef",
    "WagesExpectation",
    "PositiveRationsCoef",
    "NegativeRationsCoef",
    "RationsExpectation",
    "KnowledgeCoef",
    "PollutionCoef",
    "PollutionUnhappyCoef",
    "ConquestDistress",
    "ConquestDistressDecay",
    "EmpireDistanceScale",
    "MinEmpireDistance",
    "MaxEmpireDistance",
    "TooManyCitiesThreshold",
    "TooManyCitiesCoefficient",
    "MaxMartialLawUnits",
    "MartialLawEffect",
    "MartialLawThreshold",
    "AtHomeRadius",
    "OverseasCoef",
    "OverseasDefeatDecay",
    "OverseasDefeatCoef",
    "HomeDefeatDecay",
    "HomeDefeatCoef",
    "CrimeCoef",
    "CrimeOffset",
    "ProfessionalUnits",
    "TurnsToNewReadiness",
    "ReadyPeaceCoef",
    "ReadyPeaceHP",
    "ReadyAlertCoef",
    "ReadyAlertHP",
    "ReadyWarCoef",
    "ReadyWarHP",
    "FoodCoef",
    "GoldCoef",
    "ProductionCoef",
    "SupportCoef",
    "DefenseCoef",
    "EnableAdvance",
    "ObsoleteAdvance",
    "Icon",
    "GrowthRank",
    "ProductionRank",
    "ScienceRank",
    "GoldRank",
    "MilitaryRank",
    "CommerceRank",
    "PollutionRank",
    "LoyaltyRank",
    "MartialLawRank",
    "MaxScienceRate",
    "UnitRushModifier",
    "BuildingRushModifier",
    "WonderRushModifier",
    "EndGameRushModifier",
    "MaxIncomingTrade",
    "MaxOutgoingTrade",
    "InfrastructureCoefficient",
    "CapitalizationCoefficient",
    "WarDiscontentMaxUnits",
    "WarDiscontentPerUnit",
    "IsEcotopia",
    "GLHidden",
    "Rank",
    "SameRankAdvice",
    "HigherRankAdvice",
};

GovernmentRecordAccessorInfo g_GovernmentRecord_Accessors[] = 
{
    { NULL, NULL, GovernmentRecord::GetPositiveWorkdayCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetNegativeWorkdayCoef, NULL, NULL },
    { GovernmentRecord::GetWorkdayExpectation, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetPositiveWagesCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetNegativeWagesCoef, NULL, NULL },
    { GovernmentRecord::GetWagesExpectation, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetPositiveRationsCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetNegativeRationsCoef, NULL, NULL },
    { GovernmentRecord::GetRationsExpectation, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetKnowledgeCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetPollutionCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetPollutionUnhappyCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetConquestDistress, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetConquestDistressDecay, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetEmpireDistanceScale, NULL, NULL },
    { GovernmentRecord::GetMinEmpireDistance, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetMaxEmpireDistance, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetTooManyCitiesThreshold, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetTooManyCitiesCoefficient, NULL, NULL },
    { GovernmentRecord::GetMaxMartialLawUnits, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetMartialLawEffect, NULL, NULL },
    { GovernmentRecord::GetMartialLawThreshold, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetAtHomeRadius, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetOverseasCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetOverseasDefeatDecay, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetOverseasDefeatCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetHomeDefeatDecay, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetHomeDefeatCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetCrimeCoef, NULL, NULL },
    { GovernmentRecord::GetCrimeOffset, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetProfessionalUnits, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetTurnsToNewReadiness, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetReadyPeaceCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetReadyPeaceHP, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetReadyAlertCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetReadyAlertHP, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetReadyWarCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetReadyWarHP, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetFoodCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetGoldCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetProductionCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetSupportCoef, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetDefenseCoef, NULL, NULL },
    {GovernmentRecord::GetEnableAdvanceIndex, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* ObsoleteAdvance (array) */
    {GovernmentRecord::GetIconIndex, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetGrowthRank, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetProductionRank, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetScienceRank, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetGoldRank, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetMilitaryRank, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetCommerceRank, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetPollutionRank, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetLoyaltyRank, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetMartialLawRank, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetMaxScienceRate, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetUnitRushModifier, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetBuildingRushModifier, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetWonderRushModifier, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetEndGameRushModifier, NULL, NULL },
    { GovernmentRecord::GetMaxIncomingTrade, NULL, NULL, NULL, NULL },
    { GovernmentRecord::GetMaxOutgoingTrade, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetInfrastructureCoefficient, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetCapitalizationCoefficient, NULL, NULL },
    { GovernmentRecord::GetWarDiscontentMaxUnits, NULL, NULL, NULL, NULL },
    { NULL, NULL, GovernmentRecord::GetWarDiscontentPerUnit, NULL, NULL },
    { NULL, GovernmentRecord::GetIsEcotopia, NULL, NULL, NULL },
    { NULL, GovernmentRecord::GetGLHidden, NULL, NULL, NULL },
    { GovernmentRecord::GetRank, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* SameRankAdvice */
    { NULL, NULL, NULL, NULL, NULL}, /* HigherRankAdvice */
};

#define k_Token_Government_PositiveWorkdayCoef   ((k_Token_Custom_Base) + 0)
#define k_Token_Government_NegativeWorkdayCoef   ((k_Token_Custom_Base) + 1)
#define k_Token_Government_WorkdayExpectation    ((k_Token_Custom_Base) + 2)
#define k_Token_Government_PositiveWagesCoef     ((k_Token_Custom_Base) + 3)
#define k_Token_Government_NegativeWagesCoef     ((k_Token_Custom_Base) + 4)
#define k_Token_Government_WagesExpectation      ((k_Token_Custom_Base) + 5)
#define k_Token_Government_PositiveRationsCoef   ((k_Token_Custom_Base) + 6)
#define k_Token_Government_NegativeRationsCoef   ((k_Token_Custom_Base) + 7)
#define k_Token_Government_RationsExpectation    ((k_Token_Custom_Base) + 8)
#define k_Token_Government_KnowledgeCoef         ((k_Token_Custom_Base) + 9)
#define k_Token_Government_PollutionCoef         ((k_Token_Custom_Base) + 10)
#define k_Token_Government_PollutionUnhappyCoef  ((k_Token_Custom_Base) + 11)
#define k_Token_Government_ConquestDistress      ((k_Token_Custom_Base) + 12)
#define k_Token_Government_ConquestDistressDecay ((k_Token_Custom_Base) + 13)
#define k_Token_Government_EmpireDistanceScale   ((k_Token_Custom_Base) + 14)
#define k_Token_Government_MinEmpireDistance     ((k_Token_Custom_Base) + 15)
#define k_Token_Government_MaxEmpireDistance     ((k_Token_Custom_Base) + 16)
#define k_Token_Government_TooManyCitiesThreshold ((k_Token_Custom_Base) + 17)
#define k_Token_Government_TooManyCitiesCoefficient ((k_Token_Custom_Base) + 18)
#define k_Token_Government_MaxMartialLawUnits    ((k_Token_Custom_Base) + 19)
#define k_Token_Government_MartialLawEffect      ((k_Token_Custom_Base) + 20)
#define k_Token_Government_MartialLawThreshold   ((k_Token_Custom_Base) + 21)
#define k_Token_Government_AtHomeRadius          ((k_Token_Custom_Base) + 22)
#define k_Token_Government_OverseasCoef          ((k_Token_Custom_Base) + 23)
#define k_Token_Government_OverseasDefeatDecay   ((k_Token_Custom_Base) + 24)
#define k_Token_Government_OverseasDefeatCoef    ((k_Token_Custom_Base) + 25)
#define k_Token_Government_HomeDefeatDecay       ((k_Token_Custom_Base) + 26)
#define k_Token_Government_HomeDefeatCoef        ((k_Token_Custom_Base) + 27)
#define k_Token_Government_CrimeCoef             ((k_Token_Custom_Base) + 28)
#define k_Token_Government_CrimeOffset           ((k_Token_Custom_Base) + 29)
#define k_Token_Government_ProfessionalUnits     ((k_Token_Custom_Base) + 30)
#define k_Token_Government_TurnsToNewReadiness   ((k_Token_Custom_Base) + 31)
#define k_Token_Government_ReadyPeaceCoef        ((k_Token_Custom_Base) + 32)
#define k_Token_Government_ReadyPeaceHP          ((k_Token_Custom_Base) + 33)
#define k_Token_Government_ReadyAlertCoef        ((k_Token_Custom_Base) + 34)
#define k_Token_Government_ReadyAlertHP          ((k_Token_Custom_Base) + 35)
#define k_Token_Government_ReadyWarCoef          ((k_Token_Custom_Base) + 36)
#define k_Token_Government_ReadyWarHP            ((k_Token_Custom_Base) + 37)
#define k_Token_Government_FoodCoef              ((k_Token_Custom_Base) + 38)
#define k_Token_Government_GoldCoef              ((k_Token_Custom_Base) + 39)
#define k_Token_Government_ProductionCoef        ((k_Token_Custom_Base) + 40)
#define k_Token_Government_SupportCoef           ((k_Token_Custom_Base) + 41)
#define k_Token_Government_DefenseCoef           ((k_Token_Custom_Base) + 42)
#define k_Token_Government_EnableAdvance         ((k_Token_Custom_Base) + 43)
#define k_Token_Government_ObsoleteAdvance       ((k_Token_Custom_Base) + 44)
#define k_Token_Government_Icon                  ((k_Token_Custom_Base) + 45)
#define k_Token_Government_GrowthRank            ((k_Token_Custom_Base) + 46)
#define k_Token_Government_ProductionRank        ((k_Token_Custom_Base) + 47)
#define k_Token_Government_ScienceRank           ((k_Token_Custom_Base) + 48)
#define k_Token_Government_GoldRank              ((k_Token_Custom_Base) + 49)
#define k_Token_Government_MilitaryRank          ((k_Token_Custom_Base) + 50)
#define k_Token_Government_CommerceRank          ((k_Token_Custom_Base) + 51)
#define k_Token_Government_PollutionRank         ((k_Token_Custom_Base) + 52)
#define k_Token_Government_LoyaltyRank           ((k_Token_Custom_Base) + 53)
#define k_Token_Government_MartialLawRank        ((k_Token_Custom_Base) + 54)
#define k_Token_Government_MaxScienceRate        ((k_Token_Custom_Base) + 55)
#define k_Token_Government_UnitRushModifier      ((k_Token_Custom_Base) + 56)
#define k_Token_Government_BuildingRushModifier  ((k_Token_Custom_Base) + 57)
#define k_Token_Government_WonderRushModifier    ((k_Token_Custom_Base) + 58)
#define k_Token_Government_EndGameRushModifier   ((k_Token_Custom_Base) + 59)
#define k_Token_Government_MaxIncomingTrade      ((k_Token_Custom_Base) + 60)
#define k_Token_Government_MaxOutgoingTrade      ((k_Token_Custom_Base) + 61)
#define k_Token_Government_InfrastructureCoefficient ((k_Token_Custom_Base) + 62)
#define k_Token_Government_CapitalizationCoefficient ((k_Token_Custom_Base) + 63)
#define k_Token_Government_WarDiscontentMaxUnits ((k_Token_Custom_Base) + 64)
#define k_Token_Government_WarDiscontentPerUnit  ((k_Token_Custom_Base) + 65)
#define k_Token_Government_IsEcotopia            ((k_Token_Custom_Base) + 66)
#define k_Token_Government_GLHidden              ((k_Token_Custom_Base) + 67)
#define k_Token_Government_Rank                  ((k_Token_Custom_Base) + 68)
#define k_Token_Government_SameRankAdvice        ((k_Token_Custom_Base) + 69)
#define k_Token_Government_HigherRankAdvice      ((k_Token_Custom_Base) + 70)
#define k_Token_Government_Max                   ((k_Token_Custom_Base) + 71)


static BitArray s_ParsedTokens(71);
void GovernmentRecord::CheckRequiredFields(DBLexer *lex)
{
    // Ick.
    if(!s_ParsedTokens.Bit(k_Token_Government_PositiveWorkdayCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field PositiveWorkdayCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_NegativeWorkdayCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field NegativeWorkdayCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_WorkdayExpectation - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field WorkdayExpectation missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_PositiveWagesCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field PositiveWagesCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_NegativeWagesCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field NegativeWagesCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_WagesExpectation - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field WagesExpectation missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_PositiveRationsCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field PositiveRationsCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_NegativeRationsCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field NegativeRationsCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_RationsExpectation - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field RationsExpectation missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_KnowledgeCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field KnowledgeCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_PollutionCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field PollutionCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_PollutionUnhappyCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field PollutionUnhappyCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ConquestDistress - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ConquestDistress missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ConquestDistressDecay - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ConquestDistressDecay missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_EmpireDistanceScale - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field EmpireDistanceScale missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MinEmpireDistance - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MinEmpireDistance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MaxEmpireDistance - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MaxEmpireDistance missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_TooManyCitiesThreshold - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field TooManyCitiesThreshold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_TooManyCitiesCoefficient - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field TooManyCitiesCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MaxMartialLawUnits - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MaxMartialLawUnits missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MartialLawEffect - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MartialLawEffect missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MartialLawThreshold - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MartialLawThreshold missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_AtHomeRadius - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field AtHomeRadius missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_OverseasCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field OverseasCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_OverseasDefeatDecay - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field OverseasDefeatDecay missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_OverseasDefeatCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field OverseasDefeatCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_HomeDefeatDecay - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field HomeDefeatDecay missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_HomeDefeatCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field HomeDefeatCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_CrimeCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field CrimeCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_CrimeOffset - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field CrimeOffset missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ProfessionalUnits - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ProfessionalUnits missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_TurnsToNewReadiness - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field TurnsToNewReadiness missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ReadyPeaceCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ReadyPeaceCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ReadyPeaceHP - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ReadyPeaceHP missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ReadyAlertCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ReadyAlertCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ReadyAlertHP - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ReadyAlertHP missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ReadyWarCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ReadyWarCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ReadyWarHP - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ReadyWarHP missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_FoodCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field FoodCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_GoldCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field GoldCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ProductionCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ProductionCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_SupportCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field SupportCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_DefenseCoef - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field DefenseCoef missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_GrowthRank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field GrowthRank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ProductionRank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ProductionRank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_ScienceRank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ScienceRank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_GoldRank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field GoldRank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MilitaryRank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MilitaryRank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_CommerceRank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field CommerceRank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_PollutionRank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field PollutionRank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_LoyaltyRank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field LoyaltyRank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MartialLawRank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MartialLawRank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MaxScienceRate - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MaxScienceRate missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_UnitRushModifier - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field UnitRushModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_BuildingRushModifier - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field BuildingRushModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_WonderRushModifier - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field WonderRushModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_EndGameRushModifier - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field EndGameRushModifier missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MaxIncomingTrade - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MaxIncomingTrade missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_MaxOutgoingTrade - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field MaxOutgoingTrade missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_InfrastructureCoefficient - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field InfrastructureCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_CapitalizationCoefficient - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field CapitalizationCoefficient missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_WarDiscontentMaxUnits - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field WarDiscontentMaxUnits missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_WarDiscontentPerUnit - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field WarDiscontentPerUnit missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_Rank - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field Rank missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_SameRankAdvice - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field SameRankAdvice missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Government_HigherRankAdvice - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field HigherRankAdvice missing"));
    }
}
    
sint32 GovernmentRecord::Parse(DBLexer *lex)
{
    bool done = false;
    sint32 result = 0;
    sint32 tok;
    DBPARSE_ERROR err = DBPARSE_OK;
    s_ParsedTokens.Clear();
    lex->SetTokens(g_Government_Tokens, k_Token_Government_Max);
    tok = lex->GetToken();
    if(tok != k_Token_Name) {
        DBERROR(("Record does not start with name"));
        return 0;
    }
    if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name)) {
        g_theStringDB->InsertStr(lex->GetTokenText(), lex->GetTokenText());
        if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name))
            SetTextName(lex->GetTokenText());
    }

    tok = lex->GetToken();
    if(tok != k_Token_OpenBrace) {
        DBERROR(("Missing open brace"));
        return 0;
    }

    while(!done) {
        tok = lex->GetToken();
        if(tok >= k_Token_Custom_Base && tok < k_Token_Government_Max) { 
            s_ParsedTokens.SetBit(tok - k_Token_Custom_Base);
        }
        switch(tok) {
            case k_Token_Government_PositiveWorkdayCoef:
                if(!lex->GetFloatAssignment(m_PositiveWorkdayCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_NegativeWorkdayCoef:
                if(!lex->GetFloatAssignment(m_NegativeWorkdayCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_WorkdayExpectation:
                if(!lex->GetIntAssignment(m_WorkdayExpectation)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_PositiveWagesCoef:
                if(!lex->GetFloatAssignment(m_PositiveWagesCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_NegativeWagesCoef:
                if(!lex->GetFloatAssignment(m_NegativeWagesCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_WagesExpectation:
                if(!lex->GetIntAssignment(m_WagesExpectation)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_PositiveRationsCoef:
                if(!lex->GetFloatAssignment(m_PositiveRationsCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_NegativeRationsCoef:
                if(!lex->GetFloatAssignment(m_NegativeRationsCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_RationsExpectation:
                if(!lex->GetIntAssignment(m_RationsExpectation)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_KnowledgeCoef:
                if(!lex->GetFloatAssignment(m_KnowledgeCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_PollutionCoef:
                if(!lex->GetFloatAssignment(m_PollutionCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_PollutionUnhappyCoef:
                if(!lex->GetFloatAssignment(m_PollutionUnhappyCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ConquestDistress:
                if(!lex->GetFloatAssignment(m_ConquestDistress)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ConquestDistressDecay:
                if(!lex->GetFloatAssignment(m_ConquestDistressDecay)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_EmpireDistanceScale:
                if(!lex->GetFloatAssignment(m_EmpireDistanceScale)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MinEmpireDistance:
                if(!lex->GetIntAssignment(m_MinEmpireDistance)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MaxEmpireDistance:
                if(!lex->GetIntAssignment(m_MaxEmpireDistance)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_TooManyCitiesThreshold:
                if(!lex->GetIntAssignment(m_TooManyCitiesThreshold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_TooManyCitiesCoefficient:
                if(!lex->GetFloatAssignment(m_TooManyCitiesCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MaxMartialLawUnits:
                if(!lex->GetIntAssignment(m_MaxMartialLawUnits)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MartialLawEffect:
                if(!lex->GetFloatAssignment(m_MartialLawEffect)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MartialLawThreshold:
                if(!lex->GetIntAssignment(m_MartialLawThreshold)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_AtHomeRadius:
                if(!lex->GetIntAssignment(m_AtHomeRadius)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_OverseasCoef:
                if(!lex->GetFloatAssignment(m_OverseasCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_OverseasDefeatDecay:
                if(!lex->GetFloatAssignment(m_OverseasDefeatDecay)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_OverseasDefeatCoef:
                if(!lex->GetFloatAssignment(m_OverseasDefeatCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_HomeDefeatDecay:
                if(!lex->GetFloatAssignment(m_HomeDefeatDecay)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_HomeDefeatCoef:
                if(!lex->GetFloatAssignment(m_HomeDefeatCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_CrimeCoef:
                if(!lex->GetFloatAssignment(m_CrimeCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_CrimeOffset:
                if(!lex->GetIntAssignment(m_CrimeOffset)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ProfessionalUnits:
                if(!lex->GetIntAssignment(m_ProfessionalUnits)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_TurnsToNewReadiness:
                if(!lex->GetIntAssignment(m_TurnsToNewReadiness)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ReadyPeaceCoef:
                if(!lex->GetFloatAssignment(m_ReadyPeaceCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ReadyPeaceHP:
                if(!lex->GetFloatAssignment(m_ReadyPeaceHP)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ReadyAlertCoef:
                if(!lex->GetFloatAssignment(m_ReadyAlertCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ReadyAlertHP:
                if(!lex->GetFloatAssignment(m_ReadyAlertHP)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ReadyWarCoef:
                if(!lex->GetFloatAssignment(m_ReadyWarCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ReadyWarHP:
                if(!lex->GetFloatAssignment(m_ReadyWarHP)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_FoodCoef:
                if(!lex->GetFloatAssignment(m_FoodCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_GoldCoef:
                if(!lex->GetFloatAssignment(m_GoldCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ProductionCoef:
                if(!lex->GetFloatAssignment(m_ProductionCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_SupportCoef:
                if(!lex->GetFloatAssignment(m_SupportCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_DefenseCoef:
                if(!lex->GetFloatAssignment(m_DefenseCoef)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_EnableAdvance:
                if(!g_theAdvanceDB->GetRecordFromLexer(lex, m_EnableAdvance, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Government_ObsoleteAdvance:
                if(!g_theAdvanceDB->ParseRecordInArray(lex, (sint32 *)m_ObsoleteAdvance, &m_numObsoleteAdvance, k_MAX_ObsoleteAdvance, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Government_Icon:
                if(!g_theIconDB->GetRecordFromLexer(lex, m_Icon, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Government_GrowthRank:
                if(!lex->GetIntAssignment(m_GrowthRank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ProductionRank:
                if(!lex->GetIntAssignment(m_ProductionRank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_ScienceRank:
                if(!lex->GetIntAssignment(m_ScienceRank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_GoldRank:
                if(!lex->GetIntAssignment(m_GoldRank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MilitaryRank:
                if(!lex->GetIntAssignment(m_MilitaryRank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_CommerceRank:
                if(!lex->GetIntAssignment(m_CommerceRank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_PollutionRank:
                if(!lex->GetIntAssignment(m_PollutionRank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_LoyaltyRank:
                if(!lex->GetIntAssignment(m_LoyaltyRank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MartialLawRank:
                if(!lex->GetIntAssignment(m_MartialLawRank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MaxScienceRate:
                if(!lex->GetFloatAssignment(m_MaxScienceRate)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_UnitRushModifier:
                if(!lex->GetFloatAssignment(m_UnitRushModifier)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_BuildingRushModifier:
                if(!lex->GetFloatAssignment(m_BuildingRushModifier)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_WonderRushModifier:
                if(!lex->GetFloatAssignment(m_WonderRushModifier)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_EndGameRushModifier:
                if(!lex->GetFloatAssignment(m_EndGameRushModifier)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MaxIncomingTrade:
                if(!lex->GetIntAssignment(m_MaxIncomingTrade)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_MaxOutgoingTrade:
                if(!lex->GetIntAssignment(m_MaxOutgoingTrade)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_InfrastructureCoefficient:
                if(!lex->GetFloatAssignment(m_InfrastructureCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_CapitalizationCoefficient:
                if(!lex->GetFloatAssignment(m_CapitalizationCoefficient)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_WarDiscontentMaxUnits:
                if(!lex->GetIntAssignment(m_WarDiscontentMaxUnits)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_WarDiscontentPerUnit:
                if(!lex->GetFloatAssignment(m_WarDiscontentPerUnit)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Government_IsEcotopia:
                m_flags0 |= k_Government_IsEcotopia_Bit;
                break;
            case k_Token_Government_GLHidden:
                m_flags0 |= k_Government_GLHidden_Bit;
                break;
            case k_Token_Government_Rank:
                if(!lex->GetIntAssignment(m_Rank)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Government_SameRankAdvice:
                if(!lex->GetStringIdAssignment(m_SameRankAdvice)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Government_HigherRankAdvice:
                if(!lex->GetStringIdAssignment(m_HigherRankAdvice)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_CloseBrace:
                done = true;
                result = 1;
                break;
            default:
                DBERROR(("Unknown token"));
                done = true;
                break;
        }
    }
    CheckRequiredFields(lex);
    lex->RestoreTokens();
    return result;
}

void GovernmentRecord::ResolveDBReferences()
{
    if(m_EnableAdvance & 0x80000000) {
        sint32 id = m_EnableAdvance & 0x7fffffff;
        if(!g_theAdvanceDB->GetNamedItem(id, m_EnableAdvance)) {
            c3errors_ErrorDialog("DB", "%s not found in Advance database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_EnableAdvance == 0x7fffffff) {
        m_EnableAdvance = -1;
    }
    {
        sint32 i;
        for(i = 0; i < m_numObsoleteAdvance; i++) {
            if(m_ObsoleteAdvance[i] & 0x80000000) {
                sint32 id = m_ObsoleteAdvance[i] & 0x7fffffff;
                if(!g_theAdvanceDB->GetNamedItem(id, m_ObsoleteAdvance[i])) {
                    c3errors_ErrorDialog("DB", "%s not found in Advance database", g_theStringDB->GetNameStr(id));
                }
            } else if(m_ObsoleteAdvance[i] == 0x7fffffff){
                m_ObsoleteAdvance[i] = -1;
            }
        }
    }
    if(m_Icon & 0x80000000) {
        sint32 id = m_Icon & 0x7fffffff;
        if(!g_theIconDB->GetNamedItem(id, m_Icon)) {
            c3errors_ErrorDialog("DB", "%s not found in Icon database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_Icon == 0x7fffffff) {
        m_Icon = -1;
    }
}
/*
 * Member class Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
/*
 * Data Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
void GovernmentRecord::Merge(const GovernmentRecord & rval){
	int index = 0, obj_index = 0;
	// copy values of rval.m_ObsoleteAdvance to m_ObsoleteAdvance
	for (index = 0; index < m_numObsoleteAdvance; index++) 
	{ 
 		if (index < rval.m_numObsoleteAdvance)
 			m_ObsoleteAdvance[index] = rval.m_ObsoleteAdvance[index];
	} 
 } 

/*
 * Data accessors
 * (DO NOT EDIT!  Automatically generated file)
 */
const AdvanceRecord *GovernmentRecord::GetEnableAdvance() const
{
    return g_theAdvanceDB->Get(m_EnableAdvance);
}

sint32 GovernmentRecord::GetObsoleteAdvanceIndex(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numObsoleteAdvance);
    if((index < 0) || (index >= m_numObsoleteAdvance)) {
        return 0;
    }
    return m_ObsoleteAdvance[index];
}

const AdvanceRecord *GovernmentRecord::GetObsoleteAdvance(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numObsoleteAdvance);
    if((index < 0) || (index >= m_numObsoleteAdvance)) {
        return 0;
    }
    return g_theAdvanceDB->Get(m_ObsoleteAdvance[index]);
}

const IconRecord *GovernmentRecord::GetIcon() const
{
    return g_theIconDB->Get(m_Icon);
}

