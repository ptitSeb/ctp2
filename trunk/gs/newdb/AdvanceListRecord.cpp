
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "c3errors.h"
#include "AdvanceListRecord.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "CTPDatabase.h"
#include "StrDB.h"
#include "BitArray.h"

#include "AdvanceRecord.h"

CTPDatabase<AdvanceListRecord> *g_theAdvanceListDB = NULL;

AdvanceListRecord::Init()
{
    m_Advance = NULL;
    m_numAdvance = 0;
}

AdvanceListRecord::~AdvanceListRecord()
{
	int index = 0;
	// free array Advance 
 	if (m_numAdvance > 0) 
		delete [m_numAdvance] m_Advance; 
	m_Advance = NULL; 
	m_numAdvance = 0; 

}

void AdvanceListRecord::operator=(const AdvanceListRecord & rval)
{
	int index = 0;
	m_index = rval.m_index;
	// free array Advance 
 	if (m_numAdvance > 0) 
	{
		delete [m_numAdvance] m_Advance; 
		m_Advance = NULL; 
		m_numAdvance = 0; 
	}
	if (rval.m_numAdvance > 0) 
	{
		m_Advance = new sint32 [rval.m_numAdvance]; 
		memcpy(m_Advance, rval.m_Advance, sizeof(sint32)*rval.m_numAdvance); 

	} 
	m_numAdvance = rval.m_numAdvance;

}

char *g_AdvanceList_Tokens[] =
{
    "Advance",
};

AdvanceListRecordAccessorInfo g_AdvanceListRecord_Accessors[] = 
{
    { NULL, NULL, NULL, NULL, NULL}, /* Advance (array) */
};

#define k_Token_AdvanceList_Advance              ((k_Token_Custom_Base) + 0)
#define k_Token_AdvanceList_Max                  ((k_Token_Custom_Base) + 1)


static BitArray s_ParsedTokens(1);
void AdvanceListRecord::CheckRequiredFields(DBLexer *lex)
{
    // Ick.
}
    
sint32 AdvanceListRecord::Parse(DBLexer *lex)
{
    bool done = false;
    sint32 result = 0;
    sint32 tok;
    DBPARSE_ERROR err = DBPARSE_OK;
    s_ParsedTokens.Clear();
    lex->SetTokens(g_AdvanceList_Tokens, k_Token_AdvanceList_Max);
    tok = lex->GetToken();
    if(tok != k_Token_Name) {
        DBERROR(("Record does not start with name"));
        return 0;
    }
    if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name)) {
        g_theStringDB->InsertStr(lex->GetTokenText(), lex->GetTokenText());
        if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name))
            SetTextName(lex->GetTokenText());
    }

    tok = lex->GetToken();
    if(tok != k_Token_OpenBrace) {
        DBERROR(("Missing open brace"));
        return 0;
    }

    while(!done) {
        tok = lex->GetToken();
        if(tok >= k_Token_Custom_Base && tok < k_Token_AdvanceList_Max) { 
            s_ParsedTokens.SetBit(tok - k_Token_Custom_Base);
        }
        switch(tok) {
            case k_Token_AdvanceList_Advance:
                if(!g_theAdvanceDB->ParseRecordInArray(lex, (sint32 **)&m_Advance, &m_numAdvance, err)) 
                {
                    done = true; break;
                }
                break;
            case k_Token_CloseBrace:
                done = true;
                result = 1;
                break;
            default:
                DBERROR(("Unknown token"));
                done = true;
                break;
        }
    }
    CheckRequiredFields(lex);
    lex->RestoreTokens();
    return result;
}

void AdvanceListRecord::ResolveDBReferences()
{
    {
        sint32 i;
        for(i = 0; i < m_numAdvance; i++) {
            if(m_Advance[i] & 0x80000000) {
                sint32 id = m_Advance[i] & 0x7fffffff;
                if(!g_theAdvanceDB->GetNamedItem(id, m_Advance[i])) {
                    c3errors_ErrorDialog("DB", "%s not found in Advance database", g_theStringDB->GetNameStr(id));
                }
            } else if(m_Advance[i] == 0x7fffffff){
                m_Advance[i] = -1;
            }
        }
    }
}
/*
 * Member class Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
/*
 * Data Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
void AdvanceListRecord::Merge(const AdvanceListRecord & rval){
	int index = 0, obj_index = 0;
	// resize m_Advance if necessary
	if (rval.m_numAdvance > m_numAdvance)
 	{ 
		delete m_Advance;
 		m_Advance = NULL;
 		if (rval.m_numAdvance > 0)
 			m_Advance = new sint32 [rval.m_numAdvance]; 
		m_numAdvance = rval.m_numAdvance;
 	} 

	// copy values of rval.m_Advance to m_Advance
	for (index = 0; index < m_numAdvance; index++) 
	{ 
 		if (index < rval.m_numAdvance)
 			m_Advance[index] = rval.m_Advance[index];
	} 
 } 

/*
 * Data accessors
 * (DO NOT EDIT!  Automatically generated file)
 */
sint32 AdvanceListRecord::GetAdvanceIndex(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numAdvance);
    if((index < 0) || (index >= m_numAdvance)) {
        return 0;
    }
    return m_Advance[index];
}

const AdvanceRecord *AdvanceListRecord::GetAdvance(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numAdvance);
    if((index < 0) || (index >= m_numAdvance)) {
        return 0;
    }
    return g_theAdvanceDB->Get(m_Advance[index]);
}

