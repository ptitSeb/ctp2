
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Order_RECORD_H__
#define __Order_RECORD_H__

/*
 * Order description
 */
#include "CTPRecord.h"
//
// m_flags0
#define k_Order_UnitPretest_None_Bit             0x00000001
#define k_Order_UnitPretest_CanAttack_Bit        0x00000002
#define k_Order_UnitPretest_CanEntrench_Bit      0x00000004
#define k_Order_UnitPretest_CanSueFranchise_Bit  0x00000008
#define k_Order_UnitPretest_CanSue_Bit           0x00000010
#define k_Order_UnitPretest_CanCreateFranchise_Bit 0x00000020
#define k_Order_UnitPretest_CanInvestigateCity_Bit 0x00000040
#define k_Order_UnitPretest_CanBombard_Bit       0x00000080
#define k_Order_UnitPretest_CanSettle_Bit        0x00000100
#define k_Order_UnitPretest_CanStealTechnology_Bit 0x00000200
#define k_Order_UnitPretest_CanInciteRevolution_Bit 0x00000400
#define k_Order_UnitPretest_CanAssassinateRuler_Bit 0x00000800
#define k_Order_UnitPretest_CanExpel_Bit         0x00001000
#define k_Order_UnitPretest_EstablishEmbassy_Bit 0x00002000
#define k_Order_UnitPretest_ThrowParty_Bit       0x00004000
#define k_Order_UnitPretest_CanCauseUnhappiness_Bit 0x00008000
#define k_Order_UnitPretest_CanPlantNuke_Bit     0x00010000
#define k_Order_UnitPretest_CanSlaveRaid_Bit     0x00020000
#define k_Order_UnitPretest_CanEnslaveSettler_Bit 0x00040000
#define k_Order_UnitPretest_CanUndergroundRailway_Bit 0x00080000
#define k_Order_UnitPretest_CanInciteUprising_Bit 0x00100000
#define k_Order_UnitPretest_CanBioTerror_Bit     0x00200000
#define k_Order_UnitPretest_CanPlague_Bit        0x00400000
#define k_Order_UnitPretest_CanNanoInfect_Bit    0x00800000
#define k_Order_UnitPretest_CanConvertCity_Bit   0x01000000
#define k_Order_UnitPretest_CanReformCity_Bit    0x02000000
#define k_Order_UnitPretest_CanSellIndulgences_Bit 0x04000000
#define k_Order_UnitPretest_CanFaithHeal_Bit     0x08000000
#define k_Order_UnitPretest_CanSoothsay_Bit      0x10000000
#define k_Order_UnitPretest_CanCreatePark_Bit    0x20000000
#define k_Order_UnitPretest_CanPillage_Bit       0x40000000
#define k_Order_UnitPretest_CanInjoin_Bit        0x80000000
//
// m_flags1
#define k_Order_UnitPretest_CanInterceptTrade_Bit 0x00000001
#define k_Order_UnitPretest_CanAdvertise_Bit     0x00000002
#define k_Order_UnitPretest_CanNukeCity_Bit      0x00000004
#define k_Order_UnitPretest_CanTransport_Bit     0x00000008
#define k_Order_UnitPretest_CanBeTransported_Bit 0x00000010
#define k_Order_UnitPretest_CanLaunch_Bit        0x00000020
#define k_Order_UnitPretest_CanTarget_Bit        0x00000040
#define k_Order_UnitPretest_Invalid_Bit          0x00000080
#define k_Order_Range_Bit                        0x00000100
#define k_Order_IsTeleport_Bit                   0x00000200
#define k_Order_IsTarget_Bit                     0x00000400
#define k_Order_GLHidden_Bit                     0x00000800
#define k_Order_FailSound_Bit                    0x00001000
#define k_Order_Sound_Bit                        0x00002000
//
// m_TargetPretest bit group
#define k_Order_TargetPretest_None_Bit           0x00000001
#define k_Order_TargetPretest_EnemyCity_Bit      0x00000002
#define k_Order_TargetPretest_OwnCity_Bit        0x00000004
#define k_Order_TargetPretest_EnemyArmy_Bit      0x00000008
#define k_Order_TargetPretest_EnemySpecialUnit_Bit 0x00000010
#define k_Order_TargetPretest_EnemySettler_Bit   0x00000020
#define k_Order_TargetPretest_EnemyTradeUnit_Bit 0x00000040
#define k_Order_TargetPretest_TradeRoute_Bit     0x00000080
#define k_Order_TargetPretest_TerrainImprovement_Bit 0x00000100
#define k_Order_TargetPretest_MovePosition_Bit   0x00000200
#define k_Order_TargetPretest_AttackPosition_Bit 0x00000400
#define k_Order_TargetPretest_Transport_Bit      0x00000800
#define k_Order_TargetPretest_AdjacentPosition_Bit 0x00001000
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class IconRecord;

class OrderRecord : public CTPRecord
{
public:
    typedef sint32 (OrderRecord::*IntAccessor)() const;
    typedef bool (OrderRecord::*BoolAccessor)() const;
    typedef double (OrderRecord::*FloatAccessor)() const ;
    typedef bool (OrderRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (OrderRecord::*BitFloatAccessor)(double &val) const;
private:
    uint32 m_flags0;
    uint32 m_flags1;

    sint32            m_Gold;
    sint32            m_Move;
    char            * m_EventName;
    sint32            m_LocalizedName;
    sint32            m_StatusText;
    uint32            m_TargetPretest;
    sint32            m_RangeValue;
    char            * m_CPIcon;
    sint32            m_DefaultIcon; // Index into Icon database
    sint32            m_ButtonLocation;
    sint32            m_Cursor;
    sint32            m_InvalidCursor;
    sint32            m_FailSoundValue;
    sint32            m_SoundValue;

public:
    OrderRecord() { Init(); };
    ~OrderRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    OrderRecord(const OrderRecord &rval) { Init(); *this = rval; }
    void operator=(const OrderRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const OrderRecord & rval);
    sint32 ParseTargetPretestBit(DBLexer *lex);
    //
    // Accessors
    //
    sint32           GetGold() const { return m_Gold; }
    sint32           GetMove() const { return m_Move; }
    const char      *GetEventName() const { return m_EventName; }
    sint32           GetLocalizedName() const { return m_LocalizedName; }
    sint32           GetStatusText() const { return m_StatusText; }

    //
    // TargetPretest flag group
    uint32           GetTargetPretest() const { return m_TargetPretest; }
    bool             GetTargetPretestNone() const { return (m_TargetPretest & k_Order_TargetPretest_None_Bit) != 0; }
    bool             GetTargetPretestEnemyCity() const { return (m_TargetPretest & k_Order_TargetPretest_EnemyCity_Bit) != 0; }
    bool             GetTargetPretestOwnCity() const { return (m_TargetPretest & k_Order_TargetPretest_OwnCity_Bit) != 0; }
    bool             GetTargetPretestEnemyArmy() const { return (m_TargetPretest & k_Order_TargetPretest_EnemyArmy_Bit) != 0; }
    bool             GetTargetPretestEnemySpecialUnit() const { return (m_TargetPretest & k_Order_TargetPretest_EnemySpecialUnit_Bit) != 0; }
    bool             GetTargetPretestEnemySettler() const { return (m_TargetPretest & k_Order_TargetPretest_EnemySettler_Bit) != 0; }
    bool             GetTargetPretestEnemyTradeUnit() const { return (m_TargetPretest & k_Order_TargetPretest_EnemyTradeUnit_Bit) != 0; }
    bool             GetTargetPretestTradeRoute() const { return (m_TargetPretest & k_Order_TargetPretest_TradeRoute_Bit) != 0; }
    bool             GetTargetPretestTerrainImprovement() const { return (m_TargetPretest & k_Order_TargetPretest_TerrainImprovement_Bit) != 0; }
    bool             GetTargetPretestMovePosition() const { return (m_TargetPretest & k_Order_TargetPretest_MovePosition_Bit) != 0; }
    bool             GetTargetPretestAttackPosition() const { return (m_TargetPretest & k_Order_TargetPretest_AttackPosition_Bit) != 0; }
    bool             GetTargetPretestTransport() const { return (m_TargetPretest & k_Order_TargetPretest_Transport_Bit) != 0; }
    bool             GetTargetPretestAdjacentPosition() const { return (m_TargetPretest & k_Order_TargetPretest_AdjacentPosition_Bit) != 0; }
    // End TargetPretest flag group
    //
    bool             GetUnitPretest_None() const { return (m_flags0 & k_Order_UnitPretest_None_Bit) != 0; }
    bool             GetUnitPretest_CanAttack() const { return (m_flags0 & k_Order_UnitPretest_CanAttack_Bit) != 0; }
    bool             GetUnitPretest_CanEntrench() const { return (m_flags0 & k_Order_UnitPretest_CanEntrench_Bit) != 0; }
    bool             GetUnitPretest_CanSueFranchise() const { return (m_flags0 & k_Order_UnitPretest_CanSueFranchise_Bit) != 0; }
    bool             GetUnitPretest_CanSue() const { return (m_flags0 & k_Order_UnitPretest_CanSue_Bit) != 0; }
    bool             GetUnitPretest_CanCreateFranchise() const { return (m_flags0 & k_Order_UnitPretest_CanCreateFranchise_Bit) != 0; }
    bool             GetUnitPretest_CanInvestigateCity() const { return (m_flags0 & k_Order_UnitPretest_CanInvestigateCity_Bit) != 0; }
    bool             GetUnitPretest_CanBombard() const { return (m_flags0 & k_Order_UnitPretest_CanBombard_Bit) != 0; }
    bool             GetUnitPretest_CanSettle() const { return (m_flags0 & k_Order_UnitPretest_CanSettle_Bit) != 0; }
    bool             GetUnitPretest_CanStealTechnology() const { return (m_flags0 & k_Order_UnitPretest_CanStealTechnology_Bit) != 0; }
    bool             GetUnitPretest_CanInciteRevolution() const { return (m_flags0 & k_Order_UnitPretest_CanInciteRevolution_Bit) != 0; }
    bool             GetUnitPretest_CanAssassinateRuler() const { return (m_flags0 & k_Order_UnitPretest_CanAssassinateRuler_Bit) != 0; }
    bool             GetUnitPretest_CanExpel() const { return (m_flags0 & k_Order_UnitPretest_CanExpel_Bit) != 0; }
    bool             GetUnitPretest_EstablishEmbassy() const { return (m_flags0 & k_Order_UnitPretest_EstablishEmbassy_Bit) != 0; }
    bool             GetUnitPretest_ThrowParty() const { return (m_flags0 & k_Order_UnitPretest_ThrowParty_Bit) != 0; }
    bool             GetUnitPretest_CanCauseUnhappiness() const { return (m_flags0 & k_Order_UnitPretest_CanCauseUnhappiness_Bit) != 0; }
    bool             GetUnitPretest_CanPlantNuke() const { return (m_flags0 & k_Order_UnitPretest_CanPlantNuke_Bit) != 0; }
    bool             GetUnitPretest_CanSlaveRaid() const { return (m_flags0 & k_Order_UnitPretest_CanSlaveRaid_Bit) != 0; }
    bool             GetUnitPretest_CanEnslaveSettler() const { return (m_flags0 & k_Order_UnitPretest_CanEnslaveSettler_Bit) != 0; }
    bool             GetUnitPretest_CanUndergroundRailway() const { return (m_flags0 & k_Order_UnitPretest_CanUndergroundRailway_Bit) != 0; }
    bool             GetUnitPretest_CanInciteUprising() const { return (m_flags0 & k_Order_UnitPretest_CanInciteUprising_Bit) != 0; }
    bool             GetUnitPretest_CanBioTerror() const { return (m_flags0 & k_Order_UnitPretest_CanBioTerror_Bit) != 0; }
    bool             GetUnitPretest_CanPlague() const { return (m_flags0 & k_Order_UnitPretest_CanPlague_Bit) != 0; }
    bool             GetUnitPretest_CanNanoInfect() const { return (m_flags0 & k_Order_UnitPretest_CanNanoInfect_Bit) != 0; }
    bool             GetUnitPretest_CanConvertCity() const { return (m_flags0 & k_Order_UnitPretest_CanConvertCity_Bit) != 0; }
    bool             GetUnitPretest_CanReformCity() const { return (m_flags0 & k_Order_UnitPretest_CanReformCity_Bit) != 0; }
    bool             GetUnitPretest_CanSellIndulgences() const { return (m_flags0 & k_Order_UnitPretest_CanSellIndulgences_Bit) != 0; }
    bool             GetUnitPretest_CanFaithHeal() const { return (m_flags0 & k_Order_UnitPretest_CanFaithHeal_Bit) != 0; }
    bool             GetUnitPretest_CanSoothsay() const { return (m_flags0 & k_Order_UnitPretest_CanSoothsay_Bit) != 0; }
    bool             GetUnitPretest_CanCreatePark() const { return (m_flags0 & k_Order_UnitPretest_CanCreatePark_Bit) != 0; }
    bool             GetUnitPretest_CanPillage() const { return (m_flags0 & k_Order_UnitPretest_CanPillage_Bit) != 0; }
    bool             GetUnitPretest_CanInjoin() const { return (m_flags0 & k_Order_UnitPretest_CanInjoin_Bit) != 0; }
    bool             GetUnitPretest_CanInterceptTrade() const { return (m_flags1 & k_Order_UnitPretest_CanInterceptTrade_Bit) != 0; }
    bool             GetUnitPretest_CanAdvertise() const { return (m_flags1 & k_Order_UnitPretest_CanAdvertise_Bit) != 0; }
    bool             GetUnitPretest_CanNukeCity() const { return (m_flags1 & k_Order_UnitPretest_CanNukeCity_Bit) != 0; }
    bool             GetUnitPretest_CanTransport() const { return (m_flags1 & k_Order_UnitPretest_CanTransport_Bit) != 0; }
    bool             GetUnitPretest_CanBeTransported() const { return (m_flags1 & k_Order_UnitPretest_CanBeTransported_Bit) != 0; }
    bool             GetUnitPretest_CanLaunch() const { return (m_flags1 & k_Order_UnitPretest_CanLaunch_Bit) != 0; }
    bool             GetUnitPretest_CanTarget() const { return (m_flags1 & k_Order_UnitPretest_CanTarget_Bit) != 0; }
    bool             GetUnitPretest_Invalid() const { return (m_flags1 & k_Order_UnitPretest_Invalid_Bit) != 0; }
    bool             GetRange() const { return (m_flags1 & k_Order_Range_Bit) != 0; }
    bool             GetRange(sint32 &value) const {
                         if((m_flags1 & k_Order_Range_Bit) == 0) return false;
                         value = m_RangeValue;
                         return true;
                     }
    bool             GetIsTeleport() const { return (m_flags1 & k_Order_IsTeleport_Bit) != 0; }
    bool             GetIsTarget() const { return (m_flags1 & k_Order_IsTarget_Bit) != 0; }
    bool             GetGLHidden() const { return (m_flags1 & k_Order_GLHidden_Bit) != 0; }
    const char      *GetCPIcon() const { return m_CPIcon; }
    sint32           GetDefaultIconIndex() const { return m_DefaultIcon; }
    const IconRecord *GetDefaultIcon() const;
    sint32           GetButtonLocation() const { return m_ButtonLocation; }
    sint32           GetCursor() const { return m_Cursor; }
    sint32           GetInvalidCursor() const { return m_InvalidCursor; }
    bool             GetFailSound() const { return (m_flags1 & k_Order_FailSound_Bit) != 0; }
    bool             GetFailSound(sint32 &value) const {
                         if((m_flags1 & k_Order_FailSound_Bit) == 0) return false;
                         value = m_FailSoundValue;
                         return true;
                     }
    bool             GetSound() const { return (m_flags1 & k_Order_Sound_Bit) != 0; }
    bool             GetSound(sint32 &value) const {
                         if((m_flags1 & k_Order_Sound_Bit) == 0) return false;
                         value = m_SoundValue;
                         return true;
                     }
}; /* OrderRecord */

struct OrderRecordAccessorInfo {
    OrderRecord::IntAccessor m_intAccessor;
    OrderRecord::BoolAccessor m_boolAccessor;
    OrderRecord::FloatAccessor m_floatAccessor;
    OrderRecord::BitIntAccessor m_bitIntAccessor;
    OrderRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern OrderRecordAccessorInfo g_OrderRecord_Accessors[];
extern char *g_Order_Tokens[];
#define k_Num_OrderRecord_Tokens 60

template <class T> class CTPDatabase;
extern CTPDatabase<OrderRecord> *g_theOrderDB;

#endif /* ifndef __Order_RECORD_H__ */
