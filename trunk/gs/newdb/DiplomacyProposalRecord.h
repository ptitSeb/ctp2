
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __DiplomacyProposal_RECORD_H__
#define __DiplomacyProposal_RECORD_H__

/*
 * DiplomacyProposal description
 */
#include "CTPRecord.h"
//
// m_flags0
#define k_DiplomacyProposal_Details0_Bit         0x00000001
#define k_DiplomacyProposal_Details1_Bit         0x00000002
#define k_DiplomacyProposal_Details2_Bit         0x00000004
#define k_DiplomacyProposal_Details3_Bit         0x00000008
#define k_DiplomacyProposal_Details4_Bit         0x00000010
#define k_DiplomacyProposal_DetailsEx0_Bit       0x00000020
#define k_DiplomacyProposal_DetailsEx1_Bit       0x00000040
#define k_DiplomacyProposal_DetailsEx2_Bit       0x00000080
#define k_DiplomacyProposal_DetailsEx3_Bit       0x00000100
#define k_DiplomacyProposal_DetailsEx4_Bit       0x00000200
#define k_DiplomacyProposal_Reciprocal_Bit       0x00000400
#define k_DiplomacyProposal_ImageSlot_Bit        0x00000800
#define k_DiplomacyProposal_Disabled_Bit         0x00001000
#define k_DiplomacyProposal_HasAlly_Bit          0x00002000
#define k_DiplomacyProposal_HasBorderIncursion_Bit 0x00004000
#define k_DiplomacyProposal_IsPirating_Bit       0x00008000
#define k_DiplomacyProposal_HasEmbassy_Bit       0x00010000
#define k_DiplomacyProposal_HasHotwar_Bit        0x00020000
#define k_DiplomacyProposal_NoHotwar_Bit         0x00040000
#define k_DiplomacyProposal_HasPeaceTreaty_Bit   0x00080000
#define k_DiplomacyProposal_HasAlliance_Bit      0x00100000
#define k_DiplomacyProposal_HasNuclearWeapons_Bit 0x00200000
#define k_DiplomacyProposal_HasBioWeapons_Bit    0x00400000
#define k_DiplomacyProposal_HasNanoWeapons_Bit   0x00800000
#define k_DiplomacyProposal_HasEmbargo_Bit       0x01000000
#define k_DiplomacyProposal_HasMilitaryAgreement_Bit 0x02000000
#define k_DiplomacyProposal_HasPollutionAgreement_Bit 0x04000000
#define k_DiplomacyProposal_HasPollution_Bit     0x08000000
#define k_DiplomacyProposal_TrustViolationGlobal_Bit 0x10000000
//
// m_Category bit group
#define k_DiplomacyProposal_Category_Request_Bit 0x00000001
#define k_DiplomacyProposal_Category_Treaty_Bit  0x00000002
#define k_DiplomacyProposal_Category_Gift_Bit    0x00000004
//
// m_Arg1 bit group
#define k_DiplomacyProposal_Arg1_OwnCity_Bit     0x00000001
#define k_DiplomacyProposal_Arg1_HisCity_Bit     0x00000002
#define k_DiplomacyProposal_Arg1_OwnArmy_Bit     0x00000004
#define k_DiplomacyProposal_Arg1_HisArmy_Bit     0x00000008
#define k_DiplomacyProposal_Arg1_HisAgreement_Bit 0x00000010
#define k_DiplomacyProposal_Arg1_OwnAdvance_Bit  0x00000020
#define k_DiplomacyProposal_Arg1_HisAdvance_Bit  0x00000040
#define k_DiplomacyProposal_Arg1_OwnStopResearch_Bit 0x00000080
#define k_DiplomacyProposal_Arg1_HisStopResearch_Bit 0x00000100
#define k_DiplomacyProposal_Arg1_OwnUnitType_Bit 0x00000200
#define k_DiplomacyProposal_Arg1_OwnGood_Bit     0x00000400
#define k_DiplomacyProposal_Arg1_HisGood_Bit     0x00000800
#define k_DiplomacyProposal_Arg1_ThirdParty_Bit  0x00001000
#define k_DiplomacyProposal_Arg1_OwnGold_Bit     0x00002000
#define k_DiplomacyProposal_Arg1_HisGold_Bit     0x00004000
#define k_DiplomacyProposal_Arg1_OwnPollution_Bit 0x00008000
#define k_DiplomacyProposal_Arg1_HisPollution_Bit 0x00010000
#define k_DiplomacyProposal_Arg1_Percent_Bit     0x00020000
//
// m_Class bit group
#define k_DiplomacyProposal_Class_Request_Bit    0x00000001
#define k_DiplomacyProposal_Class_Treaty_Bit     0x00000002
#define k_DiplomacyProposal_Class_Offer_Bit      0x00000004
//
// m_Excludes bit group
#define k_DiplomacyProposal_Excludes_Request_Bit 0x00000001
#define k_DiplomacyProposal_Excludes_Treaty_Bit  0x00000002
#define k_DiplomacyProposal_Excludes_Offer_Bit   0x00000004
//
// m_flags0
#define k_StrengthStrings_DetailsWeak_Bit        0x00000001
#define k_StrengthStrings_DetailsEven_Bit        0x00000002
#define k_StrengthStrings_DetailsStrong_Bit      0x00000004
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class DiplomacyProposalRecord;

class DiplomacyProposalRecord : public CTPRecord
{
public:
    typedef sint32 (DiplomacyProposalRecord::*IntAccessor)() const;
    typedef bool (DiplomacyProposalRecord::*BoolAccessor)() const;
    typedef double (DiplomacyProposalRecord::*FloatAccessor)() const ;
    typedef bool (DiplomacyProposalRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (DiplomacyProposalRecord::*BitFloatAccessor)(double &val) const;
    class StrengthStrings {
    private:
        uint32 m_flags0;

        sint32            m_DetailsWeakValue;
        sint32            m_DetailsEvenValue;
        sint32            m_DetailsStrongValue;
    public:
        StrengthStrings();
        ~StrengthStrings();
        void operator=(const StrengthStrings & rval);
        bool operator==(const StrengthStrings & rval) { 
          return false; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, StrengthStrings **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, StrengthStrings *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        bool             GetDetailsWeak() const { return (m_flags0 & k_StrengthStrings_DetailsWeak_Bit) != 0; }
    bool             GetDetailsWeak(sint32 &value) const {
                         if((m_flags0 & k_StrengthStrings_DetailsWeak_Bit) == 0) return false;
                         value = m_DetailsWeakValue;
                         return true;
                     }
        bool             GetDetailsEven() const { return (m_flags0 & k_StrengthStrings_DetailsEven_Bit) != 0; }
    bool             GetDetailsEven(sint32 &value) const {
                         if((m_flags0 & k_StrengthStrings_DetailsEven_Bit) == 0) return false;
                         value = m_DetailsEvenValue;
                         return true;
                     }
        bool             GetDetailsStrong() const { return (m_flags0 & k_StrengthStrings_DetailsStrong_Bit) != 0; }
    bool             GetDetailsStrong(sint32 &value) const {
                         if((m_flags0 & k_StrengthStrings_DetailsStrong_Bit) == 0) return false;
                         value = m_DetailsStrongValue;
                         return true;
                     }
    }; /* class StrengthStrings */

private:
    uint32 m_flags0;

    sint32            m_Title;
    uint32            m_Category;
    char            * m_Type;
    uint32            m_Arg1;
    StrengthStrings   m_Details0Value;
    StrengthStrings   m_Details1Value;
    StrengthStrings   m_Details2Value;
    StrengthStrings   m_Details3Value;
    StrengthStrings   m_Details4Value;
    StrengthStrings   m_DetailsEx0Value;
    StrengthStrings   m_DetailsEx1Value;
    StrengthStrings   m_DetailsEx2Value;
    StrengthStrings   m_DetailsEx3Value;
    StrengthStrings   m_DetailsEx4Value;
    uint32            m_Class;
    uint32            m_Excludes;
    sint32            m_ReciprocalValue; // Index into DiplomacyProposal database
    char            * m_Image;
    sint32            m_ImageSlotValue;

public:
    DiplomacyProposalRecord() { Init(); };
    ~DiplomacyProposalRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    DiplomacyProposalRecord(const DiplomacyProposalRecord &rval) { Init(); *this = rval; }
    void operator=(const DiplomacyProposalRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const DiplomacyProposalRecord & rval);
    sint32 ParseCategoryBit(DBLexer *lex);
    sint32 ParseArg1Bit(DBLexer *lex);
    sint32 ParseClassBit(DBLexer *lex);
    sint32 ParseExcludesBit(DBLexer *lex);
    //
    // Accessors
    //
    sint32           GetTitle() const { return m_Title; }

    //
    // Category flag group
    uint32           GetCategory() const { return m_Category; }
    bool             GetCategoryRequest() const { return (m_Category & k_DiplomacyProposal_Category_Request_Bit) != 0; }
    bool             GetCategoryTreaty() const { return (m_Category & k_DiplomacyProposal_Category_Treaty_Bit) != 0; }
    bool             GetCategoryGift() const { return (m_Category & k_DiplomacyProposal_Category_Gift_Bit) != 0; }
    // End Category flag group
    //
    const char      *GetType() const { return m_Type; }

    //
    // Arg1 flag group
    uint32           GetArg1() const { return m_Arg1; }
    bool             GetArg1OwnCity() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_OwnCity_Bit) != 0; }
    bool             GetArg1HisCity() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_HisCity_Bit) != 0; }
    bool             GetArg1OwnArmy() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_OwnArmy_Bit) != 0; }
    bool             GetArg1HisArmy() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_HisArmy_Bit) != 0; }
    bool             GetArg1HisAgreement() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_HisAgreement_Bit) != 0; }
    bool             GetArg1OwnAdvance() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_OwnAdvance_Bit) != 0; }
    bool             GetArg1HisAdvance() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_HisAdvance_Bit) != 0; }
    bool             GetArg1OwnStopResearch() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_OwnStopResearch_Bit) != 0; }
    bool             GetArg1HisStopResearch() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_HisStopResearch_Bit) != 0; }
    bool             GetArg1OwnUnitType() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_OwnUnitType_Bit) != 0; }
    bool             GetArg1OwnGood() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_OwnGood_Bit) != 0; }
    bool             GetArg1HisGood() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_HisGood_Bit) != 0; }
    bool             GetArg1ThirdParty() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_ThirdParty_Bit) != 0; }
    bool             GetArg1OwnGold() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_OwnGold_Bit) != 0; }
    bool             GetArg1HisGold() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_HisGold_Bit) != 0; }
    bool             GetArg1OwnPollution() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_OwnPollution_Bit) != 0; }
    bool             GetArg1HisPollution() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_HisPollution_Bit) != 0; }
    bool             GetArg1Percent() const { return (m_Arg1 & k_DiplomacyProposal_Arg1_Percent_Bit) != 0; }
    // End Arg1 flag group
    //
    bool             GetDetails0() const { return (m_flags0 & k_DiplomacyProposal_Details0_Bit) != 0; }
    bool             GetDetails0(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_Details0_Bit) == 0) return false;
                         ptr = &m_Details0Value;
                         return true;
                     }
    const StrengthStrings        *GetDetails0Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_Details0_Bit) == 0) return NULL;
                         return &m_Details0Value;
                     }
    bool             GetDetails1() const { return (m_flags0 & k_DiplomacyProposal_Details1_Bit) != 0; }
    bool             GetDetails1(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_Details1_Bit) == 0) return false;
                         ptr = &m_Details1Value;
                         return true;
                     }
    const StrengthStrings        *GetDetails1Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_Details1_Bit) == 0) return NULL;
                         return &m_Details1Value;
                     }
    bool             GetDetails2() const { return (m_flags0 & k_DiplomacyProposal_Details2_Bit) != 0; }
    bool             GetDetails2(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_Details2_Bit) == 0) return false;
                         ptr = &m_Details2Value;
                         return true;
                     }
    const StrengthStrings        *GetDetails2Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_Details2_Bit) == 0) return NULL;
                         return &m_Details2Value;
                     }
    bool             GetDetails3() const { return (m_flags0 & k_DiplomacyProposal_Details3_Bit) != 0; }
    bool             GetDetails3(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_Details3_Bit) == 0) return false;
                         ptr = &m_Details3Value;
                         return true;
                     }
    const StrengthStrings        *GetDetails3Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_Details3_Bit) == 0) return NULL;
                         return &m_Details3Value;
                     }
    bool             GetDetails4() const { return (m_flags0 & k_DiplomacyProposal_Details4_Bit) != 0; }
    bool             GetDetails4(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_Details4_Bit) == 0) return false;
                         ptr = &m_Details4Value;
                         return true;
                     }
    const StrengthStrings        *GetDetails4Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_Details4_Bit) == 0) return NULL;
                         return &m_Details4Value;
                     }
    bool             GetDetailsEx0() const { return (m_flags0 & k_DiplomacyProposal_DetailsEx0_Bit) != 0; }
    bool             GetDetailsEx0(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx0_Bit) == 0) return false;
                         ptr = &m_DetailsEx0Value;
                         return true;
                     }
    const StrengthStrings        *GetDetailsEx0Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx0_Bit) == 0) return NULL;
                         return &m_DetailsEx0Value;
                     }
    bool             GetDetailsEx1() const { return (m_flags0 & k_DiplomacyProposal_DetailsEx1_Bit) != 0; }
    bool             GetDetailsEx1(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx1_Bit) == 0) return false;
                         ptr = &m_DetailsEx1Value;
                         return true;
                     }
    const StrengthStrings        *GetDetailsEx1Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx1_Bit) == 0) return NULL;
                         return &m_DetailsEx1Value;
                     }
    bool             GetDetailsEx2() const { return (m_flags0 & k_DiplomacyProposal_DetailsEx2_Bit) != 0; }
    bool             GetDetailsEx2(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx2_Bit) == 0) return false;
                         ptr = &m_DetailsEx2Value;
                         return true;
                     }
    const StrengthStrings        *GetDetailsEx2Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx2_Bit) == 0) return NULL;
                         return &m_DetailsEx2Value;
                     }
    bool             GetDetailsEx3() const { return (m_flags0 & k_DiplomacyProposal_DetailsEx3_Bit) != 0; }
    bool             GetDetailsEx3(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx3_Bit) == 0) return false;
                         ptr = &m_DetailsEx3Value;
                         return true;
                     }
    const StrengthStrings        *GetDetailsEx3Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx3_Bit) == 0) return NULL;
                         return &m_DetailsEx3Value;
                     }
    bool             GetDetailsEx4() const { return (m_flags0 & k_DiplomacyProposal_DetailsEx4_Bit) != 0; }
    bool             GetDetailsEx4(const StrengthStrings *&ptr) const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx4_Bit) == 0) return false;
                         ptr = &m_DetailsEx4Value;
                         return true;
                     }
    const StrengthStrings        *GetDetailsEx4Ptr() const {
                         if((m_flags0 & k_DiplomacyProposal_DetailsEx4_Bit) == 0) return NULL;
                         return &m_DetailsEx4Value;
                     }

    //
    // Class flag group
    uint32           GetClass() const { return m_Class; }
    bool             GetClassRequest() const { return (m_Class & k_DiplomacyProposal_Class_Request_Bit) != 0; }
    bool             GetClassTreaty() const { return (m_Class & k_DiplomacyProposal_Class_Treaty_Bit) != 0; }
    bool             GetClassOffer() const { return (m_Class & k_DiplomacyProposal_Class_Offer_Bit) != 0; }
    // End Class flag group
    //

    //
    // Excludes flag group
    uint32           GetExcludes() const { return m_Excludes; }
    bool             GetExcludesRequest() const { return (m_Excludes & k_DiplomacyProposal_Excludes_Request_Bit) != 0; }
    bool             GetExcludesTreaty() const { return (m_Excludes & k_DiplomacyProposal_Excludes_Treaty_Bit) != 0; }
    bool             GetExcludesOffer() const { return (m_Excludes & k_DiplomacyProposal_Excludes_Offer_Bit) != 0; }
    // End Excludes flag group
    //
    bool             GetReciprocal() const { return (m_flags0 & k_DiplomacyProposal_Reciprocal_Bit) != 0; }
    bool             GetReciprocalIndex(sint32 &index) const {
                         if((m_flags0 & k_DiplomacyProposal_Reciprocal_Bit) == 0) return false;
                         index = m_ReciprocalValue;
                         return true;
                     }
    bool             GetReciprocal(const DiplomacyProposalRecord *&rec) const;
    const DiplomacyProposalRecord  *GetReciprocalPtr() const;
    const char      *GetImage() const { return m_Image; }
    bool             GetImageSlot() const { return (m_flags0 & k_DiplomacyProposal_ImageSlot_Bit) != 0; }
    bool             GetImageSlot(sint32 &value) const {
                         if((m_flags0 & k_DiplomacyProposal_ImageSlot_Bit) == 0) return false;
                         value = m_ImageSlotValue;
                         return true;
                     }
    bool             GetDisabled() const { return (m_flags0 & k_DiplomacyProposal_Disabled_Bit) != 0; }
    bool             GetHasAlly() const { return (m_flags0 & k_DiplomacyProposal_HasAlly_Bit) != 0; }
    bool             GetHasBorderIncursion() const { return (m_flags0 & k_DiplomacyProposal_HasBorderIncursion_Bit) != 0; }
    bool             GetIsPirating() const { return (m_flags0 & k_DiplomacyProposal_IsPirating_Bit) != 0; }
    bool             GetHasEmbassy() const { return (m_flags0 & k_DiplomacyProposal_HasEmbassy_Bit) != 0; }
    bool             GetHasHotwar() const { return (m_flags0 & k_DiplomacyProposal_HasHotwar_Bit) != 0; }
    bool             GetNoHotwar() const { return (m_flags0 & k_DiplomacyProposal_NoHotwar_Bit) != 0; }
    bool             GetHasPeaceTreaty() const { return (m_flags0 & k_DiplomacyProposal_HasPeaceTreaty_Bit) != 0; }
    bool             GetHasAlliance() const { return (m_flags0 & k_DiplomacyProposal_HasAlliance_Bit) != 0; }
    bool             GetHasNuclearWeapons() const { return (m_flags0 & k_DiplomacyProposal_HasNuclearWeapons_Bit) != 0; }
    bool             GetHasBioWeapons() const { return (m_flags0 & k_DiplomacyProposal_HasBioWeapons_Bit) != 0; }
    bool             GetHasNanoWeapons() const { return (m_flags0 & k_DiplomacyProposal_HasNanoWeapons_Bit) != 0; }
    bool             GetHasEmbargo() const { return (m_flags0 & k_DiplomacyProposal_HasEmbargo_Bit) != 0; }
    bool             GetHasMilitaryAgreement() const { return (m_flags0 & k_DiplomacyProposal_HasMilitaryAgreement_Bit) != 0; }
    bool             GetHasPollutionAgreement() const { return (m_flags0 & k_DiplomacyProposal_HasPollutionAgreement_Bit) != 0; }
    bool             GetHasPollution() const { return (m_flags0 & k_DiplomacyProposal_HasPollution_Bit) != 0; }
    bool             GetTrustViolationGlobal() const { return (m_flags0 & k_DiplomacyProposal_TrustViolationGlobal_Bit) != 0; }
}; /* DiplomacyProposalRecord */

struct DiplomacyProposalRecordAccessorInfo {
    DiplomacyProposalRecord::IntAccessor m_intAccessor;
    DiplomacyProposalRecord::BoolAccessor m_boolAccessor;
    DiplomacyProposalRecord::FloatAccessor m_floatAccessor;
    DiplomacyProposalRecord::BitIntAccessor m_bitIntAccessor;
    DiplomacyProposalRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern DiplomacyProposalRecordAccessorInfo g_DiplomacyProposalRecord_Accessors[];
extern char *g_DiplomacyProposal_Tokens[];
#define k_Num_DiplomacyProposalRecord_Tokens 48

template <class T> class CTPDatabase;
extern CTPDatabase<DiplomacyProposalRecord> *g_theDiplomacyProposalDB;

#endif /* ifndef __DiplomacyProposal_RECORD_H__ */
