
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Feat_RECORD_H__
#define __Feat_RECORD_H__

/*
 * Feat description
 */
#include "CTPRecord.h"
//
// m_flags0
#define k_Feat_SlicMessage_Bit                   0x00000001
#define k_Feat_EffectBoatMovement_Bit            0x00000002
#define k_Feat_EffectCityDefenseBonus_Bit        0x00000004
#define k_Feat_EffectReduceCityWalls_Bit         0x00000008
#define k_Feat_EffectIncreaseCityVision_Bit      0x00000010
#define k_Feat_EffectIncreaseProduction_Bit      0x00000020
#define k_Feat_EffectIncreaseCommerce_Bit        0x00000040
#define k_Feat_EffectIncreaseHappiness_Bit       0x00000080
#define k_Feat_EffectEliminateDistancePenalty_Bit 0x00000100
#define k_Feat_EffectIncreaseBoatVision_Bit      0x00000200
#define k_Feat_EffectIncreaseScience_Bit         0x00000400
#define k_Feat_EffectGiveMaps_Bit                0x00000800
#define k_Feat_EffectIncreaseHitPoints_Bit       0x00001000
#define k_Feat_EffectScriptedTurn_Bit            0x00002000
#define k_Feat_EffectScriptedCity_Bit            0x00004000
#define k_Feat_ExcludeFunction_Bit               0x00008000
#define k_Feat_CancelFunction_Bit                0x00010000
#define k_Feat_Building_Bit                      0x00020000
#define k_Feat_MinimumSizeOfCiv_Bit              0x00040000
//
// m_flags0
#define k_BuildingFeat_Num_Bit                   0x00000001
#define k_BuildingFeat_PercentCities_Bit         0x00000002
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class AdvanceRecord;
class WonderRecord;
class FeatRecord;
class AdvanceRecord;
class WonderRecord;
class FeatRecord;
class BuildingRecord;

class FeatRecord : public CTPRecord
{
public:
    typedef sint32 (FeatRecord::*IntAccessor)() const;
    typedef bool (FeatRecord::*BoolAccessor)() const;
    typedef double (FeatRecord::*FloatAccessor)() const ;
    typedef bool (FeatRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (FeatRecord::*BitFloatAccessor)(double &val) const;
    class BuildingFeat {
    private:
        uint32 m_flags0;

        sint32            m_Building; // Index into Building database
        sint32            m_NumValue;
        sint32            m_PercentCitiesValue;
    public:
        BuildingFeat();
        ~BuildingFeat();
        void operator=(const BuildingFeat & rval);
        bool operator==(const BuildingFeat & rval) { 
          if (m_Building != rval.m_Building) 
             return false; 
          return true; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, BuildingFeat **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, BuildingFeat *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        sint32           GetBuildingIndex() const { return m_Building; }
    const BuildingRecord *GetBuilding() const;
        bool             GetNum() const { return (m_flags0 & k_BuildingFeat_Num_Bit) != 0; }
    bool             GetNum(sint32 &value) const {
                         if((m_flags0 & k_BuildingFeat_Num_Bit) == 0) return false;
                         value = m_NumValue;
                         return true;
                     }
        bool             GetPercentCities() const { return (m_flags0 & k_BuildingFeat_PercentCities_Bit) != 0; }
    bool             GetPercentCities(sint32 &value) const {
                         if((m_flags0 & k_BuildingFeat_PercentCities_Bit) == 0) return false;
                         value = m_PercentCitiesValue;
                         return true;
                     }
    }; /* class BuildingFeat */

private:
    uint32 m_flags0;

    sint32            m_Duration;
    sint32            m_Description;
    char            * m_SlicMessageValue;
    sint32            m_EffectBoatMovementValue;
    sint32            m_EffectCityDefenseBonusValue;
    sint32            m_EffectReduceCityWallsValue;
    sint32            m_EffectIncreaseCityVisionValue;
    sint32            m_EffectIncreaseProductionValue;
    sint32            m_EffectIncreaseCommerceValue;
    sint32            m_EffectIncreaseHappinessValue;
    sint32            m_EffectEliminateDistancePenaltyValue;
    sint32            m_EffectIncreaseBoatVisionValue;
    sint32            m_EffectIncreaseScienceValue;
    sint32            m_EffectIncreaseHitPointsValue;
    char            * m_EffectScriptedTurnValue;
    char            * m_EffectScriptedCityValue;
    sint32           *m_ExcludeAdvance; // Index into Advance database
    sint32           m_numExcludeAdvance;
    sint32           *m_ExcludeWonder; // Index into Wonder database
    sint32           m_numExcludeWonder;
    sint32           *m_ExcludeFeat; // Index into Feat database
    sint32           m_numExcludeFeat;
    char            * m_ExcludeFunctionValue;
    sint32           *m_CancelAdvance; // Index into Advance database
    sint32           m_numCancelAdvance;
    sint32           *m_CancelWonder; // Index into Wonder database
    sint32           m_numCancelWonder;
    sint32           *m_CancelFeat; // Index into Feat database
    sint32           m_numCancelFeat;
    char            * m_CancelFunctionValue;
    BuildingFeat      m_BuildingValue;
    sint32            m_MinimumSizeOfCivValue;

public:
    FeatRecord() { Init(); };
    ~FeatRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    FeatRecord(const FeatRecord &rval) { Init(); *this = rval; }
    void operator=(const FeatRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const FeatRecord & rval);
    //
    // Accessors
    //
    sint32           GetDuration() const { return m_Duration; }
    sint32           GetDescription() const { return m_Description; }
    bool             GetSlicMessage() const { return (m_flags0 & k_Feat_SlicMessage_Bit) != 0; }
    bool             GetSlicMessage(const char *&text) const {
                         if((m_flags0 & k_Feat_SlicMessage_Bit) == 0) return false;
                         text = m_SlicMessageValue;
                         return true;
                     }
    bool             GetEffectBoatMovement() const { return (m_flags0 & k_Feat_EffectBoatMovement_Bit) != 0; }
    bool             GetEffectBoatMovement(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectBoatMovement_Bit) == 0) return false;
                         value = m_EffectBoatMovementValue;
                         return true;
                     }
    bool             GetEffectCityDefenseBonus() const { return (m_flags0 & k_Feat_EffectCityDefenseBonus_Bit) != 0; }
    bool             GetEffectCityDefenseBonus(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectCityDefenseBonus_Bit) == 0) return false;
                         value = m_EffectCityDefenseBonusValue;
                         return true;
                     }
    bool             GetEffectReduceCityWalls() const { return (m_flags0 & k_Feat_EffectReduceCityWalls_Bit) != 0; }
    bool             GetEffectReduceCityWalls(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectReduceCityWalls_Bit) == 0) return false;
                         value = m_EffectReduceCityWallsValue;
                         return true;
                     }
    bool             GetEffectIncreaseCityVision() const { return (m_flags0 & k_Feat_EffectIncreaseCityVision_Bit) != 0; }
    bool             GetEffectIncreaseCityVision(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectIncreaseCityVision_Bit) == 0) return false;
                         value = m_EffectIncreaseCityVisionValue;
                         return true;
                     }
    bool             GetEffectIncreaseProduction() const { return (m_flags0 & k_Feat_EffectIncreaseProduction_Bit) != 0; }
    bool             GetEffectIncreaseProduction(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectIncreaseProduction_Bit) == 0) return false;
                         value = m_EffectIncreaseProductionValue;
                         return true;
                     }
    bool             GetEffectIncreaseCommerce() const { return (m_flags0 & k_Feat_EffectIncreaseCommerce_Bit) != 0; }
    bool             GetEffectIncreaseCommerce(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectIncreaseCommerce_Bit) == 0) return false;
                         value = m_EffectIncreaseCommerceValue;
                         return true;
                     }
    bool             GetEffectIncreaseHappiness() const { return (m_flags0 & k_Feat_EffectIncreaseHappiness_Bit) != 0; }
    bool             GetEffectIncreaseHappiness(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectIncreaseHappiness_Bit) == 0) return false;
                         value = m_EffectIncreaseHappinessValue;
                         return true;
                     }
    bool             GetEffectEliminateDistancePenalty() const { return (m_flags0 & k_Feat_EffectEliminateDistancePenalty_Bit) != 0; }
    bool             GetEffectEliminateDistancePenalty(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectEliminateDistancePenalty_Bit) == 0) return false;
                         value = m_EffectEliminateDistancePenaltyValue;
                         return true;
                     }
    bool             GetEffectIncreaseBoatVision() const { return (m_flags0 & k_Feat_EffectIncreaseBoatVision_Bit) != 0; }
    bool             GetEffectIncreaseBoatVision(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectIncreaseBoatVision_Bit) == 0) return false;
                         value = m_EffectIncreaseBoatVisionValue;
                         return true;
                     }
    bool             GetEffectIncreaseScience() const { return (m_flags0 & k_Feat_EffectIncreaseScience_Bit) != 0; }
    bool             GetEffectIncreaseScience(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectIncreaseScience_Bit) == 0) return false;
                         value = m_EffectIncreaseScienceValue;
                         return true;
                     }
    bool             GetEffectGiveMaps() const { return (m_flags0 & k_Feat_EffectGiveMaps_Bit) != 0; }
    bool             GetEffectIncreaseHitPoints() const { return (m_flags0 & k_Feat_EffectIncreaseHitPoints_Bit) != 0; }
    bool             GetEffectIncreaseHitPoints(sint32 &value) const {
                         if((m_flags0 & k_Feat_EffectIncreaseHitPoints_Bit) == 0) return false;
                         value = m_EffectIncreaseHitPointsValue;
                         return true;
                     }
    bool             GetEffectScriptedTurn() const { return (m_flags0 & k_Feat_EffectScriptedTurn_Bit) != 0; }
    bool             GetEffectScriptedTurn(const char *&text) const {
                         if((m_flags0 & k_Feat_EffectScriptedTurn_Bit) == 0) return false;
                         text = m_EffectScriptedTurnValue;
                         return true;
                     }
    bool             GetEffectScriptedCity() const { return (m_flags0 & k_Feat_EffectScriptedCity_Bit) != 0; }
    bool             GetEffectScriptedCity(const char *&text) const {
                         if((m_flags0 & k_Feat_EffectScriptedCity_Bit) == 0) return false;
                         text = m_EffectScriptedCityValue;
                         return true;
                     }
    sint32           GetExcludeAdvanceIndex(sint32 index) const;
    const AdvanceRecord *GetExcludeAdvance(sint32 index) const;
    sint32           GetNumExcludeAdvance() const { return m_numExcludeAdvance;}
    sint32           GetExcludeWonderIndex(sint32 index) const;
    const WonderRecord *GetExcludeWonder(sint32 index) const;
    sint32           GetNumExcludeWonder() const { return m_numExcludeWonder;}
    sint32           GetExcludeFeatIndex(sint32 index) const;
    const FeatRecord *GetExcludeFeat(sint32 index) const;
    sint32           GetNumExcludeFeat() const { return m_numExcludeFeat;}
    bool             GetExcludeFunction() const { return (m_flags0 & k_Feat_ExcludeFunction_Bit) != 0; }
    bool             GetExcludeFunction(const char *&text) const {
                         if((m_flags0 & k_Feat_ExcludeFunction_Bit) == 0) return false;
                         text = m_ExcludeFunctionValue;
                         return true;
                     }
    sint32           GetCancelAdvanceIndex(sint32 index) const;
    const AdvanceRecord *GetCancelAdvance(sint32 index) const;
    sint32           GetNumCancelAdvance() const { return m_numCancelAdvance;}
    sint32           GetCancelWonderIndex(sint32 index) const;
    const WonderRecord *GetCancelWonder(sint32 index) const;
    sint32           GetNumCancelWonder() const { return m_numCancelWonder;}
    sint32           GetCancelFeatIndex(sint32 index) const;
    const FeatRecord *GetCancelFeat(sint32 index) const;
    sint32           GetNumCancelFeat() const { return m_numCancelFeat;}
    bool             GetCancelFunction() const { return (m_flags0 & k_Feat_CancelFunction_Bit) != 0; }
    bool             GetCancelFunction(const char *&text) const {
                         if((m_flags0 & k_Feat_CancelFunction_Bit) == 0) return false;
                         text = m_CancelFunctionValue;
                         return true;
                     }
    bool             GetBuilding() const { return (m_flags0 & k_Feat_Building_Bit) != 0; }
    bool             GetBuilding(const BuildingFeat *&ptr) const {
                         if((m_flags0 & k_Feat_Building_Bit) == 0) return false;
                         ptr = &m_BuildingValue;
                         return true;
                     }
    const BuildingFeat        *GetBuildingPtr() const {
                         if((m_flags0 & k_Feat_Building_Bit) == 0) return NULL;
                         return &m_BuildingValue;
                     }
    bool             GetMinimumSizeOfCiv() const { return (m_flags0 & k_Feat_MinimumSizeOfCiv_Bit) != 0; }
    bool             GetMinimumSizeOfCiv(sint32 &value) const {
                         if((m_flags0 & k_Feat_MinimumSizeOfCiv_Bit) == 0) return false;
                         value = m_MinimumSizeOfCivValue;
                         return true;
                     }
}; /* FeatRecord */

struct FeatRecordAccessorInfo {
    FeatRecord::IntAccessor m_intAccessor;
    FeatRecord::BoolAccessor m_boolAccessor;
    FeatRecord::FloatAccessor m_floatAccessor;
    FeatRecord::BitIntAccessor m_bitIntAccessor;
    FeatRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern FeatRecordAccessorInfo g_FeatRecord_Accessors[];
extern char *g_Feat_Tokens[];
#define k_Num_FeatRecord_Tokens 45

template <class T> class CTPDatabase;
extern CTPDatabase<FeatRecord> *g_theFeatDB;

#endif /* ifndef __Feat_RECORD_H__ */
