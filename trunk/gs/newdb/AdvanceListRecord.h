
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __AdvanceList_RECORD_H__
#define __AdvanceList_RECORD_H__

/*
 * AdvanceList description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class AdvanceRecord;

class AdvanceListRecord : public CTPRecord
{
public:
    typedef sint32 (AdvanceListRecord::*IntAccessor)() const;
    typedef bool (AdvanceListRecord::*BoolAccessor)() const;
    typedef double (AdvanceListRecord::*FloatAccessor)() const ;
    typedef bool (AdvanceListRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (AdvanceListRecord::*BitFloatAccessor)(double &val) const;
private:
    sint32           *m_Advance; // Index into Advance database
    sint32           m_numAdvance;

public:
    AdvanceListRecord() { Init(); };
    ~AdvanceListRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    AdvanceListRecord(const AdvanceListRecord &rval) { Init(); *this = rval; }
    void operator=(const AdvanceListRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const AdvanceListRecord & rval);
    //
    // Accessors
    //
    sint32           GetAdvanceIndex(sint32 index) const;
    const AdvanceRecord *GetAdvance(sint32 index) const;
    sint32           GetNumAdvance() const { return m_numAdvance;}
}; /* AdvanceListRecord */

struct AdvanceListRecordAccessorInfo {
    AdvanceListRecord::IntAccessor m_intAccessor;
    AdvanceListRecord::BoolAccessor m_boolAccessor;
    AdvanceListRecord::FloatAccessor m_floatAccessor;
    AdvanceListRecord::BitIntAccessor m_bitIntAccessor;
    AdvanceListRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern AdvanceListRecordAccessorInfo g_AdvanceListRecord_Accessors[];
extern char *g_AdvanceList_Tokens[];
#define k_Num_AdvanceListRecord_Tokens 1

template <class T> class CTPDatabase;
extern CTPDatabase<AdvanceListRecord> *g_theAdvanceListDB;

#endif /* ifndef __AdvanceList_RECORD_H__ */
