
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __ImprovementList_RECORD_H__
#define __ImprovementList_RECORD_H__

/*
 * ImprovementList description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class TerrainImprovementRecord;

class ImprovementListRecord : public CTPRecord
{
public:
    typedef sint32 (ImprovementListRecord::*IntAccessor)() const;
    typedef bool (ImprovementListRecord::*BoolAccessor)() const;
    typedef double (ImprovementListRecord::*FloatAccessor)() const ;
    typedef bool (ImprovementListRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (ImprovementListRecord::*BitFloatAccessor)(double &val) const;
private:
    sint32           *m_Improvement; // Index into TerrainImprovement database
    sint32           m_numImprovement;

public:
    ImprovementListRecord() { Init(); };
    ~ImprovementListRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    ImprovementListRecord(const ImprovementListRecord &rval) { Init(); *this = rval; }
    void operator=(const ImprovementListRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const ImprovementListRecord & rval);
    //
    // Accessors
    //
    sint32           GetImprovementIndex(sint32 index) const;
    const TerrainImprovementRecord *GetImprovement(sint32 index) const;
    sint32           GetNumImprovement() const { return m_numImprovement;}
}; /* ImprovementListRecord */

struct ImprovementListRecordAccessorInfo {
    ImprovementListRecord::IntAccessor m_intAccessor;
    ImprovementListRecord::BoolAccessor m_boolAccessor;
    ImprovementListRecord::FloatAccessor m_floatAccessor;
    ImprovementListRecord::BitIntAccessor m_bitIntAccessor;
    ImprovementListRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern ImprovementListRecordAccessorInfo g_ImprovementListRecord_Accessors[];
extern char *g_ImprovementList_Tokens[];
#define k_Num_ImprovementListRecord_Tokens 1

template <class T> class CTPDatabase;
extern CTPDatabase<ImprovementListRecord> *g_theImprovementListDB;

#endif /* ifndef __ImprovementList_RECORD_H__ */
