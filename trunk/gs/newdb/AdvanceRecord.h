
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Advance_RECORD_H__
#define __Advance_RECORD_H__

/*
 * Advance description
 */
#include "CTPRecord.h"
//
// m_flags0
#define k_Advance_DeepOcean_Bit                  0x00000001
#define k_Advance_Capitalization_Bit             0x00000002
#define k_Advance_Infrastructure_Bit             0x00000004
#define k_Advance_Transform_Bit                  0x00000008
#define k_Advance_RequiresProbeRecovery_Bit      0x00000010
#define k_Advance_Genetic_Bit                    0x00000020
#define k_Advance_PlantNuke_Bit                  0x00000040
#define k_Advance_NoIndex_Bit                    0x00000080
#define k_Advance_Roads_Bit                      0x00000100
#define k_Advance_Railroads_Bit                  0x00000200
#define k_Advance_AlienLife_Bit                  0x00000400
#define k_Advance_MagLev_Bit                     0x00000800
#define k_Advance_Tunnels_Bit                    0x00001000
#define k_Advance_GLHidden_Bit                   0x00002000
#define k_Advance_PollutionSizeModifier_Bit      0x00004000
#define k_Advance_PollutionProductionModifier_Bit 0x00008000
#define k_Advance_TriggerFeat_Bit                0x00010000
#define k_Advance_KeyAdvanceAdvice_Bit           0x00020000
//
// Range definitions
#define k_MAX_Prerequisites                  4

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class AdvanceRecord;
class AdvanceRecord;
class AdvanceRecord;
class IconRecord;
class AdvanceBranchRecord;
class AgeRecord;
class FeatRecord;

class AdvanceRecord : public CTPRecord
{
public:
    typedef sint32 (AdvanceRecord::*IntAccessor)() const;
    typedef bool (AdvanceRecord::*BoolAccessor)() const;
    typedef double (AdvanceRecord::*FloatAccessor)() const ;
    typedef bool (AdvanceRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (AdvanceRecord::*BitFloatAccessor)(double &val) const;
private:
    uint32 m_flags0;

    sint32            m_Cost;
    sint32            m_Prerequisites[k_MAX_Prerequisites]; // Index into Advance database
    sint32           m_numPrerequisites;
    sint32           *m_Dependencies; // Index into Advance database
    sint32           m_numDependencies;
    sint32           *m_LeadsTo; // Index into Advance database
    sint32           m_numLeadsTo;
    sint32            m_Icon; // Index into Icon database
    sint32            m_Branch; // Index into AdvanceBranch database
    sint32            m_Age; // Index into Age database
    sint32            m_PowerPoints;
    double            m_PollutionSizeModifierValue;
    double            m_PollutionProductionModifierValue;
    sint32            m_TriggerFeatValue; // Index into Feat database
    sint32            m_KeyAdvanceAdviceValue;

public:
    AdvanceRecord() { Init(); };
    ~AdvanceRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    AdvanceRecord(const AdvanceRecord &rval) { Init(); *this = rval; }
    void operator=(const AdvanceRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const AdvanceRecord & rval);
    //
    // Accessors
    //
    sint32           GetCost() const { return m_Cost; }
    sint32           GetPrerequisitesIndex(sint32 index) const;
    const AdvanceRecord *GetPrerequisites(sint32 index) const;
    sint32           GetNumPrerequisites() const { return m_numPrerequisites;}
    sint32           GetDependenciesIndex(sint32 index) const;
    const AdvanceRecord *GetDependencies(sint32 index) const;
    sint32           GetNumDependencies() const { return m_numDependencies;}
    sint32           GetLeadsToIndex(sint32 index) const;
    const AdvanceRecord *GetLeadsTo(sint32 index) const;
    sint32           GetNumLeadsTo() const { return m_numLeadsTo;}
    sint32           GetIconIndex() const { return m_Icon; }
    const IconRecord *GetIcon() const;
    sint32           GetBranchIndex() const { return m_Branch; }
    const AdvanceBranchRecord *GetBranch() const;
    sint32           GetAgeIndex() const { return m_Age; }
    const AgeRecord *GetAge() const;
    bool             GetDeepOcean() const { return (m_flags0 & k_Advance_DeepOcean_Bit) != 0; }
    bool             GetCapitalization() const { return (m_flags0 & k_Advance_Capitalization_Bit) != 0; }
    bool             GetInfrastructure() const { return (m_flags0 & k_Advance_Infrastructure_Bit) != 0; }
    bool             GetTransform() const { return (m_flags0 & k_Advance_Transform_Bit) != 0; }
    bool             GetRequiresProbeRecovery() const { return (m_flags0 & k_Advance_RequiresProbeRecovery_Bit) != 0; }
    bool             GetGenetic() const { return (m_flags0 & k_Advance_Genetic_Bit) != 0; }
    bool             GetPlantNuke() const { return (m_flags0 & k_Advance_PlantNuke_Bit) != 0; }
    bool             GetNoIndex() const { return (m_flags0 & k_Advance_NoIndex_Bit) != 0; }
    bool             GetRoads() const { return (m_flags0 & k_Advance_Roads_Bit) != 0; }
    bool             GetRailroads() const { return (m_flags0 & k_Advance_Railroads_Bit) != 0; }
    bool             GetAlienLife() const { return (m_flags0 & k_Advance_AlienLife_Bit) != 0; }
    bool             GetMagLev() const { return (m_flags0 & k_Advance_MagLev_Bit) != 0; }
    bool             GetTunnels() const { return (m_flags0 & k_Advance_Tunnels_Bit) != 0; }
    bool             GetGLHidden() const { return (m_flags0 & k_Advance_GLHidden_Bit) != 0; }
    sint32           GetPowerPoints() const { return m_PowerPoints; }
    bool             GetPollutionSizeModifier() const { return (m_flags0 & k_Advance_PollutionSizeModifier_Bit) != 0; }
    bool             GetPollutionSizeModifier(double &value) const {
                         if((m_flags0 & k_Advance_PollutionSizeModifier_Bit) == 0) return false;
                         value = m_PollutionSizeModifierValue;
                         return true;
                     }
    bool             GetPollutionProductionModifier() const { return (m_flags0 & k_Advance_PollutionProductionModifier_Bit) != 0; }
    bool             GetPollutionProductionModifier(double &value) const {
                         if((m_flags0 & k_Advance_PollutionProductionModifier_Bit) == 0) return false;
                         value = m_PollutionProductionModifierValue;
                         return true;
                     }
    bool             GetTriggerFeat() const { return (m_flags0 & k_Advance_TriggerFeat_Bit) != 0; }
    bool             GetTriggerFeatIndex(sint32 &index) const {
                         if((m_flags0 & k_Advance_TriggerFeat_Bit) == 0) return false;
                         index = m_TriggerFeatValue;
                         return true;
                     }
    bool             GetTriggerFeat(const FeatRecord *&rec) const;
    const FeatRecord  *GetTriggerFeatPtr() const;
    bool             GetKeyAdvanceAdvice() const { return (m_flags0 & k_Advance_KeyAdvanceAdvice_Bit) != 0; }
    bool             GetKeyAdvanceAdvice(sint32 &value) const {
                         if((m_flags0 & k_Advance_KeyAdvanceAdvice_Bit) == 0) return false;
                         value = m_KeyAdvanceAdviceValue;
                         return true;
                     }
}; /* AdvanceRecord */

struct AdvanceRecordAccessorInfo {
    AdvanceRecord::IntAccessor m_intAccessor;
    AdvanceRecord::BoolAccessor m_boolAccessor;
    AdvanceRecord::FloatAccessor m_floatAccessor;
    AdvanceRecord::BitIntAccessor m_bitIntAccessor;
    AdvanceRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern AdvanceRecordAccessorInfo g_AdvanceRecord_Accessors[];
extern char *g_Advance_Tokens[];
#define k_Num_AdvanceRecord_Tokens 30

template <class T> class CTPDatabase;
extern CTPDatabase<AdvanceRecord> *g_theAdvanceDB;

#endif /* ifndef __Advance_RECORD_H__ */
