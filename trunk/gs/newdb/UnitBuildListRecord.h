
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __UnitBuildList_RECORD_H__
#define __UnitBuildList_RECORD_H__

/*
 * UnitBuildList description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class UnitRecord;

class UnitBuildListRecord : public CTPRecord
{
public:
    typedef sint32 (UnitBuildListRecord::*IntAccessor)() const;
    typedef bool (UnitBuildListRecord::*BoolAccessor)() const;
    typedef double (UnitBuildListRecord::*FloatAccessor)() const ;
    typedef bool (UnitBuildListRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (UnitBuildListRecord::*BitFloatAccessor)(double &val) const;
private:
    sint32           *m_Unit; // Index into Unit database
    sint32           m_numUnit;

public:
    UnitBuildListRecord() { Init(); };
    ~UnitBuildListRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    UnitBuildListRecord(const UnitBuildListRecord &rval) { Init(); *this = rval; }
    void operator=(const UnitBuildListRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const UnitBuildListRecord & rval);
    //
    // Accessors
    //
    sint32           GetUnitIndex(sint32 index) const;
    const UnitRecord *GetUnit(sint32 index) const;
    sint32           GetNumUnit() const { return m_numUnit;}
}; /* UnitBuildListRecord */

struct UnitBuildListRecordAccessorInfo {
    UnitBuildListRecord::IntAccessor m_intAccessor;
    UnitBuildListRecord::BoolAccessor m_boolAccessor;
    UnitBuildListRecord::FloatAccessor m_floatAccessor;
    UnitBuildListRecord::BitIntAccessor m_bitIntAccessor;
    UnitBuildListRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern UnitBuildListRecordAccessorInfo g_UnitBuildListRecord_Accessors[];
extern char *g_UnitBuildList_Tokens[];
#define k_Num_UnitBuildListRecord_Tokens 1

template <class T> class CTPDatabase;
extern CTPDatabase<UnitBuildListRecord> *g_theUnitBuildListDB;

#endif /* ifndef __UnitBuildList_RECORD_H__ */
