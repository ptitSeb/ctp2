
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#include "c3.h"
#include "c3errors.h"
#include "BuildingRecord.h"
#include "DBLexer.h"
#include "DBTokens.h"
#include "CTPDatabase.h"
#include "StrDB.h"
#include "BitArray.h"

#include "IconRecord.h"
#include "AdvanceRecord.h"
#include "AdvanceRecord.h"
#include "BuildingRecord.h"

CTPDatabase<BuildingRecord> *g_theBuildingDB = NULL;

BuildingRecord::Init()
{
    m_flags0 = 0;
    m_flags1 = 0;
    m_DefaultIcon = 0x7fffffff;
    m_Description = 0;
    m_EnableAdvance = 0x7fffffff;
    memset(m_ObsoleteAdvance, 0, sizeof(m_ObsoleteAdvance));
    m_numObsoleteAdvance = 0;
    m_PrerequisiteBuilding = NULL;
    m_numPrerequisiteBuilding = 0;
    m_ProductionCost = 0;
    m_Upkeep = 0;
    m_DefendersPercentValue = 0.0;
    m_HappyIncValue = 0;
    m_ProductionPercentValue = 0.0;
    m_FoodPercentValue = 0.0;
    m_CommercePercentValue = 0.0;
    m_SciencePercentValue = 0.0;
    m_IncreaseBaseOvercrowdingValue = 0;
    m_IncreaseMaxPopulationValue = 0;
    m_FoodVatValue = 0.0;
    m_LowerCrimeValue = 0.0;
    m_PreventConversionValue = 0.0;
    m_PreventSlaveryValue = 0.0;
    m_LowerPeaceMovementValue = 0.0;
    m_GoldPerCitizenValue = 0;
    m_ProtectFromBioAgentsValue = 0.0;
    m_ProtectFromNanoVirusValue = 0.0;
    m_SciencePerPopValue = 0.0;
    m_RaiseOvercrowdingLevelValue = 0;
    m_RaiseMaxPopulationValue = 0;
    m_StarvationProtectionValue = 0;
    m_OffenseBonusLandValue = 0.0;
    m_OffenseBonusWaterValue = 0.0;
    m_OffenseBonusAirValue = 0.0;
    m_PopulationPollutionPercentValue = 0.0;
    m_ProductionPollutionPercentValue = 0.0;
    m_PollutionAmountValue = 0.0;
}

BuildingRecord::~BuildingRecord()
{
	int index = 0;
	// free array PrerequisiteBuilding 
 	if (m_numPrerequisiteBuilding > 0) 
		delete [m_numPrerequisiteBuilding] m_PrerequisiteBuilding; 
	m_PrerequisiteBuilding = NULL; 
	m_numPrerequisiteBuilding = 0; 

}

void BuildingRecord::operator=(const BuildingRecord & rval)
{
	int index = 0;
	m_index = rval.m_index;
	m_DefaultIcon = rval.m_DefaultIcon; 

	m_Description = rval.m_Description; 

	m_EnableAdvance = rval.m_EnableAdvance; 

	// copy fixed sized array ObsoleteAdvance[] 
 		memcpy(m_ObsoleteAdvance, rval.m_ObsoleteAdvance, sizeof(sint32)*rval.m_numObsoleteAdvance); 

	// free array PrerequisiteBuilding 
 	if (m_numPrerequisiteBuilding > 0) 
	{
		delete [m_numPrerequisiteBuilding] m_PrerequisiteBuilding; 
		m_PrerequisiteBuilding = NULL; 
		m_numPrerequisiteBuilding = 0; 
	}
	if (rval.m_numPrerequisiteBuilding > 0) 
	{
		m_PrerequisiteBuilding = new sint32 [rval.m_numPrerequisiteBuilding]; 
		memcpy(m_PrerequisiteBuilding, rval.m_PrerequisiteBuilding, sizeof(sint32)*rval.m_numPrerequisiteBuilding); 

	} 
	m_numPrerequisiteBuilding = rval.m_numPrerequisiteBuilding;

	m_ProductionCost = rval.m_ProductionCost; 

	m_Upkeep = rval.m_Upkeep; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_DefendersPercentValue = rval.m_DefendersPercentValue; 

	m_flags0 = rval.m_flags0; 
		m_HappyIncValue = rval.m_HappyIncValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_ProductionPercentValue = rval.m_ProductionPercentValue; 

	m_flags0 = rval.m_flags0; 
		m_FoodPercentValue = rval.m_FoodPercentValue; 

	m_flags0 = rval.m_flags0; 
		m_CommercePercentValue = rval.m_CommercePercentValue; 

	m_flags0 = rval.m_flags0; 
		m_SciencePercentValue = rval.m_SciencePercentValue; 

	m_flags0 = rval.m_flags0; 
		m_IncreaseBaseOvercrowdingValue = rval.m_IncreaseBaseOvercrowdingValue; 

	m_flags0 = rval.m_flags0; 
		m_IncreaseMaxPopulationValue = rval.m_IncreaseMaxPopulationValue; 

	m_flags0 = rval.m_flags0; 
		m_FoodVatValue = rval.m_FoodVatValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_LowerCrimeValue = rval.m_LowerCrimeValue; 

	m_flags0 = rval.m_flags0; 
		m_PreventConversionValue = rval.m_PreventConversionValue; 

	m_flags0 = rval.m_flags0; 
		m_PreventSlaveryValue = rval.m_PreventSlaveryValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_LowerPeaceMovementValue = rval.m_LowerPeaceMovementValue; 

	m_flags0 = rval.m_flags0; 
		m_GoldPerCitizenValue = rval.m_GoldPerCitizenValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
		m_ProtectFromBioAgentsValue = rval.m_ProtectFromBioAgentsValue; 

	m_flags0 = rval.m_flags0; 
		m_ProtectFromNanoVirusValue = rval.m_ProtectFromNanoVirusValue; 

	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags0 = rval.m_flags0; 
	m_flags1 = rval.m_flags1; 
		m_SciencePerPopValue = rval.m_SciencePerPopValue; 

	m_flags1 = rval.m_flags1; 
		m_RaiseOvercrowdingLevelValue = rval.m_RaiseOvercrowdingLevelValue; 

	m_flags1 = rval.m_flags1; 
		m_RaiseMaxPopulationValue = rval.m_RaiseMaxPopulationValue; 

	m_flags1 = rval.m_flags1; 
		m_StarvationProtectionValue = rval.m_StarvationProtectionValue; 

	m_flags1 = rval.m_flags1; 
	m_flags1 = rval.m_flags1; 
		m_OffenseBonusLandValue = rval.m_OffenseBonusLandValue; 

	m_flags1 = rval.m_flags1; 
		m_OffenseBonusWaterValue = rval.m_OffenseBonusWaterValue; 

	m_flags1 = rval.m_flags1; 
		m_OffenseBonusAirValue = rval.m_OffenseBonusAirValue; 

	m_flags1 = rval.m_flags1; 
		m_PopulationPollutionPercentValue = rval.m_PopulationPollutionPercentValue; 

	m_flags1 = rval.m_flags1; 
		m_ProductionPollutionPercentValue = rval.m_ProductionPollutionPercentValue; 

	m_flags1 = rval.m_flags1; 
		m_PollutionAmountValue = rval.m_PollutionAmountValue; 

	m_flags1 = rval.m_flags1; 
}

char *g_Building_Tokens[] =
{
    "DefaultIcon",
    "Description",
    "EnableAdvance",
    "ObsoleteAdvance",
    "PrerequisiteBuilding",
    "ProductionCost",
    "Upkeep",
    "Capitol",
    "DefendersPercent",
    "DefendersPercentValue",
    "HappyInc",
    "HappyIncValue",
    "DoubleTelevangelists",
    "ProductionPercent",
    "ProductionPercentValue",
    "FoodPercent",
    "FoodPercentValue",
    "CommercePercent",
    "CommercePercentValue",
    "SciencePercent",
    "SciencePercentValue",
    "IncreaseBaseOvercrowding",
    "IncreaseBaseOvercrowdingValue",
    "IncreaseMaxPopulation",
    "IncreaseMaxPopulationValue",
    "FoodVat",
    "FoodVatValue",
    "Airport",
    "NoUnhappyPeople",
    "NoRushBuyPenalty",
    "LowerCrime",
    "LowerCrimeValue",
    "PreventConversion",
    "PreventConversionValue",
    "PreventSlavery",
    "PreventSlaveryValue",
    "AllowGrunts",
    "LowerPeaceMovement",
    "LowerPeaceMovementValue",
    "GoldPerCitizen",
    "GoldPerCitizenValue",
    "ProtectFromNukes",
    "ProtectFromBioAgents",
    "ProtectFromBioAgentsValue",
    "ProtectFromNanoVirus",
    "ProtectFromNanoVirusValue",
    "Television",
    "CityWalls",
    "IsReligious",
    "ForceField",
    "CantBuildInSea",
    "CantBuildOnLand",
    "Cathedral",
    "Brokerage",
    "NuclearPlant",
    "SciencePerPop",
    "SciencePerPopValue",
    "RaiseOvercrowdingLevel",
    "RaiseOvercrowdingLevelValue",
    "RaiseMaxPopulation",
    "RaiseMaxPopulationValue",
    "StarvationProtection",
    "StarvationProtectionValue",
    "CoastalBuilding",
    "OffenseBonusLand",
    "OffenseBonusLandValue",
    "OffenseBonusWater",
    "OffenseBonusWaterValue",
    "OffenseBonusAir",
    "OffenseBonusAirValue",
    "PopulationPollutionPercent",
    "PopulationPollutionPercentValue",
    "ProductionPollutionPercent",
    "ProductionPollutionPercentValue",
    "PollutionAmount",
    "PollutionAmountValue",
    "GLHidden",
};

BuildingRecordAccessorInfo g_BuildingRecord_Accessors[] = 
{
    {BuildingRecord::GetDefaultIconIndex, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* Description */
    {BuildingRecord::GetEnableAdvanceIndex, NULL, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* ObsoleteAdvance (array) */
    { NULL, NULL, NULL, NULL, NULL}, /* PrerequisiteBuilding (array) */
    { BuildingRecord::GetProductionCost, NULL, NULL, NULL, NULL },
    { BuildingRecord::GetUpkeep, NULL, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetCapitol, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, BuildingRecord::GetDefendersPercent},
    { NULL, NULL, NULL, NULL, NULL}, /* DefendersPercent */
    { NULL, NULL, NULL, BuildingRecord::GetHappyInc, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* HappyInc */
    { NULL, BuildingRecord::GetDoubleTelevangelists, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, BuildingRecord::GetProductionPercent},
    { NULL, NULL, NULL, NULL, NULL}, /* ProductionPercent */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetFoodPercent},
    { NULL, NULL, NULL, NULL, NULL}, /* FoodPercent */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetCommercePercent},
    { NULL, NULL, NULL, NULL, NULL}, /* CommercePercent */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetSciencePercent},
    { NULL, NULL, NULL, NULL, NULL}, /* SciencePercent */
    { NULL, NULL, NULL, BuildingRecord::GetIncreaseBaseOvercrowding, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseBaseOvercrowding */
    { NULL, NULL, NULL, BuildingRecord::GetIncreaseMaxPopulation, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* IncreaseMaxPopulation */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetFoodVat},
    { NULL, NULL, NULL, NULL, NULL}, /* FoodVat */
    { NULL, BuildingRecord::GetAirport, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetNoUnhappyPeople, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetNoRushBuyPenalty, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, BuildingRecord::GetLowerCrime},
    { NULL, NULL, NULL, NULL, NULL}, /* LowerCrime */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetPreventConversion},
    { NULL, NULL, NULL, NULL, NULL}, /* PreventConversion */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetPreventSlavery},
    { NULL, NULL, NULL, NULL, NULL}, /* PreventSlavery */
    { NULL, BuildingRecord::GetAllowGrunts, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, BuildingRecord::GetLowerPeaceMovement},
    { NULL, NULL, NULL, NULL, NULL}, /* LowerPeaceMovement */
    { NULL, NULL, NULL, BuildingRecord::GetGoldPerCitizen, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* GoldPerCitizen */
    { NULL, BuildingRecord::GetProtectFromNukes, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, BuildingRecord::GetProtectFromBioAgents},
    { NULL, NULL, NULL, NULL, NULL}, /* ProtectFromBioAgents */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetProtectFromNanoVirus},
    { NULL, NULL, NULL, NULL, NULL}, /* ProtectFromNanoVirus */
    { NULL, BuildingRecord::GetTelevision, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetCityWalls, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetIsReligious, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetForceField, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetCantBuildInSea, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetCantBuildOnLand, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetCathedral, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetBrokerage, NULL, NULL, NULL },
    { NULL, BuildingRecord::GetNuclearPlant, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, BuildingRecord::GetSciencePerPop},
    { NULL, NULL, NULL, NULL, NULL}, /* SciencePerPop */
    { NULL, NULL, NULL, BuildingRecord::GetRaiseOvercrowdingLevel, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* RaiseOvercrowdingLevel */
    { NULL, NULL, NULL, BuildingRecord::GetRaiseMaxPopulation, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* RaiseMaxPopulation */
    { NULL, NULL, NULL, BuildingRecord::GetStarvationProtection, NULL },
    { NULL, NULL, NULL, NULL, NULL}, /* StarvationProtection */
    { NULL, BuildingRecord::GetCoastalBuilding, NULL, NULL, NULL },
    { NULL, NULL, NULL, NULL, BuildingRecord::GetOffenseBonusLand},
    { NULL, NULL, NULL, NULL, NULL}, /* OffenseBonusLand */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetOffenseBonusWater},
    { NULL, NULL, NULL, NULL, NULL}, /* OffenseBonusWater */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetOffenseBonusAir},
    { NULL, NULL, NULL, NULL, NULL}, /* OffenseBonusAir */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetPopulationPollutionPercent},
    { NULL, NULL, NULL, NULL, NULL}, /* PopulationPollutionPercent */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetProductionPollutionPercent},
    { NULL, NULL, NULL, NULL, NULL}, /* ProductionPollutionPercent */
    { NULL, NULL, NULL, NULL, BuildingRecord::GetPollutionAmount},
    { NULL, NULL, NULL, NULL, NULL}, /* PollutionAmount */
    { NULL, BuildingRecord::GetGLHidden, NULL, NULL, NULL },
};

#define k_Token_Building_DefaultIcon             ((k_Token_Custom_Base) + 0)
#define k_Token_Building_Description             ((k_Token_Custom_Base) + 1)
#define k_Token_Building_EnableAdvance           ((k_Token_Custom_Base) + 2)
#define k_Token_Building_ObsoleteAdvance         ((k_Token_Custom_Base) + 3)
#define k_Token_Building_PrerequisiteBuilding    ((k_Token_Custom_Base) + 4)
#define k_Token_Building_ProductionCost          ((k_Token_Custom_Base) + 5)
#define k_Token_Building_Upkeep                  ((k_Token_Custom_Base) + 6)
#define k_Token_Building_Capitol                 ((k_Token_Custom_Base) + 7)
#define k_Token_Building_DefendersPercent        ((k_Token_Custom_Base) + 8)
#define k_Token_Building_DefendersPercent_Value  ((k_Token_Custom_Base) + 9)
#define k_Token_Building_HappyInc                ((k_Token_Custom_Base) + 10)
#define k_Token_Building_HappyInc_Value          ((k_Token_Custom_Base) + 11)
#define k_Token_Building_DoubleTelevangelists    ((k_Token_Custom_Base) + 12)
#define k_Token_Building_ProductionPercent       ((k_Token_Custom_Base) + 13)
#define k_Token_Building_ProductionPercent_Value ((k_Token_Custom_Base) + 14)
#define k_Token_Building_FoodPercent             ((k_Token_Custom_Base) + 15)
#define k_Token_Building_FoodPercent_Value       ((k_Token_Custom_Base) + 16)
#define k_Token_Building_CommercePercent         ((k_Token_Custom_Base) + 17)
#define k_Token_Building_CommercePercent_Value   ((k_Token_Custom_Base) + 18)
#define k_Token_Building_SciencePercent          ((k_Token_Custom_Base) + 19)
#define k_Token_Building_SciencePercent_Value    ((k_Token_Custom_Base) + 20)
#define k_Token_Building_IncreaseBaseOvercrowding ((k_Token_Custom_Base) + 21)
#define k_Token_Building_IncreaseBaseOvercrowding_Value ((k_Token_Custom_Base) + 22)
#define k_Token_Building_IncreaseMaxPopulation   ((k_Token_Custom_Base) + 23)
#define k_Token_Building_IncreaseMaxPopulation_Value ((k_Token_Custom_Base) + 24)
#define k_Token_Building_FoodVat                 ((k_Token_Custom_Base) + 25)
#define k_Token_Building_FoodVat_Value           ((k_Token_Custom_Base) + 26)
#define k_Token_Building_Airport                 ((k_Token_Custom_Base) + 27)
#define k_Token_Building_NoUnhappyPeople         ((k_Token_Custom_Base) + 28)
#define k_Token_Building_NoRushBuyPenalty        ((k_Token_Custom_Base) + 29)
#define k_Token_Building_LowerCrime              ((k_Token_Custom_Base) + 30)
#define k_Token_Building_LowerCrime_Value        ((k_Token_Custom_Base) + 31)
#define k_Token_Building_PreventConversion       ((k_Token_Custom_Base) + 32)
#define k_Token_Building_PreventConversion_Value ((k_Token_Custom_Base) + 33)
#define k_Token_Building_PreventSlavery          ((k_Token_Custom_Base) + 34)
#define k_Token_Building_PreventSlavery_Value    ((k_Token_Custom_Base) + 35)
#define k_Token_Building_AllowGrunts             ((k_Token_Custom_Base) + 36)
#define k_Token_Building_LowerPeaceMovement      ((k_Token_Custom_Base) + 37)
#define k_Token_Building_LowerPeaceMovement_Value ((k_Token_Custom_Base) + 38)
#define k_Token_Building_GoldPerCitizen          ((k_Token_Custom_Base) + 39)
#define k_Token_Building_GoldPerCitizen_Value    ((k_Token_Custom_Base) + 40)
#define k_Token_Building_ProtectFromNukes        ((k_Token_Custom_Base) + 41)
#define k_Token_Building_ProtectFromBioAgents    ((k_Token_Custom_Base) + 42)
#define k_Token_Building_ProtectFromBioAgents_Value ((k_Token_Custom_Base) + 43)
#define k_Token_Building_ProtectFromNanoVirus    ((k_Token_Custom_Base) + 44)
#define k_Token_Building_ProtectFromNanoVirus_Value ((k_Token_Custom_Base) + 45)
#define k_Token_Building_Television              ((k_Token_Custom_Base) + 46)
#define k_Token_Building_CityWalls               ((k_Token_Custom_Base) + 47)
#define k_Token_Building_IsReligious             ((k_Token_Custom_Base) + 48)
#define k_Token_Building_ForceField              ((k_Token_Custom_Base) + 49)
#define k_Token_Building_CantBuildInSea          ((k_Token_Custom_Base) + 50)
#define k_Token_Building_CantBuildOnLand         ((k_Token_Custom_Base) + 51)
#define k_Token_Building_Cathedral               ((k_Token_Custom_Base) + 52)
#define k_Token_Building_Brokerage               ((k_Token_Custom_Base) + 53)
#define k_Token_Building_NuclearPlant            ((k_Token_Custom_Base) + 54)
#define k_Token_Building_SciencePerPop           ((k_Token_Custom_Base) + 55)
#define k_Token_Building_SciencePerPop_Value     ((k_Token_Custom_Base) + 56)
#define k_Token_Building_RaiseOvercrowdingLevel  ((k_Token_Custom_Base) + 57)
#define k_Token_Building_RaiseOvercrowdingLevel_Value ((k_Token_Custom_Base) + 58)
#define k_Token_Building_RaiseMaxPopulation      ((k_Token_Custom_Base) + 59)
#define k_Token_Building_RaiseMaxPopulation_Value ((k_Token_Custom_Base) + 60)
#define k_Token_Building_StarvationProtection    ((k_Token_Custom_Base) + 61)
#define k_Token_Building_StarvationProtection_Value ((k_Token_Custom_Base) + 62)
#define k_Token_Building_CoastalBuilding         ((k_Token_Custom_Base) + 63)
#define k_Token_Building_OffenseBonusLand        ((k_Token_Custom_Base) + 64)
#define k_Token_Building_OffenseBonusLand_Value  ((k_Token_Custom_Base) + 65)
#define k_Token_Building_OffenseBonusWater       ((k_Token_Custom_Base) + 66)
#define k_Token_Building_OffenseBonusWater_Value ((k_Token_Custom_Base) + 67)
#define k_Token_Building_OffenseBonusAir         ((k_Token_Custom_Base) + 68)
#define k_Token_Building_OffenseBonusAir_Value   ((k_Token_Custom_Base) + 69)
#define k_Token_Building_PopulationPollutionPercent ((k_Token_Custom_Base) + 70)
#define k_Token_Building_PopulationPollutionPercent_Value ((k_Token_Custom_Base) + 71)
#define k_Token_Building_ProductionPollutionPercent ((k_Token_Custom_Base) + 72)
#define k_Token_Building_ProductionPollutionPercent_Value ((k_Token_Custom_Base) + 73)
#define k_Token_Building_PollutionAmount         ((k_Token_Custom_Base) + 74)
#define k_Token_Building_PollutionAmount_Value   ((k_Token_Custom_Base) + 75)
#define k_Token_Building_GLHidden                ((k_Token_Custom_Base) + 76)
#define k_Token_Building_Max                     ((k_Token_Custom_Base) + 77)


static BitArray s_ParsedTokens(77);
void BuildingRecord::CheckRequiredFields(DBLexer *lex)
{
    // Ick.
    if(!s_ParsedTokens.Bit(k_Token_Building_Description - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field Description missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Building_ProductionCost - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field ProductionCost missing"));
    }
    if(!s_ParsedTokens.Bit(k_Token_Building_Upkeep - k_Token_Custom_Base)) {
        DBERROR(("Warning: required field Upkeep missing"));
    }
}
    
sint32 BuildingRecord::Parse(DBLexer *lex)
{
    bool done = false;
    sint32 result = 0;
    sint32 tok;
    DBPARSE_ERROR err = DBPARSE_OK;
    s_ParsedTokens.Clear();
    lex->SetTokens(g_Building_Tokens, k_Token_Building_Max);
    tok = lex->GetToken();
    if(tok != k_Token_Name) {
        DBERROR(("Record does not start with name"));
        return 0;
    }
    if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name)) {
        g_theStringDB->InsertStr(lex->GetTokenText(), lex->GetTokenText());
        if(!g_theStringDB->GetStringID(lex->GetTokenText(), m_name))
            SetTextName(lex->GetTokenText());
    }

    tok = lex->GetToken();
    if(tok != k_Token_OpenBrace) {
        DBERROR(("Missing open brace"));
        return 0;
    }

    while(!done) {
        tok = lex->GetToken();
        if(tok >= k_Token_Custom_Base && tok < k_Token_Building_Max) { 
            s_ParsedTokens.SetBit(tok - k_Token_Custom_Base);
        }
        switch(tok) {
            case k_Token_Building_DefaultIcon:
                if(!g_theIconDB->GetRecordFromLexer(lex, m_DefaultIcon, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Building_Description:
                if(!lex->GetStringIdAssignment(m_Description)) {
                    DBERROR(("Expected string ID"));
                    done = true; break;
                }
                break;
            case k_Token_Building_EnableAdvance:
                if(!g_theAdvanceDB->GetRecordFromLexer(lex, m_EnableAdvance, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Building_ObsoleteAdvance:
                if(!g_theAdvanceDB->ParseRecordInArray(lex, (sint32 *)m_ObsoleteAdvance, &m_numObsoleteAdvance, k_MAX_ObsoleteAdvance, err)) {
                    done = true; break;
                }
                break;
            case k_Token_Building_PrerequisiteBuilding:
                if(!g_theBuildingDB->ParseRecordInArray(lex, (sint32 **)&m_PrerequisiteBuilding, &m_numPrerequisiteBuilding, err)) 
                {
                    done = true; break;
                }
                break;
            case k_Token_Building_ProductionCost:
                if(!lex->GetIntAssignment(m_ProductionCost)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Building_Upkeep:
                if(!lex->GetIntAssignment(m_Upkeep)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Building_Capitol:
                m_flags0 |= k_Building_Capitol_Bit;
                break;
            case k_Token_Building_DefendersPercent:
                m_flags0 |= k_Building_DefendersPercent_Bit;
                if(!lex->GetFloatAssignment(m_DefendersPercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_HappyInc:
                m_flags0 |= k_Building_HappyInc_Bit;
                if(!lex->GetIntAssignment(m_HappyIncValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Building_DoubleTelevangelists:
                m_flags0 |= k_Building_DoubleTelevangelists_Bit;
                break;
            case k_Token_Building_ProductionPercent:
                m_flags0 |= k_Building_ProductionPercent_Bit;
                if(!lex->GetFloatAssignment(m_ProductionPercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_FoodPercent:
                m_flags0 |= k_Building_FoodPercent_Bit;
                if(!lex->GetFloatAssignment(m_FoodPercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_CommercePercent:
                m_flags0 |= k_Building_CommercePercent_Bit;
                if(!lex->GetFloatAssignment(m_CommercePercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_SciencePercent:
                m_flags0 |= k_Building_SciencePercent_Bit;
                if(!lex->GetFloatAssignment(m_SciencePercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_IncreaseBaseOvercrowding:
                m_flags0 |= k_Building_IncreaseBaseOvercrowding_Bit;
                if(!lex->GetIntAssignment(m_IncreaseBaseOvercrowdingValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Building_IncreaseMaxPopulation:
                m_flags0 |= k_Building_IncreaseMaxPopulation_Bit;
                if(!lex->GetIntAssignment(m_IncreaseMaxPopulationValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Building_FoodVat:
                m_flags0 |= k_Building_FoodVat_Bit;
                if(!lex->GetFloatAssignment(m_FoodVatValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_Airport:
                m_flags0 |= k_Building_Airport_Bit;
                break;
            case k_Token_Building_NoUnhappyPeople:
                m_flags0 |= k_Building_NoUnhappyPeople_Bit;
                break;
            case k_Token_Building_NoRushBuyPenalty:
                m_flags0 |= k_Building_NoRushBuyPenalty_Bit;
                break;
            case k_Token_Building_LowerCrime:
                m_flags0 |= k_Building_LowerCrime_Bit;
                if(!lex->GetFloatAssignment(m_LowerCrimeValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_PreventConversion:
                m_flags0 |= k_Building_PreventConversion_Bit;
                if(!lex->GetFloatAssignment(m_PreventConversionValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_PreventSlavery:
                m_flags0 |= k_Building_PreventSlavery_Bit;
                if(!lex->GetFloatAssignment(m_PreventSlaveryValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_AllowGrunts:
                m_flags0 |= k_Building_AllowGrunts_Bit;
                break;
            case k_Token_Building_LowerPeaceMovement:
                m_flags0 |= k_Building_LowerPeaceMovement_Bit;
                if(!lex->GetFloatAssignment(m_LowerPeaceMovementValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_GoldPerCitizen:
                m_flags0 |= k_Building_GoldPerCitizen_Bit;
                if(!lex->GetIntAssignment(m_GoldPerCitizenValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Building_ProtectFromNukes:
                m_flags0 |= k_Building_ProtectFromNukes_Bit;
                break;
            case k_Token_Building_ProtectFromBioAgents:
                m_flags0 |= k_Building_ProtectFromBioAgents_Bit;
                if(!lex->GetFloatAssignment(m_ProtectFromBioAgentsValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_ProtectFromNanoVirus:
                m_flags0 |= k_Building_ProtectFromNanoVirus_Bit;
                if(!lex->GetFloatAssignment(m_ProtectFromNanoVirusValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_Television:
                m_flags0 |= k_Building_Television_Bit;
                break;
            case k_Token_Building_CityWalls:
                m_flags0 |= k_Building_CityWalls_Bit;
                break;
            case k_Token_Building_IsReligious:
                m_flags0 |= k_Building_IsReligious_Bit;
                break;
            case k_Token_Building_ForceField:
                m_flags0 |= k_Building_ForceField_Bit;
                break;
            case k_Token_Building_CantBuildInSea:
                m_flags0 |= k_Building_CantBuildInSea_Bit;
                break;
            case k_Token_Building_CantBuildOnLand:
                m_flags0 |= k_Building_CantBuildOnLand_Bit;
                break;
            case k_Token_Building_Cathedral:
                m_flags0 |= k_Building_Cathedral_Bit;
                break;
            case k_Token_Building_Brokerage:
                m_flags0 |= k_Building_Brokerage_Bit;
                break;
            case k_Token_Building_NuclearPlant:
                m_flags0 |= k_Building_NuclearPlant_Bit;
                break;
            case k_Token_Building_SciencePerPop:
                m_flags1 |= k_Building_SciencePerPop_Bit;
                if(!lex->GetFloatAssignment(m_SciencePerPopValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_RaiseOvercrowdingLevel:
                m_flags1 |= k_Building_RaiseOvercrowdingLevel_Bit;
                if(!lex->GetIntAssignment(m_RaiseOvercrowdingLevelValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Building_RaiseMaxPopulation:
                m_flags1 |= k_Building_RaiseMaxPopulation_Bit;
                if(!lex->GetIntAssignment(m_RaiseMaxPopulationValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Building_StarvationProtection:
                m_flags1 |= k_Building_StarvationProtection_Bit;
                if(!lex->GetIntAssignment(m_StarvationProtectionValue)) {
                    DBERROR(("Expected integer"));
                    done = true; break;
                }
                break;
            case k_Token_Building_CoastalBuilding:
                m_flags1 |= k_Building_CoastalBuilding_Bit;
                break;
            case k_Token_Building_OffenseBonusLand:
                m_flags1 |= k_Building_OffenseBonusLand_Bit;
                if(!lex->GetFloatAssignment(m_OffenseBonusLandValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_OffenseBonusWater:
                m_flags1 |= k_Building_OffenseBonusWater_Bit;
                if(!lex->GetFloatAssignment(m_OffenseBonusWaterValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_OffenseBonusAir:
                m_flags1 |= k_Building_OffenseBonusAir_Bit;
                if(!lex->GetFloatAssignment(m_OffenseBonusAirValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_PopulationPollutionPercent:
                m_flags1 |= k_Building_PopulationPollutionPercent_Bit;
                if(!lex->GetFloatAssignment(m_PopulationPollutionPercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_ProductionPollutionPercent:
                m_flags1 |= k_Building_ProductionPollutionPercent_Bit;
                if(!lex->GetFloatAssignment(m_ProductionPollutionPercentValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_PollutionAmount:
                m_flags1 |= k_Building_PollutionAmount_Bit;
                if(!lex->GetFloatAssignment(m_PollutionAmountValue)) {
                    DBERROR(("Expected number"));
                    done = true; break;
                }
                break;
            case k_Token_Building_GLHidden:
                m_flags1 |= k_Building_GLHidden_Bit;
                break;
            case k_Token_CloseBrace:
                done = true;
                result = 1;
                break;
            default:
                DBERROR(("Unknown token"));
                done = true;
                break;
        }
    }
    CheckRequiredFields(lex);
    lex->RestoreTokens();
    return result;
}

void BuildingRecord::ResolveDBReferences()
{
    if(m_DefaultIcon & 0x80000000) {
        sint32 id = m_DefaultIcon & 0x7fffffff;
        if(!g_theIconDB->GetNamedItem(id, m_DefaultIcon)) {
            c3errors_ErrorDialog("DB", "%s not found in Icon database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_DefaultIcon == 0x7fffffff) {
        m_DefaultIcon = -1;
    }
    if(m_EnableAdvance & 0x80000000) {
        sint32 id = m_EnableAdvance & 0x7fffffff;
        if(!g_theAdvanceDB->GetNamedItem(id, m_EnableAdvance)) {
            c3errors_ErrorDialog("DB", "%s not found in Advance database", g_theStringDB->GetNameStr(id));
        }
    } else if(m_EnableAdvance == 0x7fffffff) {
        m_EnableAdvance = -1;
    }
    {
        sint32 i;
        for(i = 0; i < m_numObsoleteAdvance; i++) {
            if(m_ObsoleteAdvance[i] & 0x80000000) {
                sint32 id = m_ObsoleteAdvance[i] & 0x7fffffff;
                if(!g_theAdvanceDB->GetNamedItem(id, m_ObsoleteAdvance[i])) {
                    c3errors_ErrorDialog("DB", "%s not found in Advance database", g_theStringDB->GetNameStr(id));
                }
            } else if(m_ObsoleteAdvance[i] == 0x7fffffff){
                m_ObsoleteAdvance[i] = -1;
            }
        }
    }
    {
        sint32 i;
        for(i = 0; i < m_numPrerequisiteBuilding; i++) {
            if(m_PrerequisiteBuilding[i] & 0x80000000) {
                sint32 id = m_PrerequisiteBuilding[i] & 0x7fffffff;
                if(!g_theBuildingDB->GetNamedItem(id, m_PrerequisiteBuilding[i])) {
                    c3errors_ErrorDialog("DB", "%s not found in Building database", g_theStringDB->GetNameStr(id));
                }
            } else if(m_PrerequisiteBuilding[i] == 0x7fffffff){
                m_PrerequisiteBuilding[i] = -1;
            }
        }
    }
}
/*
 * Member class Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
/*
 * Data Parsers
 * (DO NOT EDIT!  Automatically generated file)
 */
void BuildingRecord::Merge(const BuildingRecord & rval){
	int index = 0, obj_index = 0;
	// copy values of rval.m_ObsoleteAdvance to m_ObsoleteAdvance
	for (index = 0; index < m_numObsoleteAdvance; index++) 
	{ 
 		if (index < rval.m_numObsoleteAdvance)
 			m_ObsoleteAdvance[index] = rval.m_ObsoleteAdvance[index];
	} 
 	// resize m_PrerequisiteBuilding if necessary
	if (rval.m_numPrerequisiteBuilding > m_numPrerequisiteBuilding)
 	{ 
		delete m_PrerequisiteBuilding;
 		m_PrerequisiteBuilding = NULL;
 		if (rval.m_numPrerequisiteBuilding > 0)
 			m_PrerequisiteBuilding = new sint32 [rval.m_numPrerequisiteBuilding]; 
		m_numPrerequisiteBuilding = rval.m_numPrerequisiteBuilding;
 	} 

	// copy values of rval.m_PrerequisiteBuilding to m_PrerequisiteBuilding
	for (index = 0; index < m_numPrerequisiteBuilding; index++) 
	{ 
 		if (index < rval.m_numPrerequisiteBuilding)
 			m_PrerequisiteBuilding[index] = rval.m_PrerequisiteBuilding[index];
	} 
 	// only replace values that have been set
	if((rval.m_flags0 & k_Building_DefendersPercent_Bit) != 0) 
		m_DefendersPercentValue = rval.m_DefendersPercentValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_HappyInc_Bit) != 0) 
		m_HappyIncValue = rval.m_HappyIncValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_ProductionPercent_Bit) != 0) 
		m_ProductionPercentValue = rval.m_ProductionPercentValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_FoodPercent_Bit) != 0) 
		m_FoodPercentValue = rval.m_FoodPercentValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_CommercePercent_Bit) != 0) 
		m_CommercePercentValue = rval.m_CommercePercentValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_SciencePercent_Bit) != 0) 
		m_SciencePercentValue = rval.m_SciencePercentValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_IncreaseBaseOvercrowding_Bit) != 0) 
		m_IncreaseBaseOvercrowdingValue = rval.m_IncreaseBaseOvercrowdingValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_IncreaseMaxPopulation_Bit) != 0) 
		m_IncreaseMaxPopulationValue = rval.m_IncreaseMaxPopulationValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_FoodVat_Bit) != 0) 
		m_FoodVatValue = rval.m_FoodVatValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_LowerCrime_Bit) != 0) 
		m_LowerCrimeValue = rval.m_LowerCrimeValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_PreventConversion_Bit) != 0) 
		m_PreventConversionValue = rval.m_PreventConversionValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_PreventSlavery_Bit) != 0) 
		m_PreventSlaveryValue = rval.m_PreventSlaveryValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_LowerPeaceMovement_Bit) != 0) 
		m_LowerPeaceMovementValue = rval.m_LowerPeaceMovementValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_GoldPerCitizen_Bit) != 0) 
		m_GoldPerCitizenValue = rval.m_GoldPerCitizenValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_ProtectFromBioAgents_Bit) != 0) 
		m_ProtectFromBioAgentsValue = rval.m_ProtectFromBioAgentsValue; 

	// only replace values that have been set
	if((rval.m_flags0 & k_Building_ProtectFromNanoVirus_Bit) != 0) 
		m_ProtectFromNanoVirusValue = rval.m_ProtectFromNanoVirusValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_SciencePerPop_Bit) != 0) 
		m_SciencePerPopValue = rval.m_SciencePerPopValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_RaiseOvercrowdingLevel_Bit) != 0) 
		m_RaiseOvercrowdingLevelValue = rval.m_RaiseOvercrowdingLevelValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_RaiseMaxPopulation_Bit) != 0) 
		m_RaiseMaxPopulationValue = rval.m_RaiseMaxPopulationValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_StarvationProtection_Bit) != 0) 
		m_StarvationProtectionValue = rval.m_StarvationProtectionValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_OffenseBonusLand_Bit) != 0) 
		m_OffenseBonusLandValue = rval.m_OffenseBonusLandValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_OffenseBonusWater_Bit) != 0) 
		m_OffenseBonusWaterValue = rval.m_OffenseBonusWaterValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_OffenseBonusAir_Bit) != 0) 
		m_OffenseBonusAirValue = rval.m_OffenseBonusAirValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_PopulationPollutionPercent_Bit) != 0) 
		m_PopulationPollutionPercentValue = rval.m_PopulationPollutionPercentValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_ProductionPollutionPercent_Bit) != 0) 
		m_ProductionPollutionPercentValue = rval.m_ProductionPollutionPercentValue; 

	// only replace values that have been set
	if((rval.m_flags1 & k_Building_PollutionAmount_Bit) != 0) 
		m_PollutionAmountValue = rval.m_PollutionAmountValue; 

} 

/*
 * Data accessors
 * (DO NOT EDIT!  Automatically generated file)
 */
const IconRecord *BuildingRecord::GetDefaultIcon() const
{
    return g_theIconDB->Get(m_DefaultIcon);
}

const AdvanceRecord *BuildingRecord::GetEnableAdvance() const
{
    return g_theAdvanceDB->Get(m_EnableAdvance);
}

sint32 BuildingRecord::GetObsoleteAdvanceIndex(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numObsoleteAdvance);
    if((index < 0) || (index >= m_numObsoleteAdvance)) {
        return 0;
    }
    return m_ObsoleteAdvance[index];
}

const AdvanceRecord *BuildingRecord::GetObsoleteAdvance(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numObsoleteAdvance);
    if((index < 0) || (index >= m_numObsoleteAdvance)) {
        return 0;
    }
    return g_theAdvanceDB->Get(m_ObsoleteAdvance[index]);
}

sint32 BuildingRecord::GetPrerequisiteBuildingIndex(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numPrerequisiteBuilding);
    if((index < 0) || (index >= m_numPrerequisiteBuilding)) {
        return 0;
    }
    return m_PrerequisiteBuilding[index];
}

const BuildingRecord *BuildingRecord::GetPrerequisiteBuilding(sint32 index) const
{
    Assert(index >= 0);
    Assert(index < m_numPrerequisiteBuilding);
    if((index < 0) || (index >= m_numPrerequisiteBuilding)) {
        return 0;
    }
    return g_theBuildingDB->Get(m_PrerequisiteBuilding[index]);
}

