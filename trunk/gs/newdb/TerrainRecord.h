
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Terrain_RECORD_H__
#define __Terrain_RECORD_H__

/*
 * Terrain description
 */
#include "CTPRecord.h"
//
// m_flags0
#define k_Terrain_CanDie_Bit                     0x00000001
#define k_Terrain_GLHidden_Bit                   0x00000002
#define k_Terrain_TransformAdd_Bit               0x00000004
#define k_Terrain_TransformRemove_Bit            0x00000008
#define k_Terrain_EnvCity_Bit                    0x00000010
#define k_Terrain_EnvRiver_Bit                   0x00000020
#define k_Terrain_NoIndex_Bit                    0x00000040
//
// m_MovementType bit group
#define k_Terrain_MovementType_Land_Bit          0x00000001
#define k_Terrain_MovementType_Sea_Bit           0x00000002
#define k_Terrain_MovementType_Air_Bit           0x00000004
#define k_Terrain_MovementType_Mountain_Bit      0x00000008
#define k_Terrain_MovementType_Trade_Bit         0x00000010
#define k_Terrain_MovementType_ShallowWater_Bit  0x00000020
#define k_Terrain_MovementType_Space_Bit         0x00000040
//
// m_InternalType bit group
#define k_Terrain_InternalType_Forest_Bit        0x00000001
#define k_Terrain_InternalType_Plains_Bit        0x00000002
#define k_Terrain_InternalType_Tundra_Bit        0x00000004
#define k_Terrain_InternalType_Glacier_Bit       0x00000008
#define k_Terrain_InternalType_Grassland_Bit     0x00000010
#define k_Terrain_InternalType_Desert_Bit        0x00000020
#define k_Terrain_InternalType_Swamp_Bit         0x00000040
#define k_Terrain_InternalType_Jungle_Bit        0x00000080
#define k_Terrain_InternalType_Mountain_Bit      0x00000100
#define k_Terrain_InternalType_Hill_Bit          0x00000200
#define k_Terrain_InternalType_WaterShallow_Bit  0x00000400
#define k_Terrain_InternalType_WaterDeep_Bit     0x00000800
#define k_Terrain_InternalType_WaterVolcano_Bit  0x00001000
#define k_Terrain_InternalType_WaterBeach_Bit    0x00002000
#define k_Terrain_InternalType_WaterShelf_Bit    0x00004000
#define k_Terrain_InternalType_WaterTrench_Bit   0x00008000
#define k_Terrain_InternalType_WaterRift_Bit     0x00010000
#define k_Terrain_InternalType_Dead_Bit          0x00020000
#define k_Terrain_InternalType_BrownHill_Bit     0x00040000
#define k_Terrain_InternalType_BrownMountain_Bit 0x00080000
#define k_Terrain_InternalType_WhiteHill_Bit     0x00100000
#define k_Terrain_InternalType_WhiteMountain_Bit 0x00200000
#define k_Terrain_InternalType_WaterKelp_Bit     0x00400000
#define k_Terrain_InternalType_WaterReef_Bit     0x00800000
#define k_Terrain_InternalType_Special_Bit       0x01000000
//
// m_flags0
#define k_Modifiers_Movement_Bit                 0x00000001
//
// Range definitions
#define k_MAX_Resources                      4

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class IconRecord;
class AdvanceRecord;
class AdvanceRecord;
class ResourceRecord;

class TerrainRecord : public CTPRecord
{
public:
    typedef sint32 (TerrainRecord::*IntAccessor)() const;
    typedef bool (TerrainRecord::*BoolAccessor)() const;
    typedef double (TerrainRecord::*FloatAccessor)() const ;
    typedef bool (TerrainRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (TerrainRecord::*BitFloatAccessor)(double &val) const;
    class TransformData {
    private:
        sint32            m_Time;
        sint32            m_Materials;
    public:
        TransformData();
        ~TransformData();
        void operator=(const TransformData & rval);
        bool operator==(const TransformData & rval) { 
          return false; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, TransformData **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, TransformData *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        sint32           GetTime() const { return m_Time; }
        sint32           GetMaterials() const { return m_Materials; }
    }; /* class TransformData */

    class Modifiers {
    private:
        uint32 m_flags0;

        sint32            m_Score;
        sint32            m_Gold;
        sint32            m_DeadGold;
        sint32            m_Food;
        sint32            m_Shield;
        sint32            m_MovementValue;
        sint32            m_Freight;
        sint32            m_Materials;
        sint32            m_Time;
        double            m_Defense;
        sint32            m_DeadFood;
        sint32            m_DeadShield;
    public:
        Modifiers();
        ~Modifiers();
        void operator=(const Modifiers & rval);
        bool operator==(const Modifiers & rval) { 
          return false; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, Modifiers **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, Modifiers *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        sint32           GetScore() const { return m_Score; }
        sint32           GetGold() const { return m_Gold; }
        sint32           GetDeadGold() const { return m_DeadGold; }
        sint32           GetFood() const { return m_Food; }
        sint32           GetShield() const { return m_Shield; }
        bool             GetMovement() const { return (m_flags0 & k_Modifiers_Movement_Bit) != 0; }
    bool             GetMovement(sint32 &value) const {
                         if((m_flags0 & k_Modifiers_Movement_Bit) == 0) return false;
                         value = m_MovementValue;
                         return true;
                     }
        sint32           GetFreight() const { return m_Freight; }
        sint32           GetMaterials() const { return m_Materials; }
        sint32           GetTime() const { return m_Time; }
        double           GetDefense() const { return m_Defense; }
        sint32           GetDeadFood() const { return m_DeadFood; }
        sint32           GetDeadShield() const { return m_DeadShield; }
    }; /* class Modifiers */

private:
    uint32 m_flags0;

    sint32            m_Icon; // Index into Icon database
    sint32            m_AddAdvance; // Index into Advance database
    sint32            m_RemoveAdvance; // Index into Advance database
    TransformData     m_TransformAddValue;
    TransformData     m_TransformRemoveValue;
    Modifiers         m_EnvBase;
    Modifiers         m_EnvCityValue;
    Modifiers         m_EnvRiverValue;
    sint32            m_Resources[k_MAX_Resources]; // Index into Resource database
    sint32           m_numResources;
    uint32            m_MovementType;
    uint32            m_InternalType;
    sint32            m_TilesetIndex;

public:
    TerrainRecord() { Init(); };
    ~TerrainRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    TerrainRecord(const TerrainRecord &rval) { Init(); *this = rval; }
    void operator=(const TerrainRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const TerrainRecord & rval);
    sint32 ParseMovementTypeBit(DBLexer *lex);
    sint32 ParseInternalTypeBit(DBLexer *lex);
    //
    // Accessors
    //
    sint32           GetIconIndex() const { return m_Icon; }
    const IconRecord *GetIcon() const;
    sint32           GetAddAdvanceIndex() const { return m_AddAdvance; }
    const AdvanceRecord *GetAddAdvance() const;
    sint32           GetRemoveAdvanceIndex() const { return m_RemoveAdvance; }
    const AdvanceRecord *GetRemoveAdvance() const;
    bool             GetCanDie() const { return (m_flags0 & k_Terrain_CanDie_Bit) != 0; }
    bool             GetGLHidden() const { return (m_flags0 & k_Terrain_GLHidden_Bit) != 0; }
    bool             GetTransformAdd() const { return (m_flags0 & k_Terrain_TransformAdd_Bit) != 0; }
    bool             GetTransformAdd(const TransformData *&ptr) const {
                         if((m_flags0 & k_Terrain_TransformAdd_Bit) == 0) return false;
                         ptr = &m_TransformAddValue;
                         return true;
                     }
    const TransformData        *GetTransformAddPtr() const {
                         if((m_flags0 & k_Terrain_TransformAdd_Bit) == 0) return NULL;
                         return &m_TransformAddValue;
                     }
    bool             GetTransformRemove() const { return (m_flags0 & k_Terrain_TransformRemove_Bit) != 0; }
    bool             GetTransformRemove(const TransformData *&ptr) const {
                         if((m_flags0 & k_Terrain_TransformRemove_Bit) == 0) return false;
                         ptr = &m_TransformRemoveValue;
                         return true;
                     }
    const TransformData        *GetTransformRemovePtr() const {
                         if((m_flags0 & k_Terrain_TransformRemove_Bit) == 0) return NULL;
                         return &m_TransformRemoveValue;
                     }
    const Modifiers *GetEnvBase() const { return &m_EnvBase; }
    bool             GetEnvCity() const { return (m_flags0 & k_Terrain_EnvCity_Bit) != 0; }
    bool             GetEnvCity(const Modifiers *&ptr) const {
                         if((m_flags0 & k_Terrain_EnvCity_Bit) == 0) return false;
                         ptr = &m_EnvCityValue;
                         return true;
                     }
    const Modifiers        *GetEnvCityPtr() const {
                         if((m_flags0 & k_Terrain_EnvCity_Bit) == 0) return NULL;
                         return &m_EnvCityValue;
                     }
    bool             GetEnvRiver() const { return (m_flags0 & k_Terrain_EnvRiver_Bit) != 0; }
    bool             GetEnvRiver(const Modifiers *&ptr) const {
                         if((m_flags0 & k_Terrain_EnvRiver_Bit) == 0) return false;
                         ptr = &m_EnvRiverValue;
                         return true;
                     }
    const Modifiers        *GetEnvRiverPtr() const {
                         if((m_flags0 & k_Terrain_EnvRiver_Bit) == 0) return NULL;
                         return &m_EnvRiverValue;
                     }
    sint32           GetResourcesIndex(sint32 index) const;
    const ResourceRecord *GetResources(sint32 index) const;
    sint32           GetNumResources() const { return m_numResources;}
    bool             GetNoIndex() const { return (m_flags0 & k_Terrain_NoIndex_Bit) != 0; }

    //
    // MovementType flag group
    uint32           GetMovementType() const { return m_MovementType; }
    bool             GetMovementTypeLand() const { return (m_MovementType & k_Terrain_MovementType_Land_Bit) != 0; }
    bool             GetMovementTypeSea() const { return (m_MovementType & k_Terrain_MovementType_Sea_Bit) != 0; }
    bool             GetMovementTypeAir() const { return (m_MovementType & k_Terrain_MovementType_Air_Bit) != 0; }
    bool             GetMovementTypeMountain() const { return (m_MovementType & k_Terrain_MovementType_Mountain_Bit) != 0; }
    bool             GetMovementTypeTrade() const { return (m_MovementType & k_Terrain_MovementType_Trade_Bit) != 0; }
    bool             GetMovementTypeShallowWater() const { return (m_MovementType & k_Terrain_MovementType_ShallowWater_Bit) != 0; }
    bool             GetMovementTypeSpace() const { return (m_MovementType & k_Terrain_MovementType_Space_Bit) != 0; }
    // End MovementType flag group
    //

    //
    // InternalType flag group
    uint32           GetInternalType() const { return m_InternalType; }
    bool             GetInternalTypeForest() const { return (m_InternalType & k_Terrain_InternalType_Forest_Bit) != 0; }
    bool             GetInternalTypePlains() const { return (m_InternalType & k_Terrain_InternalType_Plains_Bit) != 0; }
    bool             GetInternalTypeTundra() const { return (m_InternalType & k_Terrain_InternalType_Tundra_Bit) != 0; }
    bool             GetInternalTypeGlacier() const { return (m_InternalType & k_Terrain_InternalType_Glacier_Bit) != 0; }
    bool             GetInternalTypeGrassland() const { return (m_InternalType & k_Terrain_InternalType_Grassland_Bit) != 0; }
    bool             GetInternalTypeDesert() const { return (m_InternalType & k_Terrain_InternalType_Desert_Bit) != 0; }
    bool             GetInternalTypeSwamp() const { return (m_InternalType & k_Terrain_InternalType_Swamp_Bit) != 0; }
    bool             GetInternalTypeJungle() const { return (m_InternalType & k_Terrain_InternalType_Jungle_Bit) != 0; }
    bool             GetInternalTypeMountain() const { return (m_InternalType & k_Terrain_InternalType_Mountain_Bit) != 0; }
    bool             GetInternalTypeHill() const { return (m_InternalType & k_Terrain_InternalType_Hill_Bit) != 0; }
    bool             GetInternalTypeWaterShallow() const { return (m_InternalType & k_Terrain_InternalType_WaterShallow_Bit) != 0; }
    bool             GetInternalTypeWaterDeep() const { return (m_InternalType & k_Terrain_InternalType_WaterDeep_Bit) != 0; }
    bool             GetInternalTypeWaterVolcano() const { return (m_InternalType & k_Terrain_InternalType_WaterVolcano_Bit) != 0; }
    bool             GetInternalTypeWaterBeach() const { return (m_InternalType & k_Terrain_InternalType_WaterBeach_Bit) != 0; }
    bool             GetInternalTypeWaterShelf() const { return (m_InternalType & k_Terrain_InternalType_WaterShelf_Bit) != 0; }
    bool             GetInternalTypeWaterTrench() const { return (m_InternalType & k_Terrain_InternalType_WaterTrench_Bit) != 0; }
    bool             GetInternalTypeWaterRift() const { return (m_InternalType & k_Terrain_InternalType_WaterRift_Bit) != 0; }
    bool             GetInternalTypeDead() const { return (m_InternalType & k_Terrain_InternalType_Dead_Bit) != 0; }
    bool             GetInternalTypeBrownHill() const { return (m_InternalType & k_Terrain_InternalType_BrownHill_Bit) != 0; }
    bool             GetInternalTypeBrownMountain() const { return (m_InternalType & k_Terrain_InternalType_BrownMountain_Bit) != 0; }
    bool             GetInternalTypeWhiteHill() const { return (m_InternalType & k_Terrain_InternalType_WhiteHill_Bit) != 0; }
    bool             GetInternalTypeWhiteMountain() const { return (m_InternalType & k_Terrain_InternalType_WhiteMountain_Bit) != 0; }
    bool             GetInternalTypeWaterKelp() const { return (m_InternalType & k_Terrain_InternalType_WaterKelp_Bit) != 0; }
    bool             GetInternalTypeWaterReef() const { return (m_InternalType & k_Terrain_InternalType_WaterReef_Bit) != 0; }
    bool             GetInternalTypeSpecial() const { return (m_InternalType & k_Terrain_InternalType_Special_Bit) != 0; }
    // End InternalType flag group
    //
    sint32           GetTilesetIndex() const { return m_TilesetIndex; }
}; /* TerrainRecord */

struct TerrainRecordAccessorInfo {
    TerrainRecord::IntAccessor m_intAccessor;
    TerrainRecord::BoolAccessor m_boolAccessor;
    TerrainRecord::FloatAccessor m_floatAccessor;
    TerrainRecord::BitIntAccessor m_bitIntAccessor;
    TerrainRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern TerrainRecordAccessorInfo g_TerrainRecord_Accessors[];
extern char *g_Terrain_Tokens[];
#define k_Num_TerrainRecord_Tokens 19

template <class T> class CTPDatabase;
extern CTPDatabase<TerrainRecord> *g_theTerrainDB;

#endif /* ifndef __Terrain_RECORD_H__ */
