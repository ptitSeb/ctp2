
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Government_RECORD_H__
#define __Government_RECORD_H__

/*
 * Government description
 */
#include "CTPRecord.h"
//
// m_flags0
#define k_Government_IsEcotopia_Bit              0x00000001
#define k_Government_GLHidden_Bit                0x00000002
//
// Range definitions
#define k_MAX_ObsoleteAdvance                5

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class AdvanceRecord;
class AdvanceRecord;
class IconRecord;

class GovernmentRecord : public CTPRecord
{
public:
    typedef sint32 (GovernmentRecord::*IntAccessor)() const;
    typedef bool (GovernmentRecord::*BoolAccessor)() const;
    typedef double (GovernmentRecord::*FloatAccessor)() const ;
    typedef bool (GovernmentRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (GovernmentRecord::*BitFloatAccessor)(double &val) const;
private:
    uint32 m_flags0;

    double            m_PositiveWorkdayCoef;
    double            m_NegativeWorkdayCoef;
    sint32            m_WorkdayExpectation;
    double            m_PositiveWagesCoef;
    double            m_NegativeWagesCoef;
    sint32            m_WagesExpectation;
    double            m_PositiveRationsCoef;
    double            m_NegativeRationsCoef;
    sint32            m_RationsExpectation;
    double            m_KnowledgeCoef;
    double            m_PollutionCoef;
    double            m_PollutionUnhappyCoef;
    double            m_ConquestDistress;
    double            m_ConquestDistressDecay;
    double            m_EmpireDistanceScale;
    sint32            m_MinEmpireDistance;
    sint32            m_MaxEmpireDistance;
    sint32            m_TooManyCitiesThreshold;
    double            m_TooManyCitiesCoefficient;
    sint32            m_MaxMartialLawUnits;
    double            m_MartialLawEffect;
    sint32            m_MartialLawThreshold;
    sint32            m_AtHomeRadius;
    double            m_OverseasCoef;
    double            m_OverseasDefeatDecay;
    double            m_OverseasDefeatCoef;
    double            m_HomeDefeatDecay;
    double            m_HomeDefeatCoef;
    double            m_CrimeCoef;
    sint32            m_CrimeOffset;
    sint32            m_ProfessionalUnits;
    sint32            m_TurnsToNewReadiness;
    double            m_ReadyPeaceCoef;
    double            m_ReadyPeaceHP;
    double            m_ReadyAlertCoef;
    double            m_ReadyAlertHP;
    double            m_ReadyWarCoef;
    double            m_ReadyWarHP;
    double            m_FoodCoef;
    double            m_GoldCoef;
    double            m_ProductionCoef;
    double            m_SupportCoef;
    double            m_DefenseCoef;
    sint32            m_EnableAdvance; // Index into Advance database
    sint32            m_ObsoleteAdvance[k_MAX_ObsoleteAdvance]; // Index into Advance database
    sint32           m_numObsoleteAdvance;
    sint32            m_Icon; // Index into Icon database
    sint32            m_GrowthRank;
    sint32            m_ProductionRank;
    sint32            m_ScienceRank;
    sint32            m_GoldRank;
    sint32            m_MilitaryRank;
    sint32            m_CommerceRank;
    sint32            m_PollutionRank;
    sint32            m_LoyaltyRank;
    sint32            m_MartialLawRank;
    double            m_MaxScienceRate;
    double            m_UnitRushModifier;
    double            m_BuildingRushModifier;
    double            m_WonderRushModifier;
    double            m_EndGameRushModifier;
    sint32            m_MaxIncomingTrade;
    sint32            m_MaxOutgoingTrade;
    double            m_InfrastructureCoefficient;
    double            m_CapitalizationCoefficient;
    sint32            m_WarDiscontentMaxUnits;
    double            m_WarDiscontentPerUnit;
    sint32            m_Rank;
    sint32            m_SameRankAdvice;
    sint32            m_HigherRankAdvice;

public:
    GovernmentRecord() { Init(); };
    ~GovernmentRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    GovernmentRecord(const GovernmentRecord &rval) { Init(); *this = rval; }
    void operator=(const GovernmentRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const GovernmentRecord & rval);
    //
    // Accessors
    //
    double           GetPositiveWorkdayCoef() const { return m_PositiveWorkdayCoef; }
    double           GetNegativeWorkdayCoef() const { return m_NegativeWorkdayCoef; }
    sint32           GetWorkdayExpectation() const { return m_WorkdayExpectation; }
    double           GetPositiveWagesCoef() const { return m_PositiveWagesCoef; }
    double           GetNegativeWagesCoef() const { return m_NegativeWagesCoef; }
    sint32           GetWagesExpectation() const { return m_WagesExpectation; }
    double           GetPositiveRationsCoef() const { return m_PositiveRationsCoef; }
    double           GetNegativeRationsCoef() const { return m_NegativeRationsCoef; }
    sint32           GetRationsExpectation() const { return m_RationsExpectation; }
    double           GetKnowledgeCoef() const { return m_KnowledgeCoef; }
    double           GetPollutionCoef() const { return m_PollutionCoef; }
    double           GetPollutionUnhappyCoef() const { return m_PollutionUnhappyCoef; }
    double           GetConquestDistress() const { return m_ConquestDistress; }
    double           GetConquestDistressDecay() const { return m_ConquestDistressDecay; }
    double           GetEmpireDistanceScale() const { return m_EmpireDistanceScale; }
    sint32           GetMinEmpireDistance() const { return m_MinEmpireDistance; }
    sint32           GetMaxEmpireDistance() const { return m_MaxEmpireDistance; }
    sint32           GetTooManyCitiesThreshold() const { return m_TooManyCitiesThreshold; }
    double           GetTooManyCitiesCoefficient() const { return m_TooManyCitiesCoefficient; }
    sint32           GetMaxMartialLawUnits() const { return m_MaxMartialLawUnits; }
    double           GetMartialLawEffect() const { return m_MartialLawEffect; }
    sint32           GetMartialLawThreshold() const { return m_MartialLawThreshold; }
    sint32           GetAtHomeRadius() const { return m_AtHomeRadius; }
    double           GetOverseasCoef() const { return m_OverseasCoef; }
    double           GetOverseasDefeatDecay() const { return m_OverseasDefeatDecay; }
    double           GetOverseasDefeatCoef() const { return m_OverseasDefeatCoef; }
    double           GetHomeDefeatDecay() const { return m_HomeDefeatDecay; }
    double           GetHomeDefeatCoef() const { return m_HomeDefeatCoef; }
    double           GetCrimeCoef() const { return m_CrimeCoef; }
    sint32           GetCrimeOffset() const { return m_CrimeOffset; }
    sint32           GetProfessionalUnits() const { return m_ProfessionalUnits; }
    sint32           GetTurnsToNewReadiness() const { return m_TurnsToNewReadiness; }
    double           GetReadyPeaceCoef() const { return m_ReadyPeaceCoef; }
    double           GetReadyPeaceHP() const { return m_ReadyPeaceHP; }
    double           GetReadyAlertCoef() const { return m_ReadyAlertCoef; }
    double           GetReadyAlertHP() const { return m_ReadyAlertHP; }
    double           GetReadyWarCoef() const { return m_ReadyWarCoef; }
    double           GetReadyWarHP() const { return m_ReadyWarHP; }
    double           GetFoodCoef() const { return m_FoodCoef; }
    double           GetGoldCoef() const { return m_GoldCoef; }
    double           GetProductionCoef() const { return m_ProductionCoef; }
    double           GetSupportCoef() const { return m_SupportCoef; }
    double           GetDefenseCoef() const { return m_DefenseCoef; }
    sint32           GetEnableAdvanceIndex() const { return m_EnableAdvance; }
    const AdvanceRecord *GetEnableAdvance() const;
    sint32           GetObsoleteAdvanceIndex(sint32 index) const;
    const AdvanceRecord *GetObsoleteAdvance(sint32 index) const;
    sint32           GetNumObsoleteAdvance() const { return m_numObsoleteAdvance;}
    sint32           GetIconIndex() const { return m_Icon; }
    const IconRecord *GetIcon() const;
    sint32           GetGrowthRank() const { return m_GrowthRank; }
    sint32           GetProductionRank() const { return m_ProductionRank; }
    sint32           GetScienceRank() const { return m_ScienceRank; }
    sint32           GetGoldRank() const { return m_GoldRank; }
    sint32           GetMilitaryRank() const { return m_MilitaryRank; }
    sint32           GetCommerceRank() const { return m_CommerceRank; }
    sint32           GetPollutionRank() const { return m_PollutionRank; }
    sint32           GetLoyaltyRank() const { return m_LoyaltyRank; }
    sint32           GetMartialLawRank() const { return m_MartialLawRank; }
    double           GetMaxScienceRate() const { return m_MaxScienceRate; }
    double           GetUnitRushModifier() const { return m_UnitRushModifier; }
    double           GetBuildingRushModifier() const { return m_BuildingRushModifier; }
    double           GetWonderRushModifier() const { return m_WonderRushModifier; }
    double           GetEndGameRushModifier() const { return m_EndGameRushModifier; }
    sint32           GetMaxIncomingTrade() const { return m_MaxIncomingTrade; }
    sint32           GetMaxOutgoingTrade() const { return m_MaxOutgoingTrade; }
    double           GetInfrastructureCoefficient() const { return m_InfrastructureCoefficient; }
    double           GetCapitalizationCoefficient() const { return m_CapitalizationCoefficient; }
    sint32           GetWarDiscontentMaxUnits() const { return m_WarDiscontentMaxUnits; }
    double           GetWarDiscontentPerUnit() const { return m_WarDiscontentPerUnit; }
    bool             GetIsEcotopia() const { return (m_flags0 & k_Government_IsEcotopia_Bit) != 0; }
    bool             GetGLHidden() const { return (m_flags0 & k_Government_GLHidden_Bit) != 0; }
    sint32           GetRank() const { return m_Rank; }
    sint32           GetSameRankAdvice() const { return m_SameRankAdvice; }
    sint32           GetHigherRankAdvice() const { return m_HigherRankAdvice; }
}; /* GovernmentRecord */

struct GovernmentRecordAccessorInfo {
    GovernmentRecord::IntAccessor m_intAccessor;
    GovernmentRecord::BoolAccessor m_boolAccessor;
    GovernmentRecord::FloatAccessor m_floatAccessor;
    GovernmentRecord::BitIntAccessor m_bitIntAccessor;
    GovernmentRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern GovernmentRecordAccessorInfo g_GovernmentRecord_Accessors[];
extern char *g_Government_Tokens[];
#define k_Num_GovernmentRecord_Tokens 71

template <class T> class CTPDatabase;
extern CTPDatabase<GovernmentRecord> *g_theGovernmentDB;

#endif /* ifndef __Government_RECORD_H__ */
