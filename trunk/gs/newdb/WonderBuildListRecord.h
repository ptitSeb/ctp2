
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __WonderBuildList_RECORD_H__
#define __WonderBuildList_RECORD_H__

/*
 * WonderBuildList description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class WonderRecord;

class WonderBuildListRecord : public CTPRecord
{
public:
    typedef sint32 (WonderBuildListRecord::*IntAccessor)() const;
    typedef bool (WonderBuildListRecord::*BoolAccessor)() const;
    typedef double (WonderBuildListRecord::*FloatAccessor)() const ;
    typedef bool (WonderBuildListRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (WonderBuildListRecord::*BitFloatAccessor)(double &val) const;
private:
    sint32           *m_Wonder; // Index into Wonder database
    sint32           m_numWonder;

public:
    WonderBuildListRecord() { Init(); };
    ~WonderBuildListRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    WonderBuildListRecord(const WonderBuildListRecord &rval) { Init(); *this = rval; }
    void operator=(const WonderBuildListRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const WonderBuildListRecord & rval);
    //
    // Accessors
    //
    sint32           GetWonderIndex(sint32 index) const;
    const WonderRecord *GetWonder(sint32 index) const;
    sint32           GetNumWonder() const { return m_numWonder;}
}; /* WonderBuildListRecord */

struct WonderBuildListRecordAccessorInfo {
    WonderBuildListRecord::IntAccessor m_intAccessor;
    WonderBuildListRecord::BoolAccessor m_boolAccessor;
    WonderBuildListRecord::FloatAccessor m_floatAccessor;
    WonderBuildListRecord::BitIntAccessor m_bitIntAccessor;
    WonderBuildListRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern WonderBuildListRecordAccessorInfo g_WonderBuildListRecord_Accessors[];
extern char *g_WonderBuildList_Tokens[];
#define k_Num_WonderBuildListRecord_Tokens 1

template <class T> class CTPDatabase;
extern CTPDatabase<WonderBuildListRecord> *g_theWonderBuildListDB;

#endif /* ifndef __WonderBuildList_RECORD_H__ */
