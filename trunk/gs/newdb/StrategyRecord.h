
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Strategy_RECORD_H__
#define __Strategy_RECORD_H__

/*
 * Strategy description
 */
#include "CTPRecord.h"
//
// m_flags0
#define k_Strategy_MinimumHappiness_Bit          0x00000001
#define k_Strategy_DeficitSpending_Bit           0x00000002
#define k_Strategy_MaximumWagePercent_Bit        0x00000004
#define k_Strategy_SciencePercent_Bit            0x00000008
#define k_Strategy_MaxSupportCostPercent_Bit     0x00000010
#define k_Strategy_ReadinessLevel_Bit            0x00000020
#define k_Strategy_PublicWorksPercent_Bit        0x00000040
#define k_Strategy_PublicWorksReserve_Bit        0x00000080
#define k_Strategy_MaxEvalTileImprovements_Bit   0x00000100
#define k_Strategy_TimeToFixRoads_Bit            0x00000200
#define k_Strategy_TimeToFixPollution_Bit        0x00000400
#define k_Strategy_FixPollutionThreshold_Bit     0x00000800
#define k_Strategy_RoadUtilityBonus_Bit          0x00001000
#define k_Strategy_ImproveProductionBonus_Bit    0x00002000
#define k_Strategy_ImproveGrowthBonus_Bit        0x00004000
#define k_Strategy_ImproveGoodBonus_Bit          0x00008000
#define k_Strategy_ImproveSmallCityGrowthBonus_Bit 0x00010000
#define k_Strategy_ImproveLargeCityProductionBonus_Bit 0x00020000
#define k_Strategy_DistanceModifierFactor_Bit    0x00040000
#define k_Strategy_DisbandArmyCount_Bit          0x00080000
#define k_Strategy_MinSettleDistance_Bit         0x00100000
#define k_Strategy_MinSettleScore_Bit            0x00200000
#define k_Strategy_RushBuyThreatBonus_Bit        0x00400000
#define k_Strategy_RushBuyReservePercent_Bit     0x00800000
#define k_Strategy_UnitSupportPercent_Bit        0x01000000
#define k_Strategy_MaxSettlerBuildTurns_Bit      0x02000000
#define k_Strategy_MaxUnitBuildTurns_Bit         0x04000000
#define k_Strategy_MaxWonderBuildTurns_Bit       0x08000000
#define k_Strategy_BuildTransportProductionLevel_Bit 0x10000000
#define k_Strategy_BuildSettlerProductionLevel_Bit 0x20000000
#define k_Strategy_OffensiveUnitsPercent_Bit     0x40000000
#define k_Strategy_DefensiveUnitsPercent_Bit     0x80000000
//
// m_flags1
#define k_Strategy_RangedUnitsPercent_Bit        0x00000001
#define k_Strategy_SeaUnitsPercent_Bit           0x00000002
#define k_Strategy_AirUnitsPercent_Bit           0x00000004
#define k_Strategy_SettlerUnitsCount_Bit         0x00000008
#define k_Strategy_SpecialUnitsCount_Bit         0x00000010
#define k_Strategy_SeaTransportUnitsCount_Bit    0x00000020
#define k_Strategy_AirTransportUnitsCount_Bit    0x00000040
#define k_Strategy_OffensiveUnitList_Bit         0x00000080
#define k_Strategy_DefensiveUnitList_Bit         0x00000100
#define k_Strategy_RangedUnitList_Bit            0x00000200
#define k_Strategy_SeaUnitList_Bit               0x00000400
#define k_Strategy_AirUnitList_Bit               0x00000800
#define k_Strategy_SettlerUnitList_Bit           0x00001000
#define k_Strategy_SpecialUnitList_Bit           0x00002000
#define k_Strategy_SeaTransportUnitList_Bit      0x00004000
#define k_Strategy_AirTransportUnitList_Bit      0x00008000
#define k_Strategy_FreightUnitList_Bit           0x00010000
#define k_Strategy_OffensiveGarrisonCount_Bit    0x00020000
#define k_Strategy_DefensiveGarrisonCount_Bit    0x00040000
#define k_Strategy_RangedGarrisonCount_Bit       0x00080000
#define k_Strategy_Research_Bit                  0x00100000
#define k_Strategy_StopResearch_Bit              0x00200000
#define k_Strategy_FearInvasion_Bit              0x00400000
#define k_Strategy_FearCityDefense_Bit           0x00800000
#define k_Strategy_FearPiracy_Bit                0x01000000
#define k_Strategy_FearScienceRank_Bit           0x02000000
#define k_Strategy_FearMilitaryRank_Bit          0x04000000
#define k_Strategy_FearTradeRank_Bit             0x08000000
#define k_Strategy_FearPollution_Bit             0x10000000
#define k_Strategy_DesireAttack_Bit              0x20000000
#define k_Strategy_DesireGold_Bit                0x40000000
#define k_Strategy_DesireScience_Bit             0x80000000
//
// m_flags2
#define k_Strategy_DesireMakeFriend_Bit          0x00000001
#define k_Strategy_DesireEnlistFriend_Bit        0x00000002
#define k_Strategy_PiracyMemoryTurns_Bit         0x00000004
#define k_Strategy_MaxPiracyEvents_Bit           0x00000008
#define k_Strategy_Offensive_Bit                 0x00000010
#define k_Strategy_Defensive_Bit                 0x00000020
#define k_Strategy_StealthAttack_Bit             0x00000040
#define k_Strategy_Bombard_Bit                   0x00000080
#define k_Strategy_Special_Bit                   0x00000100
#define k_Strategy_Harass_Bit                    0x00000200
#define k_Strategy_PreemptiveStrikeRegard_Bit    0x00000400
#define k_Strategy_PreemptiveStrikeRiskRatio_Bit 0x00000800
#define k_Strategy_PreemptiveStrikeSuperiorityRatio_Bit 0x00001000
//
// m_NuclearFirstStrike bit group
#define k_Strategy_NuclearFirstStrike_Enabled_Bit 0x00000001
#define k_Strategy_NuclearFirstStrike_Disabled_Bit 0x00000002
//
// m_NuclearTargeting bit group
#define k_Strategy_NuclearTargeting_Enabled_Bit  0x00000001
#define k_Strategy_NuclearTargeting_Disabled_Bit 0x00000002
//
// m_flags0
#define k_PopAssignmentElement_Top_Bit           0x00000001
#define k_PopAssignmentElement_Bottom_Bit        0x00000002
#define k_PopAssignmentElement_ProductionCities_Bit 0x00000004
#define k_PopAssignmentElement_GrowthCities_Bit  0x00000008
#define k_PopAssignmentElement_GoldCities_Bit    0x00000010
#define k_PopAssignmentElement_Default_Bit       0x00000020
//
// m_flags0
#define k_SliderElement_Production_Bit           0x00000001
#define k_SliderElement_Gold_Bit                 0x00000002
#define k_SliderElement_Food_Bit                 0x00000004
//
// m_flags0
#define k_GoalElement_ExecPerCity_Bit            0x00000001
#define k_GoalElement_EvalPerCity_Bit            0x00000002
#define k_GoalElement_PerCity_Bit                0x00000004
//
// m_flags0
#define k_BuildListSequenceElement_Top_Bit       0x00000001
#define k_BuildListSequenceElement_Bottom_Bit    0x00000002
#define k_BuildListSequenceElement_ProductionCities_Bit 0x00000004
#define k_BuildListSequenceElement_GrowthCities_Bit 0x00000008
#define k_BuildListSequenceElement_CommerceCities_Bit 0x00000010
#define k_BuildListSequenceElement_HappyCities_Bit 0x00000020
#define k_BuildListSequenceElement_ThreatenedCities_Bit 0x00000040
#define k_BuildListSequenceElement_PowerCities_Bit 0x00000080
#define k_BuildListSequenceElement_Default_Bit   0x00000100
#define k_BuildListSequenceElement_Advice_Bit    0x00000200
//
// Range definitions
#define k_MAX_Inherit                        1

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class StrategyRecord;
class GovernmentRecord;
class ImprovementListRecord;
class ImprovementListRecord;
class ImprovementListRecord;
class UnitBuildListRecord;
class UnitBuildListRecord;
class UnitBuildListRecord;
class UnitBuildListRecord;
class UnitBuildListRecord;
class UnitBuildListRecord;
class UnitBuildListRecord;
class UnitBuildListRecord;
class UnitBuildListRecord;
class UnitBuildListRecord;
class AdvanceListRecord;
class AdvanceListRecord;
class GoalRecord;
class BuildListSequenceRecord;

class StrategyRecord : public CTPRecord
{
public:
    typedef sint32 (StrategyRecord::*IntAccessor)() const;
    typedef bool (StrategyRecord::*BoolAccessor)() const;
    typedef double (StrategyRecord::*FloatAccessor)() const ;
    typedef bool (StrategyRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (StrategyRecord::*BitFloatAccessor)(double &val) const;
    class PopAssignmentElement {
    private:
        uint32 m_flags0;

        double            m_Specialists;
        double            m_FarmerPercent;
        double            m_LaborerPercent;
        double            m_MerchantPercent;
        double            m_EntertainerPercent;
        double            m_ScientistPercent;
        double            m_TopValue;
        double            m_BottomValue;
    public:
        PopAssignmentElement();
        ~PopAssignmentElement();
        void operator=(const PopAssignmentElement & rval);
        bool operator==(const PopAssignmentElement & rval) { 
          return false; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, PopAssignmentElement **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, PopAssignmentElement *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        double           GetSpecialists() const { return m_Specialists; }
        double           GetFarmerPercent() const { return m_FarmerPercent; }
        double           GetLaborerPercent() const { return m_LaborerPercent; }
        double           GetMerchantPercent() const { return m_MerchantPercent; }
        double           GetEntertainerPercent() const { return m_EntertainerPercent; }
        double           GetScientistPercent() const { return m_ScientistPercent; }
        bool             GetTop() const { return (m_flags0 & k_PopAssignmentElement_Top_Bit) != 0; }
    bool             GetTop(double &value) const {
                         if((m_flags0 & k_PopAssignmentElement_Top_Bit) == 0) return false;
                         value = m_TopValue;
                         return true;
                     }
        bool             GetBottom() const { return (m_flags0 & k_PopAssignmentElement_Bottom_Bit) != 0; }
    bool             GetBottom(double &value) const {
                         if((m_flags0 & k_PopAssignmentElement_Bottom_Bit) == 0) return false;
                         value = m_BottomValue;
                         return true;
                     }
        bool             GetProductionCities() const { return (m_flags0 & k_PopAssignmentElement_ProductionCities_Bit) != 0; }
        bool             GetGrowthCities() const { return (m_flags0 & k_PopAssignmentElement_GrowthCities_Bit) != 0; }
        bool             GetGoldCities() const { return (m_flags0 & k_PopAssignmentElement_GoldCities_Bit) != 0; }
        bool             GetDefault() const { return (m_flags0 & k_PopAssignmentElement_Default_Bit) != 0; }
    }; /* class PopAssignmentElement */

    class SliderElement {
    private:
        uint32 m_flags0;

        sint32            m_Delta;
    public:
        SliderElement();
        ~SliderElement();
        void operator=(const SliderElement & rval);
        bool operator==(const SliderElement & rval) { 
          return false; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, SliderElement **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, SliderElement *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        sint32           GetDelta() const { return m_Delta; }
        bool             GetProduction() const { return (m_flags0 & k_SliderElement_Production_Bit) != 0; }
        bool             GetGold() const { return (m_flags0 & k_SliderElement_Gold_Bit) != 0; }
        bool             GetFood() const { return (m_flags0 & k_SliderElement_Food_Bit) != 0; }
    }; /* class SliderElement */

    class GoalElement {
    private:
        uint32 m_flags0;

        sint32            m_Goal; // Index into Goal database
        sint32            m_Priority;
        double            m_MaxEval;
        double            m_MaxExec;
    public:
        GoalElement();
        ~GoalElement();
        void operator=(const GoalElement & rval);
        bool operator==(const GoalElement & rval) { 
          if (m_Goal != rval.m_Goal) 
             return false; 
          return true; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, GoalElement **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, GoalElement *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        sint32           GetGoalIndex() const { return m_Goal; }
    const GoalRecord *GetGoal() const;
        sint32           GetPriority() const { return m_Priority; }
        double           GetMaxEval() const { return m_MaxEval; }
        double           GetMaxExec() const { return m_MaxExec; }
        bool             GetExecPerCity() const { return (m_flags0 & k_GoalElement_ExecPerCity_Bit) != 0; }
        bool             GetEvalPerCity() const { return (m_flags0 & k_GoalElement_EvalPerCity_Bit) != 0; }
        bool             GetPerCity() const { return (m_flags0 & k_GoalElement_PerCity_Bit) != 0; }
    }; /* class GoalElement */

    class BuildListSequenceElement {
    private:
        uint32 m_flags0;

        sint32            m_Priority;
        sint32            m_BuildListSequence; // Index into BuildListSequence database
        double            m_TopValue;
        double            m_BottomValue;
        sint32            m_AdviceValue;
    public:
        BuildListSequenceElement();
        ~BuildListSequenceElement();
        void operator=(const BuildListSequenceElement & rval);
        bool operator==(const BuildListSequenceElement & rval) { 
          if (m_BuildListSequence != rval.m_BuildListSequence) 
             return false; 
          return true; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, BuildListSequenceElement **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, BuildListSequenceElement *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        sint32           GetPriority() const { return m_Priority; }
        sint32           GetBuildListSequenceIndex() const { return m_BuildListSequence; }
    const BuildListSequenceRecord *GetBuildListSequence() const;
        bool             GetTop() const { return (m_flags0 & k_BuildListSequenceElement_Top_Bit) != 0; }
    bool             GetTop(double &value) const {
                         if((m_flags0 & k_BuildListSequenceElement_Top_Bit) == 0) return false;
                         value = m_TopValue;
                         return true;
                     }
        bool             GetBottom() const { return (m_flags0 & k_BuildListSequenceElement_Bottom_Bit) != 0; }
    bool             GetBottom(double &value) const {
                         if((m_flags0 & k_BuildListSequenceElement_Bottom_Bit) == 0) return false;
                         value = m_BottomValue;
                         return true;
                     }
        bool             GetProductionCities() const { return (m_flags0 & k_BuildListSequenceElement_ProductionCities_Bit) != 0; }
        bool             GetGrowthCities() const { return (m_flags0 & k_BuildListSequenceElement_GrowthCities_Bit) != 0; }
        bool             GetCommerceCities() const { return (m_flags0 & k_BuildListSequenceElement_CommerceCities_Bit) != 0; }
        bool             GetHappyCities() const { return (m_flags0 & k_BuildListSequenceElement_HappyCities_Bit) != 0; }
        bool             GetThreatenedCities() const { return (m_flags0 & k_BuildListSequenceElement_ThreatenedCities_Bit) != 0; }
        bool             GetPowerCities() const { return (m_flags0 & k_BuildListSequenceElement_PowerCities_Bit) != 0; }
        bool             GetDefault() const { return (m_flags0 & k_BuildListSequenceElement_Default_Bit) != 0; }
        bool             GetAdvice() const { return (m_flags0 & k_BuildListSequenceElement_Advice_Bit) != 0; }
    bool             GetAdvice(sint32 &value) const {
                         if((m_flags0 & k_BuildListSequenceElement_Advice_Bit) == 0) return false;
                         value = m_AdviceValue;
                         return true;
                     }
    }; /* class BuildListSequenceElement */

    class ForceMatch {
    private:
        double            m_AttackMatch;
        double            m_DefenseMatch;
        double            m_RangedMatch;
        double            m_BombardMatch;
        double            m_ValueMatch;
    public:
        ForceMatch();
        ~ForceMatch();
        void operator=(const ForceMatch & rval);
        bool operator==(const ForceMatch & rval) { 
          return false; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, ForceMatch **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, ForceMatch *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        double           GetAttackMatch() const { return m_AttackMatch; }
        double           GetDefenseMatch() const { return m_DefenseMatch; }
        double           GetRangedMatch() const { return m_RangedMatch; }
        double           GetBombardMatch() const { return m_BombardMatch; }
        double           GetValueMatch() const { return m_ValueMatch; }
    }; /* class ForceMatch */

private:
    uint32 m_flags0;
    uint32 m_flags1;
    uint32 m_flags2;

    sint32            m_Inherit[k_MAX_Inherit]; // Index into Strategy database
    sint32           m_numInherit;
    PopAssignmentElement  *m_PopAssignmentElement;
    sint32           m_numPopAssignmentElement;
    sint32           *m_Government; // Index into Government database
    sint32           m_numGovernment;
    sint32            m_MinimumHappinessValue;
    double            m_DeficitSpendingValue;
    double            m_MaximumWagePercentValue;
    SliderElement    *m_SliderElement;
    sint32           m_numSliderElement;
    sint32            m_SciencePercentValue;
    sint32            m_MaxSupportCostPercentValue;
    sint32            m_ReadinessLevelValue;
    sint32            m_PublicWorksPercentValue;
    sint32            m_PublicWorksReserveValue;
    sint32            m_MaxEvalTileImprovementsValue;
    sint32            m_TimeToFixRoadsValue;
    sint32            m_TimeToFixPollutionValue;
    sint32            m_FixPollutionThresholdValue;
    double            m_RoadUtilityBonusValue;
    double            m_ImproveProductionBonusValue;
    double            m_ImproveGrowthBonusValue;
    double            m_ImproveGoodBonusValue;
    double            m_ImproveSmallCityGrowthBonusValue;
    double            m_ImproveLargeCityProductionBonusValue;
    sint32            m_ImproveGrowthList; // Index into ImprovementList database
    sint32            m_ImproveProductionList; // Index into ImprovementList database
    sint32            m_ImproveRandomList; // Index into ImprovementList database
    GoalElement      *m_GoalElement;
    sint32           m_numGoalElement;
    sint32            m_DistanceModifierFactorValue;
    sint32            m_DisbandArmyCountValue;
    sint32            m_MinSettleDistanceValue;
    sint32            m_MinSettleScoreValue;
    sint32            m_RushBuyThreatBonusValue;
    double            m_RushBuyReservePercentValue;
    double            m_UnitSupportPercentValue;
    sint32            m_MaxSettlerBuildTurnsValue;
    sint32            m_MaxUnitBuildTurnsValue;
    sint32            m_MaxWonderBuildTurnsValue;
    double            m_BuildTransportProductionLevelValue;
    double            m_BuildSettlerProductionLevelValue;
    double            m_OffensiveUnitsPercentValue;
    double            m_DefensiveUnitsPercentValue;
    double            m_RangedUnitsPercentValue;
    double            m_SeaUnitsPercentValue;
    double            m_AirUnitsPercentValue;
    sint32            m_SettlerUnitsCountValue;
    sint32            m_SpecialUnitsCountValue;
    sint32            m_SeaTransportUnitsCountValue;
    sint32            m_AirTransportUnitsCountValue;
    sint32            m_OffensiveUnitListValue; // Index into UnitBuildList database
    sint32            m_DefensiveUnitListValue; // Index into UnitBuildList database
    sint32            m_RangedUnitListValue; // Index into UnitBuildList database
    sint32            m_SeaUnitListValue; // Index into UnitBuildList database
    sint32            m_AirUnitListValue; // Index into UnitBuildList database
    sint32            m_SettlerUnitListValue; // Index into UnitBuildList database
    sint32            m_SpecialUnitListValue; // Index into UnitBuildList database
    sint32            m_SeaTransportUnitListValue; // Index into UnitBuildList database
    sint32            m_AirTransportUnitListValue; // Index into UnitBuildList database
    sint32            m_FreightUnitListValue; // Index into UnitBuildList database
    sint32            m_OffensiveGarrisonCountValue;
    sint32            m_DefensiveGarrisonCountValue;
    sint32            m_RangedGarrisonCountValue;
    BuildListSequenceElement  *m_BuildListSequenceElement;
    sint32           m_numBuildListSequenceElement;
    sint32            m_ResearchValue; // Index into AdvanceList database
    sint32            m_StopResearchValue; // Index into AdvanceList database
    sint32            m_FearInvasionValue;
    sint32            m_FearCityDefenseValue;
    sint32            m_FearPiracyValue;
    sint32            m_FearScienceRankValue;
    sint32            m_FearMilitaryRankValue;
    sint32            m_FearTradeRankValue;
    sint32            m_FearPollutionValue;
    sint32            m_DesireAttackValue;
    sint32            m_DesireGoldValue;
    sint32            m_DesireScienceValue;
    sint32            m_DesireMakeFriendValue;
    sint32            m_DesireEnlistFriendValue;
    sint32            m_PiracyMemoryTurnsValue;
    sint32            m_MaxPiracyEventsValue;
    ForceMatch        m_OffensiveValue;
    ForceMatch        m_DefensiveValue;
    ForceMatch        m_StealthAttackValue;
    ForceMatch        m_BombardValue;
    ForceMatch        m_SpecialValue;
    ForceMatch        m_HarassValue;
    uint32            m_NuclearFirstStrike;
    uint32            m_NuclearTargeting;
    sint32            m_PreemptiveStrikeRegardValue;
    double            m_PreemptiveStrikeRiskRatioValue;
    double            m_PreemptiveStrikeSuperiorityRatioValue;

public:
    StrategyRecord() { Init(); };
    ~StrategyRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    StrategyRecord(const StrategyRecord &rval) { Init(); *this = rval; }
    void operator=(const StrategyRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const StrategyRecord & rval);
    sint32 ParseNuclearFirstStrikeBit(DBLexer *lex);
    sint32 ParseNuclearTargetingBit(DBLexer *lex);
    //
    // Accessors
    //
    sint32           GetInheritIndex(sint32 index) const;
    const StrategyRecord *GetInherit(sint32 index) const;
    sint32           GetNumInherit() const { return m_numInherit;}
    const PopAssignmentElement *GetPopAssignmentElement(sint32 index) const;
    sint32           GetNumPopAssignmentElement() const { return m_numPopAssignmentElement;}
    sint32           GetGovernmentIndex(sint32 index) const;
    const GovernmentRecord *GetGovernment(sint32 index) const;
    sint32           GetNumGovernment() const { return m_numGovernment;}
    bool             GetMinimumHappiness() const { return (m_flags0 & k_Strategy_MinimumHappiness_Bit) != 0; }
    bool             GetMinimumHappiness(sint32 &value) const {
                         if((m_flags0 & k_Strategy_MinimumHappiness_Bit) == 0) return false;
                         value = m_MinimumHappinessValue;
                         return true;
                     }
    bool             GetDeficitSpending() const { return (m_flags0 & k_Strategy_DeficitSpending_Bit) != 0; }
    bool             GetDeficitSpending(double &value) const {
                         if((m_flags0 & k_Strategy_DeficitSpending_Bit) == 0) return false;
                         value = m_DeficitSpendingValue;
                         return true;
                     }
    bool             GetMaximumWagePercent() const { return (m_flags0 & k_Strategy_MaximumWagePercent_Bit) != 0; }
    bool             GetMaximumWagePercent(double &value) const {
                         if((m_flags0 & k_Strategy_MaximumWagePercent_Bit) == 0) return false;
                         value = m_MaximumWagePercentValue;
                         return true;
                     }
    const SliderElement *GetSliderElement(sint32 index) const;
    sint32           GetNumSliderElement() const { return m_numSliderElement;}
    bool             GetSciencePercent() const { return (m_flags0 & k_Strategy_SciencePercent_Bit) != 0; }
    bool             GetSciencePercent(sint32 &value) const {
                         if((m_flags0 & k_Strategy_SciencePercent_Bit) == 0) return false;
                         value = m_SciencePercentValue;
                         return true;
                     }
    bool             GetMaxSupportCostPercent() const { return (m_flags0 & k_Strategy_MaxSupportCostPercent_Bit) != 0; }
    bool             GetMaxSupportCostPercent(sint32 &value) const {
                         if((m_flags0 & k_Strategy_MaxSupportCostPercent_Bit) == 0) return false;
                         value = m_MaxSupportCostPercentValue;
                         return true;
                     }
    bool             GetReadinessLevel() const { return (m_flags0 & k_Strategy_ReadinessLevel_Bit) != 0; }
    bool             GetReadinessLevel(sint32 &value) const {
                         if((m_flags0 & k_Strategy_ReadinessLevel_Bit) == 0) return false;
                         value = m_ReadinessLevelValue;
                         return true;
                     }
    bool             GetPublicWorksPercent() const { return (m_flags0 & k_Strategy_PublicWorksPercent_Bit) != 0; }
    bool             GetPublicWorksPercent(sint32 &value) const {
                         if((m_flags0 & k_Strategy_PublicWorksPercent_Bit) == 0) return false;
                         value = m_PublicWorksPercentValue;
                         return true;
                     }
    bool             GetPublicWorksReserve() const { return (m_flags0 & k_Strategy_PublicWorksReserve_Bit) != 0; }
    bool             GetPublicWorksReserve(sint32 &value) const {
                         if((m_flags0 & k_Strategy_PublicWorksReserve_Bit) == 0) return false;
                         value = m_PublicWorksReserveValue;
                         return true;
                     }
    bool             GetMaxEvalTileImprovements() const { return (m_flags0 & k_Strategy_MaxEvalTileImprovements_Bit) != 0; }
    bool             GetMaxEvalTileImprovements(sint32 &value) const {
                         if((m_flags0 & k_Strategy_MaxEvalTileImprovements_Bit) == 0) return false;
                         value = m_MaxEvalTileImprovementsValue;
                         return true;
                     }
    bool             GetTimeToFixRoads() const { return (m_flags0 & k_Strategy_TimeToFixRoads_Bit) != 0; }
    bool             GetTimeToFixRoads(sint32 &value) const {
                         if((m_flags0 & k_Strategy_TimeToFixRoads_Bit) == 0) return false;
                         value = m_TimeToFixRoadsValue;
                         return true;
                     }
    bool             GetTimeToFixPollution() const { return (m_flags0 & k_Strategy_TimeToFixPollution_Bit) != 0; }
    bool             GetTimeToFixPollution(sint32 &value) const {
                         if((m_flags0 & k_Strategy_TimeToFixPollution_Bit) == 0) return false;
                         value = m_TimeToFixPollutionValue;
                         return true;
                     }
    bool             GetFixPollutionThreshold() const { return (m_flags0 & k_Strategy_FixPollutionThreshold_Bit) != 0; }
    bool             GetFixPollutionThreshold(sint32 &value) const {
                         if((m_flags0 & k_Strategy_FixPollutionThreshold_Bit) == 0) return false;
                         value = m_FixPollutionThresholdValue;
                         return true;
                     }
    bool             GetRoadUtilityBonus() const { return (m_flags0 & k_Strategy_RoadUtilityBonus_Bit) != 0; }
    bool             GetRoadUtilityBonus(double &value) const {
                         if((m_flags0 & k_Strategy_RoadUtilityBonus_Bit) == 0) return false;
                         value = m_RoadUtilityBonusValue;
                         return true;
                     }
    bool             GetImproveProductionBonus() const { return (m_flags0 & k_Strategy_ImproveProductionBonus_Bit) != 0; }
    bool             GetImproveProductionBonus(double &value) const {
                         if((m_flags0 & k_Strategy_ImproveProductionBonus_Bit) == 0) return false;
                         value = m_ImproveProductionBonusValue;
                         return true;
                     }
    bool             GetImproveGrowthBonus() const { return (m_flags0 & k_Strategy_ImproveGrowthBonus_Bit) != 0; }
    bool             GetImproveGrowthBonus(double &value) const {
                         if((m_flags0 & k_Strategy_ImproveGrowthBonus_Bit) == 0) return false;
                         value = m_ImproveGrowthBonusValue;
                         return true;
                     }
    bool             GetImproveGoodBonus() const { return (m_flags0 & k_Strategy_ImproveGoodBonus_Bit) != 0; }
    bool             GetImproveGoodBonus(double &value) const {
                         if((m_flags0 & k_Strategy_ImproveGoodBonus_Bit) == 0) return false;
                         value = m_ImproveGoodBonusValue;
                         return true;
                     }
    bool             GetImproveSmallCityGrowthBonus() const { return (m_flags0 & k_Strategy_ImproveSmallCityGrowthBonus_Bit) != 0; }
    bool             GetImproveSmallCityGrowthBonus(double &value) const {
                         if((m_flags0 & k_Strategy_ImproveSmallCityGrowthBonus_Bit) == 0) return false;
                         value = m_ImproveSmallCityGrowthBonusValue;
                         return true;
                     }
    bool             GetImproveLargeCityProductionBonus() const { return (m_flags0 & k_Strategy_ImproveLargeCityProductionBonus_Bit) != 0; }
    bool             GetImproveLargeCityProductionBonus(double &value) const {
                         if((m_flags0 & k_Strategy_ImproveLargeCityProductionBonus_Bit) == 0) return false;
                         value = m_ImproveLargeCityProductionBonusValue;
                         return true;
                     }
    sint32           GetImproveGrowthListIndex() const { return m_ImproveGrowthList; }
    const ImprovementListRecord *GetImproveGrowthList() const;
    sint32           GetImproveProductionListIndex() const { return m_ImproveProductionList; }
    const ImprovementListRecord *GetImproveProductionList() const;
    sint32           GetImproveRandomListIndex() const { return m_ImproveRandomList; }
    const ImprovementListRecord *GetImproveRandomList() const;
    const GoalElement *GetGoalElement(sint32 index) const;
    sint32           GetNumGoalElement() const { return m_numGoalElement;}
    bool             GetDistanceModifierFactor() const { return (m_flags0 & k_Strategy_DistanceModifierFactor_Bit) != 0; }
    bool             GetDistanceModifierFactor(sint32 &value) const {
                         if((m_flags0 & k_Strategy_DistanceModifierFactor_Bit) == 0) return false;
                         value = m_DistanceModifierFactorValue;
                         return true;
                     }
    bool             GetDisbandArmyCount() const { return (m_flags0 & k_Strategy_DisbandArmyCount_Bit) != 0; }
    bool             GetDisbandArmyCount(sint32 &value) const {
                         if((m_flags0 & k_Strategy_DisbandArmyCount_Bit) == 0) return false;
                         value = m_DisbandArmyCountValue;
                         return true;
                     }
    bool             GetMinSettleDistance() const { return (m_flags0 & k_Strategy_MinSettleDistance_Bit) != 0; }
    bool             GetMinSettleDistance(sint32 &value) const {
                         if((m_flags0 & k_Strategy_MinSettleDistance_Bit) == 0) return false;
                         value = m_MinSettleDistanceValue;
                         return true;
                     }
    bool             GetMinSettleScore() const { return (m_flags0 & k_Strategy_MinSettleScore_Bit) != 0; }
    bool             GetMinSettleScore(sint32 &value) const {
                         if((m_flags0 & k_Strategy_MinSettleScore_Bit) == 0) return false;
                         value = m_MinSettleScoreValue;
                         return true;
                     }
    bool             GetRushBuyThreatBonus() const { return (m_flags0 & k_Strategy_RushBuyThreatBonus_Bit) != 0; }
    bool             GetRushBuyThreatBonus(sint32 &value) const {
                         if((m_flags0 & k_Strategy_RushBuyThreatBonus_Bit) == 0) return false;
                         value = m_RushBuyThreatBonusValue;
                         return true;
                     }
    bool             GetRushBuyReservePercent() const { return (m_flags0 & k_Strategy_RushBuyReservePercent_Bit) != 0; }
    bool             GetRushBuyReservePercent(double &value) const {
                         if((m_flags0 & k_Strategy_RushBuyReservePercent_Bit) == 0) return false;
                         value = m_RushBuyReservePercentValue;
                         return true;
                     }
    bool             GetUnitSupportPercent() const { return (m_flags0 & k_Strategy_UnitSupportPercent_Bit) != 0; }
    bool             GetUnitSupportPercent(double &value) const {
                         if((m_flags0 & k_Strategy_UnitSupportPercent_Bit) == 0) return false;
                         value = m_UnitSupportPercentValue;
                         return true;
                     }
    bool             GetMaxSettlerBuildTurns() const { return (m_flags0 & k_Strategy_MaxSettlerBuildTurns_Bit) != 0; }
    bool             GetMaxSettlerBuildTurns(sint32 &value) const {
                         if((m_flags0 & k_Strategy_MaxSettlerBuildTurns_Bit) == 0) return false;
                         value = m_MaxSettlerBuildTurnsValue;
                         return true;
                     }
    bool             GetMaxUnitBuildTurns() const { return (m_flags0 & k_Strategy_MaxUnitBuildTurns_Bit) != 0; }
    bool             GetMaxUnitBuildTurns(sint32 &value) const {
                         if((m_flags0 & k_Strategy_MaxUnitBuildTurns_Bit) == 0) return false;
                         value = m_MaxUnitBuildTurnsValue;
                         return true;
                     }
    bool             GetMaxWonderBuildTurns() const { return (m_flags0 & k_Strategy_MaxWonderBuildTurns_Bit) != 0; }
    bool             GetMaxWonderBuildTurns(sint32 &value) const {
                         if((m_flags0 & k_Strategy_MaxWonderBuildTurns_Bit) == 0) return false;
                         value = m_MaxWonderBuildTurnsValue;
                         return true;
                     }
    bool             GetBuildTransportProductionLevel() const { return (m_flags0 & k_Strategy_BuildTransportProductionLevel_Bit) != 0; }
    bool             GetBuildTransportProductionLevel(double &value) const {
                         if((m_flags0 & k_Strategy_BuildTransportProductionLevel_Bit) == 0) return false;
                         value = m_BuildTransportProductionLevelValue;
                         return true;
                     }
    bool             GetBuildSettlerProductionLevel() const { return (m_flags0 & k_Strategy_BuildSettlerProductionLevel_Bit) != 0; }
    bool             GetBuildSettlerProductionLevel(double &value) const {
                         if((m_flags0 & k_Strategy_BuildSettlerProductionLevel_Bit) == 0) return false;
                         value = m_BuildSettlerProductionLevelValue;
                         return true;
                     }
    bool             GetOffensiveUnitsPercent() const { return (m_flags0 & k_Strategy_OffensiveUnitsPercent_Bit) != 0; }
    bool             GetOffensiveUnitsPercent(double &value) const {
                         if((m_flags0 & k_Strategy_OffensiveUnitsPercent_Bit) == 0) return false;
                         value = m_OffensiveUnitsPercentValue;
                         return true;
                     }
    bool             GetDefensiveUnitsPercent() const { return (m_flags0 & k_Strategy_DefensiveUnitsPercent_Bit) != 0; }
    bool             GetDefensiveUnitsPercent(double &value) const {
                         if((m_flags0 & k_Strategy_DefensiveUnitsPercent_Bit) == 0) return false;
                         value = m_DefensiveUnitsPercentValue;
                         return true;
                     }
    bool             GetRangedUnitsPercent() const { return (m_flags1 & k_Strategy_RangedUnitsPercent_Bit) != 0; }
    bool             GetRangedUnitsPercent(double &value) const {
                         if((m_flags1 & k_Strategy_RangedUnitsPercent_Bit) == 0) return false;
                         value = m_RangedUnitsPercentValue;
                         return true;
                     }
    bool             GetSeaUnitsPercent() const { return (m_flags1 & k_Strategy_SeaUnitsPercent_Bit) != 0; }
    bool             GetSeaUnitsPercent(double &value) const {
                         if((m_flags1 & k_Strategy_SeaUnitsPercent_Bit) == 0) return false;
                         value = m_SeaUnitsPercentValue;
                         return true;
                     }
    bool             GetAirUnitsPercent() const { return (m_flags1 & k_Strategy_AirUnitsPercent_Bit) != 0; }
    bool             GetAirUnitsPercent(double &value) const {
                         if((m_flags1 & k_Strategy_AirUnitsPercent_Bit) == 0) return false;
                         value = m_AirUnitsPercentValue;
                         return true;
                     }
    bool             GetSettlerUnitsCount() const { return (m_flags1 & k_Strategy_SettlerUnitsCount_Bit) != 0; }
    bool             GetSettlerUnitsCount(sint32 &value) const {
                         if((m_flags1 & k_Strategy_SettlerUnitsCount_Bit) == 0) return false;
                         value = m_SettlerUnitsCountValue;
                         return true;
                     }
    bool             GetSpecialUnitsCount() const { return (m_flags1 & k_Strategy_SpecialUnitsCount_Bit) != 0; }
    bool             GetSpecialUnitsCount(sint32 &value) const {
                         if((m_flags1 & k_Strategy_SpecialUnitsCount_Bit) == 0) return false;
                         value = m_SpecialUnitsCountValue;
                         return true;
                     }
    bool             GetSeaTransportUnitsCount() const { return (m_flags1 & k_Strategy_SeaTransportUnitsCount_Bit) != 0; }
    bool             GetSeaTransportUnitsCount(sint32 &value) const {
                         if((m_flags1 & k_Strategy_SeaTransportUnitsCount_Bit) == 0) return false;
                         value = m_SeaTransportUnitsCountValue;
                         return true;
                     }
    bool             GetAirTransportUnitsCount() const { return (m_flags1 & k_Strategy_AirTransportUnitsCount_Bit) != 0; }
    bool             GetAirTransportUnitsCount(sint32 &value) const {
                         if((m_flags1 & k_Strategy_AirTransportUnitsCount_Bit) == 0) return false;
                         value = m_AirTransportUnitsCountValue;
                         return true;
                     }
    bool             GetOffensiveUnitList() const { return (m_flags1 & k_Strategy_OffensiveUnitList_Bit) != 0; }
    bool             GetOffensiveUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_OffensiveUnitList_Bit) == 0) return false;
                         index = m_OffensiveUnitListValue;
                         return true;
                     }
    bool             GetOffensiveUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetOffensiveUnitListPtr() const;
    bool             GetDefensiveUnitList() const { return (m_flags1 & k_Strategy_DefensiveUnitList_Bit) != 0; }
    bool             GetDefensiveUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_DefensiveUnitList_Bit) == 0) return false;
                         index = m_DefensiveUnitListValue;
                         return true;
                     }
    bool             GetDefensiveUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetDefensiveUnitListPtr() const;
    bool             GetRangedUnitList() const { return (m_flags1 & k_Strategy_RangedUnitList_Bit) != 0; }
    bool             GetRangedUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_RangedUnitList_Bit) == 0) return false;
                         index = m_RangedUnitListValue;
                         return true;
                     }
    bool             GetRangedUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetRangedUnitListPtr() const;
    bool             GetSeaUnitList() const { return (m_flags1 & k_Strategy_SeaUnitList_Bit) != 0; }
    bool             GetSeaUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_SeaUnitList_Bit) == 0) return false;
                         index = m_SeaUnitListValue;
                         return true;
                     }
    bool             GetSeaUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetSeaUnitListPtr() const;
    bool             GetAirUnitList() const { return (m_flags1 & k_Strategy_AirUnitList_Bit) != 0; }
    bool             GetAirUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_AirUnitList_Bit) == 0) return false;
                         index = m_AirUnitListValue;
                         return true;
                     }
    bool             GetAirUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetAirUnitListPtr() const;
    bool             GetSettlerUnitList() const { return (m_flags1 & k_Strategy_SettlerUnitList_Bit) != 0; }
    bool             GetSettlerUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_SettlerUnitList_Bit) == 0) return false;
                         index = m_SettlerUnitListValue;
                         return true;
                     }
    bool             GetSettlerUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetSettlerUnitListPtr() const;
    bool             GetSpecialUnitList() const { return (m_flags1 & k_Strategy_SpecialUnitList_Bit) != 0; }
    bool             GetSpecialUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_SpecialUnitList_Bit) == 0) return false;
                         index = m_SpecialUnitListValue;
                         return true;
                     }
    bool             GetSpecialUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetSpecialUnitListPtr() const;
    bool             GetSeaTransportUnitList() const { return (m_flags1 & k_Strategy_SeaTransportUnitList_Bit) != 0; }
    bool             GetSeaTransportUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_SeaTransportUnitList_Bit) == 0) return false;
                         index = m_SeaTransportUnitListValue;
                         return true;
                     }
    bool             GetSeaTransportUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetSeaTransportUnitListPtr() const;
    bool             GetAirTransportUnitList() const { return (m_flags1 & k_Strategy_AirTransportUnitList_Bit) != 0; }
    bool             GetAirTransportUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_AirTransportUnitList_Bit) == 0) return false;
                         index = m_AirTransportUnitListValue;
                         return true;
                     }
    bool             GetAirTransportUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetAirTransportUnitListPtr() const;
    bool             GetFreightUnitList() const { return (m_flags1 & k_Strategy_FreightUnitList_Bit) != 0; }
    bool             GetFreightUnitListIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_FreightUnitList_Bit) == 0) return false;
                         index = m_FreightUnitListValue;
                         return true;
                     }
    bool             GetFreightUnitList(const UnitBuildListRecord *&rec) const;
    const UnitBuildListRecord  *GetFreightUnitListPtr() const;
    bool             GetOffensiveGarrisonCount() const { return (m_flags1 & k_Strategy_OffensiveGarrisonCount_Bit) != 0; }
    bool             GetOffensiveGarrisonCount(sint32 &value) const {
                         if((m_flags1 & k_Strategy_OffensiveGarrisonCount_Bit) == 0) return false;
                         value = m_OffensiveGarrisonCountValue;
                         return true;
                     }
    bool             GetDefensiveGarrisonCount() const { return (m_flags1 & k_Strategy_DefensiveGarrisonCount_Bit) != 0; }
    bool             GetDefensiveGarrisonCount(sint32 &value) const {
                         if((m_flags1 & k_Strategy_DefensiveGarrisonCount_Bit) == 0) return false;
                         value = m_DefensiveGarrisonCountValue;
                         return true;
                     }
    bool             GetRangedGarrisonCount() const { return (m_flags1 & k_Strategy_RangedGarrisonCount_Bit) != 0; }
    bool             GetRangedGarrisonCount(sint32 &value) const {
                         if((m_flags1 & k_Strategy_RangedGarrisonCount_Bit) == 0) return false;
                         value = m_RangedGarrisonCountValue;
                         return true;
                     }
    const BuildListSequenceElement *GetBuildListSequenceElement(sint32 index) const;
    sint32           GetNumBuildListSequenceElement() const { return m_numBuildListSequenceElement;}
    bool             GetResearch() const { return (m_flags1 & k_Strategy_Research_Bit) != 0; }
    bool             GetResearchIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_Research_Bit) == 0) return false;
                         index = m_ResearchValue;
                         return true;
                     }
    bool             GetResearch(const AdvanceListRecord *&rec) const;
    const AdvanceListRecord  *GetResearchPtr() const;
    bool             GetStopResearch() const { return (m_flags1 & k_Strategy_StopResearch_Bit) != 0; }
    bool             GetStopResearchIndex(sint32 &index) const {
                         if((m_flags1 & k_Strategy_StopResearch_Bit) == 0) return false;
                         index = m_StopResearchValue;
                         return true;
                     }
    bool             GetStopResearch(const AdvanceListRecord *&rec) const;
    const AdvanceListRecord  *GetStopResearchPtr() const;
    bool             GetFearInvasion() const { return (m_flags1 & k_Strategy_FearInvasion_Bit) != 0; }
    bool             GetFearInvasion(sint32 &value) const {
                         if((m_flags1 & k_Strategy_FearInvasion_Bit) == 0) return false;
                         value = m_FearInvasionValue;
                         return true;
                     }
    bool             GetFearCityDefense() const { return (m_flags1 & k_Strategy_FearCityDefense_Bit) != 0; }
    bool             GetFearCityDefense(sint32 &value) const {
                         if((m_flags1 & k_Strategy_FearCityDefense_Bit) == 0) return false;
                         value = m_FearCityDefenseValue;
                         return true;
                     }
    bool             GetFearPiracy() const { return (m_flags1 & k_Strategy_FearPiracy_Bit) != 0; }
    bool             GetFearPiracy(sint32 &value) const {
                         if((m_flags1 & k_Strategy_FearPiracy_Bit) == 0) return false;
                         value = m_FearPiracyValue;
                         return true;
                     }
    bool             GetFearScienceRank() const { return (m_flags1 & k_Strategy_FearScienceRank_Bit) != 0; }
    bool             GetFearScienceRank(sint32 &value) const {
                         if((m_flags1 & k_Strategy_FearScienceRank_Bit) == 0) return false;
                         value = m_FearScienceRankValue;
                         return true;
                     }
    bool             GetFearMilitaryRank() const { return (m_flags1 & k_Strategy_FearMilitaryRank_Bit) != 0; }
    bool             GetFearMilitaryRank(sint32 &value) const {
                         if((m_flags1 & k_Strategy_FearMilitaryRank_Bit) == 0) return false;
                         value = m_FearMilitaryRankValue;
                         return true;
                     }
    bool             GetFearTradeRank() const { return (m_flags1 & k_Strategy_FearTradeRank_Bit) != 0; }
    bool             GetFearTradeRank(sint32 &value) const {
                         if((m_flags1 & k_Strategy_FearTradeRank_Bit) == 0) return false;
                         value = m_FearTradeRankValue;
                         return true;
                     }
    bool             GetFearPollution() const { return (m_flags1 & k_Strategy_FearPollution_Bit) != 0; }
    bool             GetFearPollution(sint32 &value) const {
                         if((m_flags1 & k_Strategy_FearPollution_Bit) == 0) return false;
                         value = m_FearPollutionValue;
                         return true;
                     }
    bool             GetDesireAttack() const { return (m_flags1 & k_Strategy_DesireAttack_Bit) != 0; }
    bool             GetDesireAttack(sint32 &value) const {
                         if((m_flags1 & k_Strategy_DesireAttack_Bit) == 0) return false;
                         value = m_DesireAttackValue;
                         return true;
                     }
    bool             GetDesireGold() const { return (m_flags1 & k_Strategy_DesireGold_Bit) != 0; }
    bool             GetDesireGold(sint32 &value) const {
                         if((m_flags1 & k_Strategy_DesireGold_Bit) == 0) return false;
                         value = m_DesireGoldValue;
                         return true;
                     }
    bool             GetDesireScience() const { return (m_flags1 & k_Strategy_DesireScience_Bit) != 0; }
    bool             GetDesireScience(sint32 &value) const {
                         if((m_flags1 & k_Strategy_DesireScience_Bit) == 0) return false;
                         value = m_DesireScienceValue;
                         return true;
                     }
    bool             GetDesireMakeFriend() const { return (m_flags2 & k_Strategy_DesireMakeFriend_Bit) != 0; }
    bool             GetDesireMakeFriend(sint32 &value) const {
                         if((m_flags2 & k_Strategy_DesireMakeFriend_Bit) == 0) return false;
                         value = m_DesireMakeFriendValue;
                         return true;
                     }
    bool             GetDesireEnlistFriend() const { return (m_flags2 & k_Strategy_DesireEnlistFriend_Bit) != 0; }
    bool             GetDesireEnlistFriend(sint32 &value) const {
                         if((m_flags2 & k_Strategy_DesireEnlistFriend_Bit) == 0) return false;
                         value = m_DesireEnlistFriendValue;
                         return true;
                     }
    bool             GetPiracyMemoryTurns() const { return (m_flags2 & k_Strategy_PiracyMemoryTurns_Bit) != 0; }
    bool             GetPiracyMemoryTurns(sint32 &value) const {
                         if((m_flags2 & k_Strategy_PiracyMemoryTurns_Bit) == 0) return false;
                         value = m_PiracyMemoryTurnsValue;
                         return true;
                     }
    bool             GetMaxPiracyEvents() const { return (m_flags2 & k_Strategy_MaxPiracyEvents_Bit) != 0; }
    bool             GetMaxPiracyEvents(sint32 &value) const {
                         if((m_flags2 & k_Strategy_MaxPiracyEvents_Bit) == 0) return false;
                         value = m_MaxPiracyEventsValue;
                         return true;
                     }
    bool             GetOffensive() const { return (m_flags2 & k_Strategy_Offensive_Bit) != 0; }
    bool             GetOffensive(const ForceMatch *&ptr) const {
                         if((m_flags2 & k_Strategy_Offensive_Bit) == 0) return false;
                         ptr = &m_OffensiveValue;
                         return true;
                     }
    const ForceMatch        *GetOffensivePtr() const {
                         if((m_flags2 & k_Strategy_Offensive_Bit) == 0) return NULL;
                         return &m_OffensiveValue;
                     }
    bool             GetDefensive() const { return (m_flags2 & k_Strategy_Defensive_Bit) != 0; }
    bool             GetDefensive(const ForceMatch *&ptr) const {
                         if((m_flags2 & k_Strategy_Defensive_Bit) == 0) return false;
                         ptr = &m_DefensiveValue;
                         return true;
                     }
    const ForceMatch        *GetDefensivePtr() const {
                         if((m_flags2 & k_Strategy_Defensive_Bit) == 0) return NULL;
                         return &m_DefensiveValue;
                     }
    bool             GetStealthAttack() const { return (m_flags2 & k_Strategy_StealthAttack_Bit) != 0; }
    bool             GetStealthAttack(const ForceMatch *&ptr) const {
                         if((m_flags2 & k_Strategy_StealthAttack_Bit) == 0) return false;
                         ptr = &m_StealthAttackValue;
                         return true;
                     }
    const ForceMatch        *GetStealthAttackPtr() const {
                         if((m_flags2 & k_Strategy_StealthAttack_Bit) == 0) return NULL;
                         return &m_StealthAttackValue;
                     }
    bool             GetBombard() const { return (m_flags2 & k_Strategy_Bombard_Bit) != 0; }
    bool             GetBombard(const ForceMatch *&ptr) const {
                         if((m_flags2 & k_Strategy_Bombard_Bit) == 0) return false;
                         ptr = &m_BombardValue;
                         return true;
                     }
    const ForceMatch        *GetBombardPtr() const {
                         if((m_flags2 & k_Strategy_Bombard_Bit) == 0) return NULL;
                         return &m_BombardValue;
                     }
    bool             GetSpecial() const { return (m_flags2 & k_Strategy_Special_Bit) != 0; }
    bool             GetSpecial(const ForceMatch *&ptr) const {
                         if((m_flags2 & k_Strategy_Special_Bit) == 0) return false;
                         ptr = &m_SpecialValue;
                         return true;
                     }
    const ForceMatch        *GetSpecialPtr() const {
                         if((m_flags2 & k_Strategy_Special_Bit) == 0) return NULL;
                         return &m_SpecialValue;
                     }
    bool             GetHarass() const { return (m_flags2 & k_Strategy_Harass_Bit) != 0; }
    bool             GetHarass(const ForceMatch *&ptr) const {
                         if((m_flags2 & k_Strategy_Harass_Bit) == 0) return false;
                         ptr = &m_HarassValue;
                         return true;
                     }
    const ForceMatch        *GetHarassPtr() const {
                         if((m_flags2 & k_Strategy_Harass_Bit) == 0) return NULL;
                         return &m_HarassValue;
                     }

    //
    // NuclearFirstStrike flag group
    uint32           GetNuclearFirstStrike() const { return m_NuclearFirstStrike; }
    bool             GetNuclearFirstStrikeEnabled() const { return (m_NuclearFirstStrike & k_Strategy_NuclearFirstStrike_Enabled_Bit) != 0; }
    bool             GetNuclearFirstStrikeDisabled() const { return (m_NuclearFirstStrike & k_Strategy_NuclearFirstStrike_Disabled_Bit) != 0; }
    // End NuclearFirstStrike flag group
    //

    //
    // NuclearTargeting flag group
    uint32           GetNuclearTargeting() const { return m_NuclearTargeting; }
    bool             GetNuclearTargetingEnabled() const { return (m_NuclearTargeting & k_Strategy_NuclearTargeting_Enabled_Bit) != 0; }
    bool             GetNuclearTargetingDisabled() const { return (m_NuclearTargeting & k_Strategy_NuclearTargeting_Disabled_Bit) != 0; }
    // End NuclearTargeting flag group
    //
    bool             GetPreemptiveStrikeRegard() const { return (m_flags2 & k_Strategy_PreemptiveStrikeRegard_Bit) != 0; }
    bool             GetPreemptiveStrikeRegard(sint32 &value) const {
                         if((m_flags2 & k_Strategy_PreemptiveStrikeRegard_Bit) == 0) return false;
                         value = m_PreemptiveStrikeRegardValue;
                         return true;
                     }
    bool             GetPreemptiveStrikeRiskRatio() const { return (m_flags2 & k_Strategy_PreemptiveStrikeRiskRatio_Bit) != 0; }
    bool             GetPreemptiveStrikeRiskRatio(double &value) const {
                         if((m_flags2 & k_Strategy_PreemptiveStrikeRiskRatio_Bit) == 0) return false;
                         value = m_PreemptiveStrikeRiskRatioValue;
                         return true;
                     }
    bool             GetPreemptiveStrikeSuperiorityRatio() const { return (m_flags2 & k_Strategy_PreemptiveStrikeSuperiorityRatio_Bit) != 0; }
    bool             GetPreemptiveStrikeSuperiorityRatio(double &value) const {
                         if((m_flags2 & k_Strategy_PreemptiveStrikeSuperiorityRatio_Bit) == 0) return false;
                         value = m_PreemptiveStrikeSuperiorityRatioValue;
                         return true;
                     }
}; /* StrategyRecord */

struct StrategyRecordAccessorInfo {
    StrategyRecord::IntAccessor m_intAccessor;
    StrategyRecord::BoolAccessor m_boolAccessor;
    StrategyRecord::FloatAccessor m_floatAccessor;
    StrategyRecord::BitIntAccessor m_bitIntAccessor;
    StrategyRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern StrategyRecordAccessorInfo g_StrategyRecord_Accessors[];
extern char *g_Strategy_Tokens[];
#define k_Num_StrategyRecord_Tokens 165

template <class T> class CTPDatabase;
extern CTPDatabase<StrategyRecord> *g_theStrategyDB;

#endif /* ifndef __Strategy_RECORD_H__ */
