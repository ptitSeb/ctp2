
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Sound_RECORD_H__
#define __Sound_RECORD_H__

/*
 * Sound description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

class SoundRecord : public CTPRecord
{
public:
    typedef sint32 (SoundRecord::*IntAccessor)() const;
    typedef bool (SoundRecord::*BoolAccessor)() const;
    typedef double (SoundRecord::*FloatAccessor)() const ;
    typedef bool (SoundRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (SoundRecord::*BitFloatAccessor)(double &val) const;
private:
    char            * m_Value;
    char            * m_NameText;

public:
    SoundRecord() { Init(); };
    ~SoundRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    SoundRecord(const SoundRecord &rval) { Init(); *this = rval; }
    void operator=(const SoundRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const SoundRecord & rval);
    //
    // Accessors
    //
    const char      *GetValue() const { return m_Value; }
    const char      *GetNameText() const { return m_NameText; }
}; /* SoundRecord */

struct SoundRecordAccessorInfo {
    SoundRecord::IntAccessor m_intAccessor;
    SoundRecord::BoolAccessor m_boolAccessor;
    SoundRecord::FloatAccessor m_floatAccessor;
    SoundRecord::BitIntAccessor m_bitIntAccessor;
    SoundRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern SoundRecordAccessorInfo g_SoundRecord_Accessors[];
extern char *g_Sound_Tokens[];
#define k_Num_SoundRecord_Tokens 2

template <class T> class CTPDatabase;
extern CTPDatabase<SoundRecord> *g_theSoundDB;

#endif /* ifndef __Sound_RECORD_H__ */
