
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Diplomacy_RECORD_H__
#define __Diplomacy_RECORD_H__

/*
 * Diplomacy description
 */
#include "CTPRecord.h"
//
// m_flags0
#define k_Diplomacy_ScenarioEvent_Bit            0x00000001
#define k_Diplomacy_MilitaryPowerEvent_Bit       0x00000002
#define k_Diplomacy_MilitarySafetyEvent_Bit      0x00000004
#define k_Diplomacy_DiplomacyEvent_Bit           0x00000008
#define k_Diplomacy_GoldEvent_Bit                0x00000010
#define k_Diplomacy_KnowledgeEvent_Bit           0x00000020
#define k_Diplomacy_ProductionEvent_Bit          0x00000040
#define k_Diplomacy_Threaten_Bit                 0x00000080
#define k_Diplomacy_IncursionRegardCost_Bit      0x00000100
#define k_Diplomacy_IncursionOfAllieRegardCost_Bit 0x00000200
#define k_Diplomacy_InvaderMovementRegardCost_Bit 0x00000400
#define k_Diplomacy_PerRoutePiracyRegardCost_Bit 0x00000800
#define k_Diplomacy_ShareContinentRegardCost_Bit 0x00001000
#define k_Diplomacy_AttackCivilianRegardCost_Bit 0x00002000
#define k_Diplomacy_PreemptiveAttackRegardCost_Bit 0x00004000
#define k_Diplomacy_EmbargoTradeRegardCost_Bit   0x00008000
#define k_Diplomacy_TakeCityRegardCost_Bit       0x00010000
#define k_Diplomacy_InciteRevolutionRegardCost_Bit 0x00020000
#define k_Diplomacy_AssassinateRulerRegardCost_Bit 0x00040000
#define k_Diplomacy_FranchiseCityRegardCost_Bit  0x00080000
#define k_Diplomacy_PlantNukeRegardCost_Bit      0x00100000
#define k_Diplomacy_SlaveRaidRegardCost_Bit      0x00200000
#define k_Diplomacy_LawsuitRegardCost_Bit        0x00400000
#define k_Diplomacy_ExpelUnitsRegardCost_Bit     0x00800000
#define k_Diplomacy_NukeCityRegardCost_Bit       0x01000000
#define k_Diplomacy_ConvertCityRegardCost_Bit    0x02000000
#define k_Diplomacy_EnslaveSettlerRegardCost_Bit 0x04000000
#define k_Diplomacy_UndergroundRailwayRegardCost_Bit 0x08000000
#define k_Diplomacy_InciteUprisingRegardCost_Bit 0x10000000
#define k_Diplomacy_BioInfectedCityRegardCost_Bit 0x20000000
#define k_Diplomacy_PlagueCityRegardCost_Bit     0x40000000
#define k_Diplomacy_NanoInfectCityRegardCost_Bit 0x80000000
//
// m_flags1
#define k_Diplomacy_CreateParkRegardCost_Bit     0x00000001
#define k_Diplomacy_InjoinCityRegardCost_Bit     0x00000002
#define k_Diplomacy_PillageRegardCost_Bit        0x00000004
#define k_Diplomacy_HoldReceptionRegardBonus_Bit 0x00000008
#define k_Diplomacy_HasPactTrustBonus_Bit        0x00000010
#define k_Diplomacy_NoWarTrustBonus_Bit          0x00000020
#define k_Diplomacy_AttackCivilianTrustCost_Bit  0x00000040
#define k_Diplomacy_PreemptiveAttackTrustCost_Bit 0x00000080
#define k_Diplomacy_FollowThroughTrustBonus_Bit  0x00000100
#define k_Diplomacy_UsedNukesTrustCost_Bit       0x00000200
#define k_Diplomacy_WantMapTurns_Bit             0x00000400
//
// m_flags0
#define k_ProposalElement_SendPriority_Bit       0x00000001
#define k_ProposalElement_AcceptPriority_Bit     0x00000002
#define k_ProposalElement_RejectPriority_Bit     0x00000004
#define k_ProposalElement_SenderRegardResult_Bit 0x00000008
#define k_ProposalElement_ReceiverRegardResult_Bit 0x00000010
#define k_ProposalElement_ViolationRegardCost_Bit 0x00000020
#define k_ProposalElement_ViolationTrustCost_Bit 0x00000040
//
// Range definitions
#define k_MAX_Inherit                        1

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class DiplomacyRecord;
class DiplomacyProposalRecord;

class DiplomacyRecord : public CTPRecord
{
public:
    typedef sint32 (DiplomacyRecord::*IntAccessor)() const;
    typedef bool (DiplomacyRecord::*BoolAccessor)() const;
    typedef double (DiplomacyRecord::*FloatAccessor)() const ;
    typedef bool (DiplomacyRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (DiplomacyRecord::*BitFloatAccessor)(double &val) const;
    class RegardDecay {
    private:
        double            m_PositiveDecay;
        double            m_NegativeDecay;
    public:
        RegardDecay();
        ~RegardDecay();
        void operator=(const RegardDecay & rval);
        bool operator==(const RegardDecay & rval) { 
          return false; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, RegardDecay **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, RegardDecay *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        double           GetPositiveDecay() const { return m_PositiveDecay; }
        double           GetNegativeDecay() const { return m_NegativeDecay; }
    }; /* class RegardDecay */

    class ProposalElement {
    private:
        uint32 m_flags0;

        sint32            m_Proposal; // Index into DiplomacyProposal database
        sint32            m_SendPriorityValue;
        sint32            m_AcceptPriorityValue;
        sint32            m_RejectPriorityValue;
        sint32            m_SenderRegardResultValue;
        sint32            m_ReceiverRegardResultValue;
        sint32            m_ViolationRegardCostValue;
        sint32            m_ViolationTrustCostValue;
    public:
        ProposalElement();
        ~ProposalElement();
        void operator=(const ProposalElement & rval);
        bool operator==(const ProposalElement & rval) { 
          if (m_Proposal != rval.m_Proposal) 
             return false; 
          return true; 
        } 

        sint32 Parse(DBLexer *lex);
        sint32 ParseSequential(DBLexer *lex);
        static sint32 ParseInArray(DBLexer *lex, ProposalElement **array, sint32 *numElements);
        static sint32 ParseInArray(DBLexer *lex, ProposalElement *array, sint32 *numElements, sint32 maxSize);
        void ResolveDBReferences();
        sint32           GetProposalIndex() const { return m_Proposal; }
    const DiplomacyProposalRecord *GetProposal() const;
        bool             GetSendPriority() const { return (m_flags0 & k_ProposalElement_SendPriority_Bit) != 0; }
    bool             GetSendPriority(sint32 &value) const {
                         if((m_flags0 & k_ProposalElement_SendPriority_Bit) == 0) return false;
                         value = m_SendPriorityValue;
                         return true;
                     }
        bool             GetAcceptPriority() const { return (m_flags0 & k_ProposalElement_AcceptPriority_Bit) != 0; }
    bool             GetAcceptPriority(sint32 &value) const {
                         if((m_flags0 & k_ProposalElement_AcceptPriority_Bit) == 0) return false;
                         value = m_AcceptPriorityValue;
                         return true;
                     }
        bool             GetRejectPriority() const { return (m_flags0 & k_ProposalElement_RejectPriority_Bit) != 0; }
    bool             GetRejectPriority(sint32 &value) const {
                         if((m_flags0 & k_ProposalElement_RejectPriority_Bit) == 0) return false;
                         value = m_RejectPriorityValue;
                         return true;
                     }
        bool             GetSenderRegardResult() const { return (m_flags0 & k_ProposalElement_SenderRegardResult_Bit) != 0; }
    bool             GetSenderRegardResult(sint32 &value) const {
                         if((m_flags0 & k_ProposalElement_SenderRegardResult_Bit) == 0) return false;
                         value = m_SenderRegardResultValue;
                         return true;
                     }
        bool             GetReceiverRegardResult() const { return (m_flags0 & k_ProposalElement_ReceiverRegardResult_Bit) != 0; }
    bool             GetReceiverRegardResult(sint32 &value) const {
                         if((m_flags0 & k_ProposalElement_ReceiverRegardResult_Bit) == 0) return false;
                         value = m_ReceiverRegardResultValue;
                         return true;
                     }
        bool             GetViolationRegardCost() const { return (m_flags0 & k_ProposalElement_ViolationRegardCost_Bit) != 0; }
    bool             GetViolationRegardCost(sint32 &value) const {
                         if((m_flags0 & k_ProposalElement_ViolationRegardCost_Bit) == 0) return false;
                         value = m_ViolationRegardCostValue;
                         return true;
                     }
        bool             GetViolationTrustCost() const { return (m_flags0 & k_ProposalElement_ViolationTrustCost_Bit) != 0; }
    bool             GetViolationTrustCost(sint32 &value) const {
                         if((m_flags0 & k_ProposalElement_ViolationTrustCost_Bit) == 0) return false;
                         value = m_ViolationTrustCostValue;
                         return true;
                     }
    }; /* class ProposalElement */

private:
    uint32 m_flags0;
    uint32 m_flags1;

    sint32            m_Inherit[k_MAX_Inherit]; // Index into Diplomacy database
    sint32           m_numInherit;
    RegardDecay       m_ScenarioEventValue;
    RegardDecay       m_MilitaryPowerEventValue;
    RegardDecay       m_MilitarySafetyEventValue;
    RegardDecay       m_DiplomacyEventValue;
    RegardDecay       m_GoldEventValue;
    RegardDecay       m_KnowledgeEventValue;
    RegardDecay       m_ProductionEventValue;
    sint32            m_ThreatenValue;
    sint32            m_IncursionRegardCostValue;
    sint32            m_IncursionOfAllieRegardCostValue;
    sint32            m_InvaderMovementRegardCostValue;
    sint32            m_PerRoutePiracyRegardCostValue;
    sint32            m_ShareContinentRegardCostValue;
    sint32            m_AttackCivilianRegardCostValue;
    sint32            m_PreemptiveAttackRegardCostValue;
    sint32            m_EmbargoTradeRegardCostValue;
    sint32            m_TakeCityRegardCostValue;
    sint32            m_InciteRevolutionRegardCostValue;
    sint32            m_AssassinateRulerRegardCostValue;
    sint32            m_FranchiseCityRegardCostValue;
    sint32            m_PlantNukeRegardCostValue;
    sint32            m_SlaveRaidRegardCostValue;
    sint32            m_LawsuitRegardCostValue;
    sint32            m_ExpelUnitsRegardCostValue;
    sint32            m_NukeCityRegardCostValue;
    sint32            m_ConvertCityRegardCostValue;
    sint32            m_EnslaveSettlerRegardCostValue;
    sint32            m_UndergroundRailwayRegardCostValue;
    sint32            m_InciteUprisingRegardCostValue;
    sint32            m_BioInfectedCityRegardCostValue;
    sint32            m_PlagueCityRegardCostValue;
    sint32            m_NanoInfectCityRegardCostValue;
    sint32            m_CreateParkRegardCostValue;
    sint32            m_InjoinCityRegardCostValue;
    sint32            m_PillageRegardCostValue;
    sint32            m_HoldReceptionRegardBonusValue;
    sint32            m_HasPactTrustBonusValue;
    sint32            m_NoWarTrustBonusValue;
    sint32            m_AttackCivilianTrustCostValue;
    sint32            m_PreemptiveAttackTrustCostValue;
    sint32            m_FollowThroughTrustBonusValue;
    sint32            m_UsedNukesTrustCostValue;
    sint32            m_WantMapTurnsValue;
    ProposalElement  *m_ProposalElement;
    sint32           m_numProposalElement;

public:
    DiplomacyRecord() { Init(); };
    ~DiplomacyRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    DiplomacyRecord(const DiplomacyRecord &rval) { Init(); *this = rval; }
    void operator=(const DiplomacyRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const DiplomacyRecord & rval);
    //
    // Accessors
    //
    sint32           GetInheritIndex(sint32 index) const;
    const DiplomacyRecord *GetInherit(sint32 index) const;
    sint32           GetNumInherit() const { return m_numInherit;}
    bool             GetScenarioEvent() const { return (m_flags0 & k_Diplomacy_ScenarioEvent_Bit) != 0; }
    bool             GetScenarioEvent(const RegardDecay *&ptr) const {
                         if((m_flags0 & k_Diplomacy_ScenarioEvent_Bit) == 0) return false;
                         ptr = &m_ScenarioEventValue;
                         return true;
                     }
    const RegardDecay        *GetScenarioEventPtr() const {
                         if((m_flags0 & k_Diplomacy_ScenarioEvent_Bit) == 0) return NULL;
                         return &m_ScenarioEventValue;
                     }
    bool             GetMilitaryPowerEvent() const { return (m_flags0 & k_Diplomacy_MilitaryPowerEvent_Bit) != 0; }
    bool             GetMilitaryPowerEvent(const RegardDecay *&ptr) const {
                         if((m_flags0 & k_Diplomacy_MilitaryPowerEvent_Bit) == 0) return false;
                         ptr = &m_MilitaryPowerEventValue;
                         return true;
                     }
    const RegardDecay        *GetMilitaryPowerEventPtr() const {
                         if((m_flags0 & k_Diplomacy_MilitaryPowerEvent_Bit) == 0) return NULL;
                         return &m_MilitaryPowerEventValue;
                     }
    bool             GetMilitarySafetyEvent() const { return (m_flags0 & k_Diplomacy_MilitarySafetyEvent_Bit) != 0; }
    bool             GetMilitarySafetyEvent(const RegardDecay *&ptr) const {
                         if((m_flags0 & k_Diplomacy_MilitarySafetyEvent_Bit) == 0) return false;
                         ptr = &m_MilitarySafetyEventValue;
                         return true;
                     }
    const RegardDecay        *GetMilitarySafetyEventPtr() const {
                         if((m_flags0 & k_Diplomacy_MilitarySafetyEvent_Bit) == 0) return NULL;
                         return &m_MilitarySafetyEventValue;
                     }
    bool             GetDiplomacyEvent() const { return (m_flags0 & k_Diplomacy_DiplomacyEvent_Bit) != 0; }
    bool             GetDiplomacyEvent(const RegardDecay *&ptr) const {
                         if((m_flags0 & k_Diplomacy_DiplomacyEvent_Bit) == 0) return false;
                         ptr = &m_DiplomacyEventValue;
                         return true;
                     }
    const RegardDecay        *GetDiplomacyEventPtr() const {
                         if((m_flags0 & k_Diplomacy_DiplomacyEvent_Bit) == 0) return NULL;
                         return &m_DiplomacyEventValue;
                     }
    bool             GetGoldEvent() const { return (m_flags0 & k_Diplomacy_GoldEvent_Bit) != 0; }
    bool             GetGoldEvent(const RegardDecay *&ptr) const {
                         if((m_flags0 & k_Diplomacy_GoldEvent_Bit) == 0) return false;
                         ptr = &m_GoldEventValue;
                         return true;
                     }
    const RegardDecay        *GetGoldEventPtr() const {
                         if((m_flags0 & k_Diplomacy_GoldEvent_Bit) == 0) return NULL;
                         return &m_GoldEventValue;
                     }
    bool             GetKnowledgeEvent() const { return (m_flags0 & k_Diplomacy_KnowledgeEvent_Bit) != 0; }
    bool             GetKnowledgeEvent(const RegardDecay *&ptr) const {
                         if((m_flags0 & k_Diplomacy_KnowledgeEvent_Bit) == 0) return false;
                         ptr = &m_KnowledgeEventValue;
                         return true;
                     }
    const RegardDecay        *GetKnowledgeEventPtr() const {
                         if((m_flags0 & k_Diplomacy_KnowledgeEvent_Bit) == 0) return NULL;
                         return &m_KnowledgeEventValue;
                     }
    bool             GetProductionEvent() const { return (m_flags0 & k_Diplomacy_ProductionEvent_Bit) != 0; }
    bool             GetProductionEvent(const RegardDecay *&ptr) const {
                         if((m_flags0 & k_Diplomacy_ProductionEvent_Bit) == 0) return false;
                         ptr = &m_ProductionEventValue;
                         return true;
                     }
    const RegardDecay        *GetProductionEventPtr() const {
                         if((m_flags0 & k_Diplomacy_ProductionEvent_Bit) == 0) return NULL;
                         return &m_ProductionEventValue;
                     }
    bool             GetThreaten() const { return (m_flags0 & k_Diplomacy_Threaten_Bit) != 0; }
    bool             GetThreaten(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_Threaten_Bit) == 0) return false;
                         value = m_ThreatenValue;
                         return true;
                     }
    bool             GetIncursionRegardCost() const { return (m_flags0 & k_Diplomacy_IncursionRegardCost_Bit) != 0; }
    bool             GetIncursionRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_IncursionRegardCost_Bit) == 0) return false;
                         value = m_IncursionRegardCostValue;
                         return true;
                     }
    bool             GetIncursionOfAllieRegardCost() const { return (m_flags0 & k_Diplomacy_IncursionOfAllieRegardCost_Bit) != 0; }
    bool             GetIncursionOfAllieRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_IncursionOfAllieRegardCost_Bit) == 0) return false;
                         value = m_IncursionOfAllieRegardCostValue;
                         return true;
                     }
    bool             GetInvaderMovementRegardCost() const { return (m_flags0 & k_Diplomacy_InvaderMovementRegardCost_Bit) != 0; }
    bool             GetInvaderMovementRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_InvaderMovementRegardCost_Bit) == 0) return false;
                         value = m_InvaderMovementRegardCostValue;
                         return true;
                     }
    bool             GetPerRoutePiracyRegardCost() const { return (m_flags0 & k_Diplomacy_PerRoutePiracyRegardCost_Bit) != 0; }
    bool             GetPerRoutePiracyRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_PerRoutePiracyRegardCost_Bit) == 0) return false;
                         value = m_PerRoutePiracyRegardCostValue;
                         return true;
                     }
    bool             GetShareContinentRegardCost() const { return (m_flags0 & k_Diplomacy_ShareContinentRegardCost_Bit) != 0; }
    bool             GetShareContinentRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_ShareContinentRegardCost_Bit) == 0) return false;
                         value = m_ShareContinentRegardCostValue;
                         return true;
                     }
    bool             GetAttackCivilianRegardCost() const { return (m_flags0 & k_Diplomacy_AttackCivilianRegardCost_Bit) != 0; }
    bool             GetAttackCivilianRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_AttackCivilianRegardCost_Bit) == 0) return false;
                         value = m_AttackCivilianRegardCostValue;
                         return true;
                     }
    bool             GetPreemptiveAttackRegardCost() const { return (m_flags0 & k_Diplomacy_PreemptiveAttackRegardCost_Bit) != 0; }
    bool             GetPreemptiveAttackRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_PreemptiveAttackRegardCost_Bit) == 0) return false;
                         value = m_PreemptiveAttackRegardCostValue;
                         return true;
                     }
    bool             GetEmbargoTradeRegardCost() const { return (m_flags0 & k_Diplomacy_EmbargoTradeRegardCost_Bit) != 0; }
    bool             GetEmbargoTradeRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_EmbargoTradeRegardCost_Bit) == 0) return false;
                         value = m_EmbargoTradeRegardCostValue;
                         return true;
                     }
    bool             GetTakeCityRegardCost() const { return (m_flags0 & k_Diplomacy_TakeCityRegardCost_Bit) != 0; }
    bool             GetTakeCityRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_TakeCityRegardCost_Bit) == 0) return false;
                         value = m_TakeCityRegardCostValue;
                         return true;
                     }
    bool             GetInciteRevolutionRegardCost() const { return (m_flags0 & k_Diplomacy_InciteRevolutionRegardCost_Bit) != 0; }
    bool             GetInciteRevolutionRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_InciteRevolutionRegardCost_Bit) == 0) return false;
                         value = m_InciteRevolutionRegardCostValue;
                         return true;
                     }
    bool             GetAssassinateRulerRegardCost() const { return (m_flags0 & k_Diplomacy_AssassinateRulerRegardCost_Bit) != 0; }
    bool             GetAssassinateRulerRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_AssassinateRulerRegardCost_Bit) == 0) return false;
                         value = m_AssassinateRulerRegardCostValue;
                         return true;
                     }
    bool             GetFranchiseCityRegardCost() const { return (m_flags0 & k_Diplomacy_FranchiseCityRegardCost_Bit) != 0; }
    bool             GetFranchiseCityRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_FranchiseCityRegardCost_Bit) == 0) return false;
                         value = m_FranchiseCityRegardCostValue;
                         return true;
                     }
    bool             GetPlantNukeRegardCost() const { return (m_flags0 & k_Diplomacy_PlantNukeRegardCost_Bit) != 0; }
    bool             GetPlantNukeRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_PlantNukeRegardCost_Bit) == 0) return false;
                         value = m_PlantNukeRegardCostValue;
                         return true;
                     }
    bool             GetSlaveRaidRegardCost() const { return (m_flags0 & k_Diplomacy_SlaveRaidRegardCost_Bit) != 0; }
    bool             GetSlaveRaidRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_SlaveRaidRegardCost_Bit) == 0) return false;
                         value = m_SlaveRaidRegardCostValue;
                         return true;
                     }
    bool             GetLawsuitRegardCost() const { return (m_flags0 & k_Diplomacy_LawsuitRegardCost_Bit) != 0; }
    bool             GetLawsuitRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_LawsuitRegardCost_Bit) == 0) return false;
                         value = m_LawsuitRegardCostValue;
                         return true;
                     }
    bool             GetExpelUnitsRegardCost() const { return (m_flags0 & k_Diplomacy_ExpelUnitsRegardCost_Bit) != 0; }
    bool             GetExpelUnitsRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_ExpelUnitsRegardCost_Bit) == 0) return false;
                         value = m_ExpelUnitsRegardCostValue;
                         return true;
                     }
    bool             GetNukeCityRegardCost() const { return (m_flags0 & k_Diplomacy_NukeCityRegardCost_Bit) != 0; }
    bool             GetNukeCityRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_NukeCityRegardCost_Bit) == 0) return false;
                         value = m_NukeCityRegardCostValue;
                         return true;
                     }
    bool             GetConvertCityRegardCost() const { return (m_flags0 & k_Diplomacy_ConvertCityRegardCost_Bit) != 0; }
    bool             GetConvertCityRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_ConvertCityRegardCost_Bit) == 0) return false;
                         value = m_ConvertCityRegardCostValue;
                         return true;
                     }
    bool             GetEnslaveSettlerRegardCost() const { return (m_flags0 & k_Diplomacy_EnslaveSettlerRegardCost_Bit) != 0; }
    bool             GetEnslaveSettlerRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_EnslaveSettlerRegardCost_Bit) == 0) return false;
                         value = m_EnslaveSettlerRegardCostValue;
                         return true;
                     }
    bool             GetUndergroundRailwayRegardCost() const { return (m_flags0 & k_Diplomacy_UndergroundRailwayRegardCost_Bit) != 0; }
    bool             GetUndergroundRailwayRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_UndergroundRailwayRegardCost_Bit) == 0) return false;
                         value = m_UndergroundRailwayRegardCostValue;
                         return true;
                     }
    bool             GetInciteUprisingRegardCost() const { return (m_flags0 & k_Diplomacy_InciteUprisingRegardCost_Bit) != 0; }
    bool             GetInciteUprisingRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_InciteUprisingRegardCost_Bit) == 0) return false;
                         value = m_InciteUprisingRegardCostValue;
                         return true;
                     }
    bool             GetBioInfectedCityRegardCost() const { return (m_flags0 & k_Diplomacy_BioInfectedCityRegardCost_Bit) != 0; }
    bool             GetBioInfectedCityRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_BioInfectedCityRegardCost_Bit) == 0) return false;
                         value = m_BioInfectedCityRegardCostValue;
                         return true;
                     }
    bool             GetPlagueCityRegardCost() const { return (m_flags0 & k_Diplomacy_PlagueCityRegardCost_Bit) != 0; }
    bool             GetPlagueCityRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_PlagueCityRegardCost_Bit) == 0) return false;
                         value = m_PlagueCityRegardCostValue;
                         return true;
                     }
    bool             GetNanoInfectCityRegardCost() const { return (m_flags0 & k_Diplomacy_NanoInfectCityRegardCost_Bit) != 0; }
    bool             GetNanoInfectCityRegardCost(sint32 &value) const {
                         if((m_flags0 & k_Diplomacy_NanoInfectCityRegardCost_Bit) == 0) return false;
                         value = m_NanoInfectCityRegardCostValue;
                         return true;
                     }
    bool             GetCreateParkRegardCost() const { return (m_flags1 & k_Diplomacy_CreateParkRegardCost_Bit) != 0; }
    bool             GetCreateParkRegardCost(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_CreateParkRegardCost_Bit) == 0) return false;
                         value = m_CreateParkRegardCostValue;
                         return true;
                     }
    bool             GetInjoinCityRegardCost() const { return (m_flags1 & k_Diplomacy_InjoinCityRegardCost_Bit) != 0; }
    bool             GetInjoinCityRegardCost(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_InjoinCityRegardCost_Bit) == 0) return false;
                         value = m_InjoinCityRegardCostValue;
                         return true;
                     }
    bool             GetPillageRegardCost() const { return (m_flags1 & k_Diplomacy_PillageRegardCost_Bit) != 0; }
    bool             GetPillageRegardCost(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_PillageRegardCost_Bit) == 0) return false;
                         value = m_PillageRegardCostValue;
                         return true;
                     }
    bool             GetHoldReceptionRegardBonus() const { return (m_flags1 & k_Diplomacy_HoldReceptionRegardBonus_Bit) != 0; }
    bool             GetHoldReceptionRegardBonus(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_HoldReceptionRegardBonus_Bit) == 0) return false;
                         value = m_HoldReceptionRegardBonusValue;
                         return true;
                     }
    bool             GetHasPactTrustBonus() const { return (m_flags1 & k_Diplomacy_HasPactTrustBonus_Bit) != 0; }
    bool             GetHasPactTrustBonus(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_HasPactTrustBonus_Bit) == 0) return false;
                         value = m_HasPactTrustBonusValue;
                         return true;
                     }
    bool             GetNoWarTrustBonus() const { return (m_flags1 & k_Diplomacy_NoWarTrustBonus_Bit) != 0; }
    bool             GetNoWarTrustBonus(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_NoWarTrustBonus_Bit) == 0) return false;
                         value = m_NoWarTrustBonusValue;
                         return true;
                     }
    bool             GetAttackCivilianTrustCost() const { return (m_flags1 & k_Diplomacy_AttackCivilianTrustCost_Bit) != 0; }
    bool             GetAttackCivilianTrustCost(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_AttackCivilianTrustCost_Bit) == 0) return false;
                         value = m_AttackCivilianTrustCostValue;
                         return true;
                     }
    bool             GetPreemptiveAttackTrustCost() const { return (m_flags1 & k_Diplomacy_PreemptiveAttackTrustCost_Bit) != 0; }
    bool             GetPreemptiveAttackTrustCost(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_PreemptiveAttackTrustCost_Bit) == 0) return false;
                         value = m_PreemptiveAttackTrustCostValue;
                         return true;
                     }
    bool             GetFollowThroughTrustBonus() const { return (m_flags1 & k_Diplomacy_FollowThroughTrustBonus_Bit) != 0; }
    bool             GetFollowThroughTrustBonus(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_FollowThroughTrustBonus_Bit) == 0) return false;
                         value = m_FollowThroughTrustBonusValue;
                         return true;
                     }
    bool             GetUsedNukesTrustCost() const { return (m_flags1 & k_Diplomacy_UsedNukesTrustCost_Bit) != 0; }
    bool             GetUsedNukesTrustCost(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_UsedNukesTrustCost_Bit) == 0) return false;
                         value = m_UsedNukesTrustCostValue;
                         return true;
                     }
    bool             GetWantMapTurns() const { return (m_flags1 & k_Diplomacy_WantMapTurns_Bit) != 0; }
    bool             GetWantMapTurns(sint32 &value) const {
                         if((m_flags1 & k_Diplomacy_WantMapTurns_Bit) == 0) return false;
                         value = m_WantMapTurnsValue;
                         return true;
                     }
    const ProposalElement *GetProposalElement(sint32 index) const;
    sint32           GetNumProposalElement() const { return m_numProposalElement;}
}; /* DiplomacyRecord */

struct DiplomacyRecordAccessorInfo {
    DiplomacyRecord::IntAccessor m_intAccessor;
    DiplomacyRecord::BoolAccessor m_boolAccessor;
    DiplomacyRecord::FloatAccessor m_floatAccessor;
    DiplomacyRecord::BitIntAccessor m_bitIntAccessor;
    DiplomacyRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern DiplomacyRecordAccessorInfo g_DiplomacyRecord_Accessors[];
extern char *g_Diplomacy_Tokens[];
#define k_Num_DiplomacyRecord_Tokens 88

template <class T> class CTPDatabase;
extern CTPDatabase<DiplomacyRecord> *g_theDiplomacyDB;

#endif /* ifndef __Diplomacy_RECORD_H__ */
