
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Icon_RECORD_H__
#define __Icon_RECORD_H__

/*
 * Icon description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */

class IconRecord : public CTPRecord
{
public:
    typedef sint32 (IconRecord::*IntAccessor)() const;
    typedef bool (IconRecord::*BoolAccessor)() const;
    typedef double (IconRecord::*FloatAccessor)() const ;
    typedef bool (IconRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (IconRecord::*BitFloatAccessor)(double &val) const;
private:
    char            * m_Icon;
    char            * m_Movie;
    char            * m_Gameplay;
    char            * m_Historical;
    char            * m_Prereq;
    char            * m_Vari;
    char            * m_FirstFrame;
    char            * m_StatText;
    char            * m_LargeIcon;
    char            * m_SmallIcon;

public:
    IconRecord() { Init(); };
    ~IconRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    IconRecord(const IconRecord &rval) { Init(); *this = rval; }
    void operator=(const IconRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const IconRecord & rval);
    //
    // Accessors
    //
    const char      *GetIcon() const { return m_Icon; }
    const char      *GetMovie() const { return m_Movie; }
    const char      *GetGameplay() const { return m_Gameplay; }
    const char      *GetHistorical() const { return m_Historical; }
    const char      *GetPrereq() const { return m_Prereq; }
    const char      *GetVari() const { return m_Vari; }
    const char      *GetFirstFrame() const { return m_FirstFrame; }
    const char      *GetStatText() const { return m_StatText; }
    const char      *GetLargeIcon() const { return m_LargeIcon; }
    const char      *GetSmallIcon() const { return m_SmallIcon; }
}; /* IconRecord */

struct IconRecordAccessorInfo {
    IconRecord::IntAccessor m_intAccessor;
    IconRecord::BoolAccessor m_boolAccessor;
    IconRecord::FloatAccessor m_floatAccessor;
    IconRecord::BitIntAccessor m_bitIntAccessor;
    IconRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern IconRecordAccessorInfo g_IconRecord_Accessors[];
extern char *g_Icon_Tokens[];
#define k_Num_IconRecord_Tokens 10

template <class T> class CTPDatabase;
extern CTPDatabase<IconRecord> *g_theIconDB;

#endif /* ifndef __Icon_RECORD_H__ */
