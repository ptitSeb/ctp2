
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __BuildingBuildList_RECORD_H__
#define __BuildingBuildList_RECORD_H__

/*
 * BuildingBuildList description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class BuildingRecord;

class BuildingBuildListRecord : public CTPRecord
{
public:
    typedef sint32 (BuildingBuildListRecord::*IntAccessor)() const;
    typedef bool (BuildingBuildListRecord::*BoolAccessor)() const;
    typedef double (BuildingBuildListRecord::*FloatAccessor)() const ;
    typedef bool (BuildingBuildListRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (BuildingBuildListRecord::*BitFloatAccessor)(double &val) const;
private:
    sint32           *m_Building; // Index into Building database
    sint32           m_numBuilding;

public:
    BuildingBuildListRecord() { Init(); };
    ~BuildingBuildListRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    BuildingBuildListRecord(const BuildingBuildListRecord &rval) { Init(); *this = rval; }
    void operator=(const BuildingBuildListRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const BuildingBuildListRecord & rval);
    //
    // Accessors
    //
    sint32           GetBuildingIndex(sint32 index) const;
    const BuildingRecord *GetBuilding(sint32 index) const;
    sint32           GetNumBuilding() const { return m_numBuilding;}
}; /* BuildingBuildListRecord */

struct BuildingBuildListRecordAccessorInfo {
    BuildingBuildListRecord::IntAccessor m_intAccessor;
    BuildingBuildListRecord::BoolAccessor m_boolAccessor;
    BuildingBuildListRecord::FloatAccessor m_floatAccessor;
    BuildingBuildListRecord::BitIntAccessor m_bitIntAccessor;
    BuildingBuildListRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern BuildingBuildListRecordAccessorInfo g_BuildingBuildListRecord_Accessors[];
extern char *g_BuildingBuildList_Tokens[];
#define k_Num_BuildingBuildListRecord_Tokens 1

template <class T> class CTPDatabase;
extern CTPDatabase<BuildingBuildListRecord> *g_theBuildingBuildListDB;

#endif /* ifndef __BuildingBuildList_RECORD_H__ */
