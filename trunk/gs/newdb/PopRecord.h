
/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
#ifndef __Pop_RECORD_H__
#define __Pop_RECORD_H__

/*
 * Pop description
 */
#include "CTPRecord.h"
//
// Range definitions

/*
 * DO NOT EDIT THIS FILE!
 * It is generated automatically by ctpdb
 */
class AdvanceRecord;

class PopRecord : public CTPRecord
{
public:
    typedef sint32 (PopRecord::*IntAccessor)() const;
    typedef bool (PopRecord::*BoolAccessor)() const;
    typedef double (PopRecord::*FloatAccessor)() const ;
    typedef bool (PopRecord::*BitIntAccessor)(sint32 &val) const;
    typedef bool (PopRecord::*BitFloatAccessor)(double &val) const;
private:
    sint32            m_EnableAdvance; // Index into Advance database
    sint32            m_Science;
    sint32            m_Happiness;
    sint32            m_Food;
    sint32            m_Production;
    sint32            m_Commerce;

public:
    PopRecord() { Init(); };
    ~PopRecord();
    Init();
    // These methods are needed for records to conform to
    // 'Orthodox Cannonical Form' and work with resizing STL vectors. 
    PopRecord(const PopRecord &rval) { Init(); *this = rval; }
    void operator=(const PopRecord &rval);

    void CheckRequiredFields(DBLexer *lex);
    sint32 Parse(DBLexer *lex);

    void ResolveDBReferences();
    void Merge(const PopRecord & rval);
    //
    // Accessors
    //
    sint32           GetEnableAdvanceIndex() const { return m_EnableAdvance; }
    const AdvanceRecord *GetEnableAdvance() const;
    sint32           GetScience() const { return m_Science; }
    sint32           GetHappiness() const { return m_Happiness; }
    sint32           GetFood() const { return m_Food; }
    sint32           GetProduction() const { return m_Production; }
    sint32           GetCommerce() const { return m_Commerce; }
}; /* PopRecord */

struct PopRecordAccessorInfo {
    PopRecord::IntAccessor m_intAccessor;
    PopRecord::BoolAccessor m_boolAccessor;
    PopRecord::FloatAccessor m_floatAccessor;
    PopRecord::BitIntAccessor m_bitIntAccessor;
    PopRecord::BitFloatAccessor m_bitFloatAccessor;
};
extern PopRecordAccessorInfo g_PopRecord_Accessors[];
extern char *g_Pop_Tokens[];
#define k_Num_PopRecord_Tokens 6

template <class T> class CTPDatabase;
extern CTPDatabase<PopRecord> *g_thePopDB;

#endif /* ifndef __Pop_RECORD_H__ */
